<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo博客部署到github后404</title>
      <link href="2021/01/28/98_hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0github%E5%90%8E404/"/>
      <url>2021/01/28/98_hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0github%E5%90%8E404/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>hexo博客部署到github上后，输入域名发现404了。查看github仓库，发现用于绑定域名的文件CNAME消失了，可能是因为本地hexo博客没有CNAME文件导致的。</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>将需要上传至github的内容放在source文件夹，例如CNAME、favicon.ico、images等。</p>]]></content>
      
      
      <categories>
          
          <category> 报错 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 博客 </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/01/28/94_chrome%E3%80%81firefox%E5%9C%A8linux%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E5%AE%89%E8%A3%85%E4%BD%8D%E7%BD%AE/"/>
      <url>2021/01/28/94_chrome%E3%80%81firefox%E5%9C%A8linux%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E5%AE%89%E8%A3%85%E4%BD%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="Chrome安装位置"><a href="#Chrome安装位置" class="headerlink" title="Chrome安装位置"></a>Chrome安装位置</h1><p><code>/opt/google/chrome</code></p><p>在配置idea启动chrome时，直接选择<code>/opt/google/chrome/chrome</code>即可。</p><h1 id="Firefox安装位置"><a href="#Firefox安装位置" class="headerlink" title="Firefox安装位置"></a>Firefox安装位置</h1><p><code>usr/lib/firefox</code></p><p>在配置idea启动firefox时，直接选择<code>usr/lib/firefox/firefox</code>即可。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/01/28/95_ked%20%E5%9E%83%E5%9C%BE%E6%A1%B6%E6%8A%A5%E9%94%99:%20malformed%20url%20trash:%E2%81%84%20%20%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>2021/01/28/95_ked%20%E5%9E%83%E5%9C%BE%E6%A1%B6%E6%8A%A5%E9%94%99:%20malformed%20url%20trash:%E2%81%84%20%20%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>在使用manjaro kde系统时，点击任务栏上的trash垃圾桶图标，报错<code>malformed url trash:/</code>，译为<code>错误的垃圾桶路径</code>。</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p><code>System Settings</code> —&gt; <code>default applications</code> —&gt; <code>File manager</code> 选择为之前系统默认的<code>Dolphiin</code>。因为系统的文件管理器选择错误了，所以才会如此。</p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>删除<code>~/.local/share/Trash</code>文件夹中的所有文件。可能是因为trash中错误的垃圾文件，导致了trash的错误。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/01/28/97_XML%E5%85%A5%E9%97%A8/"/>
      <url>2021/01/28/97_XML%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="XML简介"><a href="#XML简介" class="headerlink" title="XML简介"></a>XML简介</h1><h2 id="什么是XML？"><a href="#什么是XML？" class="headerlink" title="什么是XML？"></a>什么是XML？</h2><p>xml 是可扩展的标记性语言。</p><h2 id="XML的作用"><a href="#XML的作用" class="headerlink" title="XML的作用"></a>XML的作用</h2><ol><li>用来保存数据， 而且这些数据具有自我描述性</li><li>它还可以做为项目或者模块的配置文件</li><li>还可以做为网络传输数据的格式（现在 JSON 为主）</li></ol><h1 id="XML初体验"><a href="#XML初体验" class="headerlink" title="XML初体验"></a>XML初体验</h1><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    上面一行为XML声明，是必须存在的</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">books</span>&gt;</span><span class="comment">&lt;!--books表示多个图书信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">book</span> <span class="attr">sn</span>=<span class="string">"1010"</span>&gt;</span><span class="comment">&lt;!--book表示一个图书信息，sn表示序列号--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>那些比拼命努力更重要的事<span class="tag">&lt;/<span class="name">name</span>&gt;</span><span class="comment">&lt;!--name表示书名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">author</span>&gt;</span>乔治•维兰特<span class="tag">&lt;/<span class="name">author</span>&gt;</span><span class="comment">&lt;!--author表示作者--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">price</span>&gt;</span>32<span class="tag">&lt;/<span class="name">price</span>&gt;</span><span class="comment">&lt;!--price表示价格--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">booo</span> <span class="attr">sn</span>=<span class="string">"1011"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Java从入门到入土<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">author</span>&gt;</span>Jason<span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">price</span>&gt;</span>99.80<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">booo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">books</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h1 id="XML语法"><a href="#XML语法" class="headerlink" title="XML语法"></a>XML语法</h1><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>XML声明用来表示这个文件是xml文件，是必不可少的，不能出错的。不然浏览器就无法解析这个xml文件。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li><code>version</code>：xml版本号</li><li><code>encoding</code>：xml文件采用的编码方式</li><li><code>standalone="yes/no"</code>：设置这个xml文件是否独立</li></ul><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>xml的注释与html完成一致。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--这是xml注释--&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="元素（标签）"><a href="#元素（标签）" class="headerlink" title="元素（标签）"></a>元素（标签）</h2><h3 id="什么是xml元素？"><a href="#什么是xml元素？" class="headerlink" title="什么是xml元素？"></a>什么是xml元素？</h3><p>元素是指从开始标签到结束标签的内容。</p><h3 id="xml命名规则"><a href="#xml命名规则" class="headerlink" title="xml命名规则"></a>xml命名规则</h3><ul><li>名称可以含字母、 数字以及其他的字符</li><li>名称不能以数字或者标点符号开始</li><li>名称不能包含空格</li></ul><h3 id="单标签和双标签"><a href="#单标签和双标签" class="headerlink" title="单标签和双标签"></a>单标签和双标签</h3><p>xml 中的元素（ 标签） 也 分成 单标签和双标签。</p><ul><li>单标签：&lt;标签名 属性=”值” 属性=”值” …… /&gt;</li><li>双标签：&lt; 标签名 属性=”值” 属性=”值” ……&gt;文本数据或子标签&lt;/标签名&gt;</li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--单标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">human</span> <span class="attr">name</span>=<span class="string">"Jason"</span> <span class="attr">age</span>=<span class="string">"21"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--双标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">person</span> <span class="attr">name</span>=<span class="string">"bob"</span> <span class="attr">age</span>=<span class="string">"22"</span>&gt;</span></span><br><span class="line">    其实我是王多鱼</span><br><span class="line"><span class="tag">&lt;/<span class="name">person</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>xml 的标签属性和 html 的标签属性是非常类似的， 属性可以提供元素的额外信息。</p><p>一个标签上可以书写多个属性，每个属性的值必须使用 引号 引起来，与html的标签书写规则一致。</p><h2 id="文本区域（CDATA区）"><a href="#文本区域（CDATA区）" class="headerlink" title="文本区域（CDATA区）"></a>文本区域（CDATA区）</h2><p>有的时候，我们需要在xml写一些纯文本的内容。这个时候我们不希望自己写的文本被xml解析，就可以使用<code>CDATA</code>来实现。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;![CDATA[纯文本内容]]&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="其他语法规定"><a href="#其他语法规定" class="headerlink" title="其他语法规定"></a>其他语法规定</h2><ul><li>所有 XML 元素都须有关闭标签（也就是闭合）</li><li>XML 标签对大小写敏感</li><li>XML 必须正确地嵌套</li><li>XML 文档必须有根元素，且仅只能有一个（没有父标签的元素，被称为跟元素）</li><li>XML 的属性值须加引号</li><li>XML 中想要显示<code>&lt;</code>、<code>&gt;</code>等符号，我们必须使用字符实体（如<code>lt;</code>、<code>gt;</code>等）</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/01/28/96_%E5%88%9D%E8%AF%86Shell/"/>
      <url>2021/01/28/96_%E5%88%9D%E8%AF%86Shell/</url>
      
        <content type="html"><![CDATA[<p>程序</p><h2 id="什么是程序"><a href="#什么是程序" class="headerlink" title="什么是程序"></a>什么是程序</h2><p>程序是为实现特定目标或解决特定问题而用计算机语言编写的命令序列的集合。简单来说，电脑里面的应用都是程序来控制的，程序天天见。程序是由序列组成的，告诉计算机如何完成一个具体的任务。由于现在的计算机还不能理解人类的自然语言，所以还不能用自然语言编写计算机程序，不过现在语音识别技术己经很历害了，在不久的将来，估计，电脑就自己会编程序了。</p><h2 id="程序能做什么？"><a href="#程序能做什么？" class="headerlink" title="程序能做什么？"></a>程序能做什么？</h2><p>电脑控制手机控制机械控制物联，一切自动化制造的系统，都是由程序来控制的。</p><h2 id="什么是编程？"><a href="#什么是编程？" class="headerlink" title="什么是编程？"></a>什么是编程？</h2><p>编程是一个动词，编程==写代码。写代码为了什么？为了让计算机干你想要干的事情。</p><h1 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h1><h2 id="那计算机能理解的语言是什么？"><a href="#那计算机能理解的语言是什么？" class="headerlink" title="那计算机能理解的语言是什么？"></a>那计算机能理解的语言是什么？</h2><p>计算机只能理解二进制，如：01010101等。如果使用二进制来写代码，这样开发速度太慢。所以最好的办法就是人输入简单的指令，计算机能把指令转成二进制执行。</p><h2 id="有哪些编程语言呢？"><a href="#有哪些编程语言呢？" class="headerlink" title="有哪些编程语言呢？"></a>有哪些编程语言呢？</h2><p>编程语言总体分为：机器语言、汇编语言、高级语言</p><h3 id="机器语言"><a href="#机器语言" class="headerlink" title="机器语言"></a>机器语言</h3><p>由于计算机内部只能接受二进制，因此用二进制代码0和1描述的指令成为机器指令，全部机器指令的集合构成计算机的机器语言。用机器语言编程的程序成为目标程序，只有目标程序才能被计算机直接识别和执行。但是机器语言编写的程序无明显特征，难以记忆，不便于阅读和书写，且依赖与具体机种，局限性很大，机器语言属于低级语言。</p><p>用机器语言编写程序，编程人员要首先熟记所用计算机的全部指令代码和代码的涵义。手编程序时，程序员得自己处理每条指令和每一数据的存储分配和输入输出，还得记住编程过程中每步所使用的工作单元处在何种状态。这是一件十分繁琐的工作。编写程序花费的时间往往是实际运行时间的几十倍或几百倍。而且，编出的程序全是些0和1的指令代码，直观性差，还容易出错。除了计算机生产厂家的专业人员外，绝大多数的程序员已经不再去学习机器语言了。</p><p>机器语言是微处理器理解和使用的，用于控制它的操作二进制代码。</p><h3 id="汇编语言"><a href="#汇编语言" class="headerlink" title="汇编语言"></a>汇编语言</h3><p>汇编语言的实质和机器语言是相同的，都是直接对硬件操作，只不过指令采用了英文缩写的标识符，更容易识别和记忆。它同样需要编程者将每一步具体的操作用命令的形式写出来。</p><p>汇编程序的每一句指令只能对应实际操作过程中的一个很细微的动作。例如移动、自增，因此汇编源程序一般比较冗长、复杂、容易出错，而且使用汇编语言编程需要有更多的计算机专业知识，但汇编语言的优点也是显而易见的，用汇编语言所能完成的操作不是一般高级语言所能够实现的，而且源程序经汇编生成的可执行文件不仅比较小，而且执行速度很快。</p><h3 id="高级语言"><a href="#高级语言" class="headerlink" title="高级语言"></a>高级语言</h3><p>高级语言是大多数编程者的选择。和汇编语言相比，它不但将许多相关的机器指令合成为单条指令，并且去掉了与具体操作有关但与完成工作无关的细节，例如使用堆栈、寄存器等，这样就大大简化了程序中的指令。同时，由于省略了很多细节，编程者也就不需要有太多的专业知识。</p><p>高级语言主要是相对于汇编语言而言，它并不是特指某一种具体的语言，而是包括了很多编程语言，像最简单的编程语言PASCAL语言也属于高级语言。</p><p>高级语言所编制的程序不能直接被计算机识别，必须经过转换才能被执行，按转换方式可将它们分为两类：</p><h4 id="编译类"><a href="#编译类" class="headerlink" title="编译类"></a>编译类</h4><p>编译是指在应用源程序执行之前，就将程序源代码“翻译”成目标代码（机器语言），因此其目标程序可以脱离其语言环境独立执行(编译后生成的可执行文件，是cpu可以理解的2进制的机器码组成的)，使用比较方便、效率较高。但应用程序一旦需要修改，必须先修改源代码，再重新编译生成新的目标文件（*.obj，也就是OBJ文件）才能执行，只有目标文件而没有源代码，修改很不方便。</p><p>编译后程序运行时不需要重新翻译，直接使用编译的结果就行了。程序执行效率高，依赖编译器，跨平<br>台性差些。如C、C++、Delphi等。</p><h4 id="解释类"><a href="#解释类" class="headerlink" title="解释类"></a>解释类</h4><p>执行方式类似于我们日常生活中的“同声翻译”，应用程序源代码一边由相应语言的解释器“翻译”成目标代码（机器语言），一边执行，因此效率比较低，而且不能生成可独立执行的可执行文件，应用程序不能脱离其解释器(想运行，必须先装上解释器，就像跟老外说话，必须有翻译在场)，但这种方式比较灵活，可以动态地调整、修改应用程序。如Shell，Python、Java、PHP、Ruby等语言。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="机器语言-1"><a href="#机器语言-1" class="headerlink" title="机器语言"></a>机器语言</h4><ul><li>优点：最底层，速度最快</li><li>缺点：最复杂，开发效率最低</li></ul><h4 id="汇编语言-1"><a href="#汇编语言-1" class="headerlink" title="汇编语言"></a>汇编语言</h4><ul><li>优点：较为底层，速度较快</li><li>缺点：较为复杂，开发效率较低</li></ul><h4 id="高级语言-1"><a href="#高级语言-1" class="headerlink" title="高级语言"></a>高级语言</h4><ul><li>编译型：执行速度快，但跨平台性差</li><li>解释型：跨平台性强，但执行速度慢</li></ul><h1 id="Shell概述"><a href="#Shell概述" class="headerlink" title="Shell概述"></a>Shell概述</h1><h2 id="什么是Shell？"><a href="#什么是Shell？" class="headerlink" title="什么是Shell？"></a>什么是Shell？</h2><p>首先Shell的英文含义是“壳”； 它是相对于内核来说的，因为它是建立在内核的基础上，面向于用户的一种表现形式，比如我们看到一个球，见到的是它的壳，而非核。 Linux中的Shell，是指一个面向用户的命令接口，表现形式就是一个可以由用户录入的界面，这个界面也可以反馈运行信息；</p><h2 id="Shell在Linux中的存在形式"><a href="#Shell在Linux中的存在形式" class="headerlink" title="Shell在Linux中的存在形式"></a>Shell在Linux中的存在形式</h2><p>由于Linux不同于Windows，Linux是内核与界面分离的，它可以脱离图形界面而单独运行，同样也可以在内核的基础上运行图形化的桌面。 这样，在Linux系统中，就出现了两种Shell表现形式，一种是在无图形界面下的终端运行环境下的Shell，另一种是桌面上运行的类似Windows 的MS-DOS运行窗口，前者我们一般习惯性地简称为终端，后者一般直接称为Shell。</p><h2 id="Shell如何执行用户的指令"><a href="#Shell如何执行用户的指令" class="headerlink" title="Shell如何执行用户的指令"></a>Shell如何执行用户的指令</h2><p><strong>Shell有两种执行指令的方式：</strong></p><ol><li>第一种方法是用户事先编写一个sh脚本文件，内含Shell脚本，而后使用Shell程序执行该脚本，这种方式，我们习惯称为Shell编程。</li><li>第二种形式，则是用户直接在Shell界面上执行Shell命令，由于Shell界面的关系，大家都习惯一行行的书写，很少写出成套的程序来一起执行，所以也称命令行。</li></ol><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>Shell 只是为用户与机器之间搭建成的一个桥梁，让我们能够通过Shell来对计算机进行操作和交互，从而达到让计算机为我们服务的目的。</p><h1 id="Shell的分类"><a href="#Shell的分类" class="headerlink" title="Shell的分类"></a>Shell的分类</h1><p>Linux中默认的Shell是/bin/bash，流行的Shell有ash、bash、ksh、csh、zsh等，不同的Shell都有自己的特点以及用途。</p><h2 id="bash"><a href="#bash" class="headerlink" title="bash"></a>bash</h2><p>大多数Linux系统默认使用的Shell，bash Shell是Bourne Shell 的一个免费版本，它是最早的Unix Shell。</p><p>bash还有一个特点，可以通过help命令来查看帮助。包含的功能几乎可以涵盖Shell所具有的功能，所以一般的Shell脚本都会指定它为执行路径。</p><h2 id="csh"><a href="#csh" class="headerlink" title="csh"></a>csh</h2><p>C Shell 使用的是“类C”语法，csh是具有C语言风格的一种Shell，其内部命令有52个，较为庞大。目前使用的并不多，已经被/bin/tcsh所取代。</p><h2 id="tcsh"><a href="#tcsh" class="headerlink" title="tcsh"></a>tcsh</h2><p>tcsh是csh的增强版，与C Shell完全兼容。</p><h2 id="ksh"><a href="#ksh" class="headerlink" title="ksh"></a>ksh</h2><p>Korn Shell 的语法与Bourne Shell相同，同时具备了C Shell的易用特点。许多安装脚本都使用ksh,ksh 有42条内部命令，与bash相比有一定的限制性。</p><h2 id="sh"><a href="#sh" class="headerlink" title="sh"></a>sh</h2><p>是一个快捷方式，已经被/bin/bash所取代。</p><h2 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h2><p>目前Linux里最庞大的一种 zsh。它有84个内部命令，使用起来也比较复杂。一般情况下，不会使用该Shell。</p><h1 id="Shell能做什么？"><a href="#Shell能做什么？" class="headerlink" title="Shell能做什么？"></a>Shell能做什么？</h1><ul><li>自动化批量系统初始化程序 （update，软件安装，时区设置，安全策略…）</li><li>自动化批量软件部署程序（LAMP，LNMP，Tomcat，LVS，Nginx）</li><li>应用管理程序（KVM，集群管理扩容，MySQL，DELLR720批量RAID）</li><li>日至分析处理程序（PV, UV, 200, !200, top 100, grep/awk）</li><li>自动化备份恢复程序（MySQL完全备份/增量 + Crond）</li><li>自动化管理程序（批量远程修改密码，软件升级，配置更新）</li><li>自动化信息采集及监控程序（收集系统/应用状态信息，CPU,Mem,Disk,Net,TCP Status,Apache,MySQL）</li><li>配合Zabbix信息采集（收集系统/应用状态信息，CPU,Mem,Disk,Net,TCP Status,Apache,MySQL）</li><li>自动花扩容（增加云主机——&gt;业务上线）</li><li>Zabbix监控CPU 80%+|-50% Python API AWS/EC2（增加/删除云主机） + Shell Script（业务上线）</li></ul><h1 id="login-shell与nologin-shell的区别"><a href="#login-shell与nologin-shell的区别" class="headerlink" title="login shell与nologin shell的区别"></a>login shell与nologin shell的区别</h1><h2 id="表面区别"><a href="#表面区别" class="headerlink" title="表面区别"></a>表面区别</h2><p>Login shell就是你进入shell是需要输使用者名称密码的，比如你启动图形介面最后一步需要你输入使用者名称密码，只有你输入正确，才能进入桌面，这进入的就是一个login shell 。另外比如你ctrl + alt + F2等进入非图形介面的tty ，都是需要你输入使用者名称密码之后才能继续操作，这种情况下你进入的就是login shell 。</p><p>而nologin shell就是你不需要输入密码就能进入的shell 。比如你进入图形介面之后，右键开启终端，就直接打开了一个承载shell的终端，在这个终端中你不用输入使用者名称密码就直接可以使用命令。</p><p>这只是表面上的区别，其实真正影响这两种shell使之不同的是开启两者所读取的环境变数档案不同。</p><h2 id="深层区别"><a href="#深层区别" class="headerlink" title="深层区别"></a>深层区别</h2><p>区分login shell和no login shell的主要原因是它们启动和退出时自动执行的脚本不同。</p><h3 id="login-shell"><a href="#login-shell" class="headerlink" title="login shell"></a>login shell</h3><p>对于login shell其启动时自动执行的脚本文件顺序如下</p><ol><li>首先执行<code>/etc/profile</code></li><li>再执行<code>~/.bash_profile</code>, <code>~/.bash_login</code>, <code>~/.profile</code>中第一个存在的脚本（按顺序搜索，只会执行其中一个）</li></ol><p>如果shell启动时添加了<code>--noprofile</code>选项则不会执行上述文件。在login shell退出时，会执行<code>~/.bash_logout</code></p><h3 id="no-login-shell"><a href="#no-login-shell" class="headerlink" title="no login shell"></a>no login shell</h3><p>对于no login shell，启动时会执行<code>/etc/bashrc</code>和<code>~/.bashrc</code>，如果shell启动时添加了<code>--norc</code>选项则不会执行上述文件，如果添加了<code>--rcfile &lt;filename&gt;</code>选项则会执行指定的filename文件，也不会执行上述文件。no login shell退出时不会自动执行脚本文件。</p><p>而我们知道nologin shell一定是在已经登入了login shell的前提下开启的，比如字元视窗startx启动图形介面，或者图形介面里开启新的终端。所以nologin shell算是login shell的一个子程式，根据shell中变数的继承法则，nologin shell会在继承原本login shell所有的环境变数的基础上读取~/.bashrc中的引数。</p><p>这就是这些个档案所有的关系了。所以有的时候，你设定的环境变数并没有生效，可以根据这个读取顺序检视一下是不是你的设定被覆盖掉了……</p><h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><p>no login shell和login shell在启动和退出时会执行不同的脚本文件从而影响shell中的环境变量，本文根据bash的文档描述了两种shell启动时自动执行的脚本文件的区别。</p><p>login shell和no login shell启动时执行的脚本文件是完全不同的，因此，运行环境初始化脚本需要合理配置才能让login shell和no login shell都能执行，同时也可以为login shell和no login shell配置不同的运行环境初始化脚本。</p><blockquote><ul><li>根据该定义，我们可以使用<code>bash --login</code>启动一个login shell或者通过<code>echo $0</code>的输出结果是否以<code>/</code>开头来判断一个shell是否为login shell。</li></ul></blockquote><h1 id="bash初识化"><a href="#bash初识化" class="headerlink" title="bash初识化"></a>bash初识化</h1><h2 id="bash环境变量文件"><a href="#bash环境变量文件" class="headerlink" title="bash环境变量文件"></a>bash环境变量文件</h2><ul><li><code>/etc/profile</code>：全局（公有）配置，不管是哪个用户，登录时都会读取该文件。</li><li><code>/etc/bashrc</code>：它也是全局（公有）的，bash 执行时，不管是何种方式，都会读取此文件。（Ubuntu 没有此文件，与之对应的是 /ect/bash.bashrc）</li><li><code>~/.bash_profile</code>、<code>~/.bash_login</code>、<code>~/.profile</code>：若 bash 是以 login 方式执行时，读取<code> ~/.bash_profile</code>，若它不存在，则读取 <code>~/.bash_login</code>，若前两者都不存在，读取 <code>~/.profile</code>。</li><li><code>~/.bashrc</code>：当 bash 是以 non-login 形式执行时，读取此文件。若是以 login 形式执行，则不会读取此文件。</li><li><code>~/.bash_logout</code>：当为login形式注销时，此文件才会被读取。</li></ul><h2 id="bash环境变量文件加载顺序"><a href="#bash环境变量文件加载顺序" class="headerlink" title="bash环境变量文件加载顺序"></a>bash环境变量文件加载顺序</h2><ul><li>图形模式登录时，顺序读取：<code>/etc/profile </code>和 <code>~/.profile</code></li><li>图形模式登录后，打开终端时，顺序读取：<code>/etc/bashrc</code> 和<code> ~/.bashrc</code></li><li>文本模式登录时，顺序读取：<code>/etc/bashrc</code>，<code>/etc/profile</code> 和 <code>~/.bash_profile</code></li><li>从其它用户 su 到该用户，则分两种情况：<ol><li>如果带 -l 参数（或-参数，–login 参数），如：<code>su -l username</code>，则 bash 是 login 的，它将顺序读取以<br>下配置文件：<code>/etc/bashrc</code>，<code>/etc/profile</code> 和<code>~/.bash_profile</code>。</li><li>如果没有带 -l 参数，则 bash 是 <code>non-login</code> 的，它将顺序读取：<code>/etc/bashrc</code> 和 <code>~/.bashrc</code></li></ol></li><li>注销时，或退出 su 登录的用户，如果是 longin 方式，那么 bash 会读取：<code>~/.bash_logout</code>。<ol><li>执行自定义的 Shell 文件时，若使用 <code>bash -l a.sh</code> 的方式，则 bash 会读取：<code>/etc/profile</code> 和<br><code>~/.bash_profile</code>。若使用其它方式，如：<code>bash a.sh</code>，<code>./a.sh</code>，<code>sh a.sh</code>（这个不属于bash Shell），则不<br>会读取上面的任何文件。</li><li>上面的例子凡是读取到 <code>~/.bash_profile</code> 的，若该文件不存在，则读取<code> ~/.bash_login</code>，若前两者不存<br>在，读取 <code>~/.profil</code>。</li></ol></li></ul><p>![Login shell与Nologin shell](img/Login shell与Nologin shell.png)</p><h1 id="bash特征"><a href="#bash特征" class="headerlink" title="bash特征"></a>bash特征</h1><h2 id="命令历史记忆功能"><a href="#命令历史记忆功能" class="headerlink" title="命令历史记忆功能"></a>命令历史记忆功能</h2><p>Bash 有自动记录命令的功能，自动记录到<code>.bash_history</code>隐藏文件中。在bash中,使用history 命令来查看和操作之前的命令,以此来提高工作效率。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看之前使用的所有命令</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">history</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示最近的n个命令</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">history</span> n</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除相应的第n个命令</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">history</span> -d n</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定执行命令历史中的第n条语句</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> !n</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定执行命令历史中倒数第n条语句</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> !-n</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行命令历史中最后一条语句</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> !!</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行命令历史中最近一条以[String]开头的语句(不需要写[])</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ![String]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 引用上一个命令中的最后一个参数</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> !$</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将命令历史写入命令历史文件中</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">history</span> -w</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 回显 <span class="built_in">echo</span> 之后的语句，而使用 <span class="built_in">echo</span> <span class="variable">$FILENAME</span> 命令可以查看该 file 所在的路径</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$HISTFILE</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看命令历史的内容</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat .bash_history</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除所有的命令历史记录</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">history</span> -c</span></span><br></pre></td></tr></tbody></table></figure><h2 id="别名功能"><a href="#别名功能" class="headerlink" title="别名功能"></a>别名功能</h2><p><code>alias</code>命令可以为其他命令起别名，这样可以把本来很成长的指令简化缩写，来提高工作效率。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看系统当前所有的别名</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">alias</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 定义新的别名</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">alias</span> newName=<span class="string">'oldName'</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除已定义的别名</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">unalias</span> newName</span></span><br></pre></td></tr></tbody></table></figure><p>如果想要文件永久生效，只需将上述别名命令写到对应用户或者系统<code>.bashrc</code>文件中，然后<code>source</code>一下<code>.bashrc</code>文件。如果想用真是命令可以在命令前面添加反斜杠，使别名失效。</p><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><table><thead><tr><th>快捷键</th><th>作用</th></tr></thead><tbody><tr><td>ctrl + A</td><td>把光标移动到命令行开头。</td></tr><tr><td>ctrl + E</td><td>把光标移动到命令行结尾。</td></tr><tr><td>ctrl + C</td><td>强制终止当前的命令。</td></tr><tr><td>ctrl + L</td><td>清屏，相当于clear命令。</td></tr><tr><td>ctrl + U</td><td>删除或剪切光标之前的命令。</td></tr><tr><td>ctrl + K</td><td>删除或剪切光标之后的内容。</td></tr><tr><td>ctrl + Y</td><td>粘贴ctrl+U或ctrl+K剪切的内容.</td></tr><tr><td>ctrl + R</td><td>搜索历史记录。</td></tr><tr><td>ctrl + D</td><td>退出当前终端。</td></tr><tr><td>ctrl + Z</td><td>暂停，并放入后台。</td></tr><tr><td>ctrl + S</td><td>暂停屏幕输出。</td></tr><tr><td>ctrl + Q</td><td>恢复屏幕输出。</td></tr></tbody></table><h2 id="前后台作业控制"><a href="#前后台作业控制" class="headerlink" title="前后台作业控制"></a>前后台作业控制</h2><p>Linux bash Shell单一终端界面下，经常需要管理或同时完成多个作业，如一边执行编译，一边实现数据备份，以及执行SQL查询等其他的任务。所有的上述的这些工作可以在一个 bash 内实现，在同一个终端窗口完成。</p><h3 id="前后台作业的定义"><a href="#前后台作业的定义" class="headerlink" title="前后台作业的定义"></a>前后台作业的定义</h3><p>前后台作业实际上对应的也就是前后台进程，因此也就有对应的 pid。在这里统称为作业。</p><p>无论是前台作业还是后台作业，两者都来自当前的Shell，都是当前Shell的子程序。</p><ul><li><p>前台作业：可以由用户参与交互及控制的作业。</p></li><li><p>后台作业：在内存可以自运行的作业，用户无法参与交互以及使用[ctrl]+c来终止，只能通过bg或fg来调用的作业。</p></li></ul><h3 id="几个常用的作业命令"><a href="#几个常用的作业命令" class="headerlink" title="几个常用的作业命令"></a>几个常用的作业命令</h3><ul><li><code>command &amp;</code>：直接在命令的后面加上&amp;，即可让执行的命令作业进入后台运行。</li><li><code>ctrl + z</code>：使用这个组合快捷键也可以让当前作业切换到后台运行。</li><li><code>jobs</code>：使用此命令可以查看后台作业状态。</li><li><code>fg %n</code>：n为编号，使用此命令可以让后台运行的作业n切换到前台运行。</li><li><code>bg %n</code>：n为编号，使用此命令可以让前台运行的作业n切换到后台运行。</li><li><code>kill -9 %n</code>：强制终止执行的作业n。</li><li><code>kill -15 %n</code>：正常终止执行的作业n。</li></ul><h3 id="作业脱机管理"><a href="#作业脱机管理" class="headerlink" title="作业脱机管理"></a>作业脱机管理</h3><p>将作业(进程)切换到后台可以避免由于误操作如[ctrl]+c等导致的job被异常中断的情形，而脱机管理主要是针对终端异常断开的情形。</p><p>通常使用nohup命令来使得脱机或注销之后，Job依旧可以继续运行。也就是说nohup忽略所有挂断(SIGHUP)<br>信号。</p><p>如果该方式命令之后未指定&amp;符号，则job位于前台，指定&amp;符号，则job位于后台。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/01/28/93_JQuery%E5%85%A5%E9%97%A8/"/>
      <url>2021/01/28/93_JQuery%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="JQuery概述"><a href="#JQuery概述" class="headerlink" title="JQuery概述"></a>JQuery概述</h1><h2 id="什么是JQuery？"><a href="#什么是JQuery？" class="headerlink" title="什么是JQuery？"></a>什么是JQuery？</h2><p>jQuery， 顾名思义， 也就是 JavaScript 和查询（Query） ， 它就是辅助 JavaScript 开发的 js 类库。</p><h2 id="JQuery核心思想"><a href="#JQuery核心思想" class="headerlink" title="JQuery核心思想"></a>JQuery核心思想</h2><p>它的核心思想是 write less,do more(写得更少,做得更多)， 所以它实现了很多浏览器的兼容问题。</p><h2 id="JQuery流行程度"><a href="#JQuery流行程度" class="headerlink" title="JQuery流行程度"></a>JQuery流行程度</h2><p>jQuery 现在已经成为最流行的 JavaScript 库， 在世界前 10000 个访问最多的网站中， 有超过 55%在使用jQuery。</p><h2 id="jQuery-好处"><a href="#jQuery-好处" class="headerlink" title="jQuery 好处"></a>jQuery 好处</h2><p>jQuery 是免费、 开源的， jQuery 的语法设计可以使开发更加便捷， 例如操作文档对象、 选择 DOM 元素、制作动画效果、 事件处理、 使用 Ajax 以及其他功能。</p><h1 id="JQuery初体验"><a href="#JQuery初体验" class="headerlink" title="JQuery初体验"></a>JQuery初体验</h1><p>需求： 使用 jQuery 给一个按钮绑定单击事件?</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JQuery初体验<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入jquery文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery-3.5.1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">           $(<span class="string">"#one"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">               alert(<span class="string">"使用JQuery给一个按钮绑定单击事件"</span>);</span></span><br><span class="line">           });</span><br><span class="line">        });</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"one"</span>&gt;</span>你真还好吗？<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h1 id="JQuery核心函数"><a href="#JQuery核心函数" class="headerlink" title="JQuery核心函数"></a>JQuery核心函数</h1><p>$ 是 jQuery 的核心函数， 能完成 jQuery 的很多功能。 $()就是调用$这个函数</p><ol><li><p>传入参数为 [ 函数 ] 时：</p><p>表示页面加载完成之后。 相当于 window.onload = function(){}</p></li><li><p>传入参数为 [ HTML 字符串 ] 时：</p><p>会对我们创建这个 html 标签对象</p></li><li><p>传入参数为 [ 选择器字符串 ] 时：</p><p>$(“#id 属性值”); id 选择器， 根据 id 查询标签对象</p><p>$(“标签名”); 标签名选择器， 根据指定的标签名查询标签对象</p><p>$(“.class 属性值”); 类型选择器， 可以根据 class 属性查询标签对象</p></li><li><p>传入参数为 [ DOM 对象 ] 时：</p><p>会把这个 dom 对象转换为 jQuery 对象</p></li></ol><h1 id="jQuery-对象和-dom-对象区分"><a href="#jQuery-对象和-dom-对象区分" class="headerlink" title="jQuery 对象和 dom 对象区分"></a>jQuery 对象和 dom 对象区分</h1><h2 id="什么是-jQuery-对象？-什么是-dom-对象？"><a href="#什么是-jQuery-对象？-什么是-dom-对象？" class="headerlink" title="什么是 jQuery 对象？ 什么是 dom 对象？"></a>什么是 jQuery 对象？ 什么是 dom 对象？</h2><h3 id="DOM对象"><a href="#DOM对象" class="headerlink" title="DOM对象"></a>DOM对象</h3><ol><li>通过 getElementById()查询出来的标签对象是 Dom 对象</li><li>通过 getElementsByName()查询出来的标签对象是 Dom 对象</li><li>通过 getElementsByTagName()查询出来的标签对象是 Dom 对象</li><li>通过 createElement() 方法创建的对象， 是 Dom 对象</li></ol><blockquote><p>DOM 对象 Alert 出来的效果是： [object HTML 标签名 Element]</p></blockquote><h3 id="JQuery对象"><a href="#JQuery对象" class="headerlink" title="JQuery对象"></a>JQuery对象</h3><ol><li>通过 JQuery 提供的 API 创建的对象， 是 JQuery 对象</li><li>通过 JQuery 包装的 Dom 对象， 也是 JQuery 对象</li><li>通过 JQuery 提供的 API 查询到的对象， 是 JQuery 对象</li></ol><blockquote><p>jQuery 对象 Alert 出来的效果是： [object Object]</p></blockquote><h2 id="jQuery-对象的本质是什么？"><a href="#jQuery-对象的本质是什么？" class="headerlink" title="jQuery 对象的本质是什么？"></a>jQuery 对象的本质是什么？</h2><p>jQuery 对象是 dom 对象的数组 + jQuery 提供的一系列功能函数。</p><h2 id="jQuery-对象和-Dom-对象使用区别"><a href="#jQuery-对象和-Dom-对象使用区别" class="headerlink" title="jQuery 对象和 Dom 对象使用区别"></a>jQuery 对象和 Dom 对象使用区别</h2><p>jQuery 对象不能使用 DOM 对象的属性和方法<br>DOM 对象也不能使用 jQuery 对象的属性和方法</p><h2 id="Dom-对象和-jQuery-对象互转"><a href="#Dom-对象和-jQuery-对象互转" class="headerlink" title="Dom 对象和 jQuery 对象互转"></a>Dom 对象和 jQuery 对象互转</h2><h3 id="dom-对象转化为-jQuery-对象"><a href="#dom-对象转化为-jQuery-对象" class="headerlink" title="dom 对象转化为 jQuery 对象"></a>dom 对象转化为 jQuery 对象</h3><p>将DOM对象传入<code>$()</code>中即可</p><h3 id="jQuery-对象转为-dom-对象"><a href="#jQuery-对象转为-dom-对象" class="headerlink" title="jQuery 对象转为 dom 对象"></a>jQuery 对象转为 dom 对象</h3><p>jQuery 对象[下标]取出相应的 DOM 对象</p><h1 id="jQuery-选择器"><a href="#jQuery-选择器" class="headerlink" title="jQuery 选择器"></a>jQuery 选择器</h1><h2 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h2><ul><li><code>#id属性值</code>：id选择器，根据 id 查找标签对象</li><li><code>.class属性值</code>：类选择器，根据 class 查找标签对象</li><li><code>element标签名</code>：标签选择器，根据标签名查找标签对象</li><li><code>*</code>：星选择器，表示任意的， 所有的元素</li><li><code>selector1, selector2</code>：组合选择器，合并选择器 1， 选择器 2 的结果并返回</li></ul><h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 选择id="lastname" 的元素</span></span><br><span class="line">$(<span class="string">"#lastname"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择class="intro" 的所有元素</span></span><br><span class="line">$(<span class="string">".intro"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//选择所有 &lt;p&gt; 元素</span></span><br><span class="line">$(<span class="string">"p"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择所有 &lt;h1&gt;、&lt;div&gt; 和 &lt;p&gt; 元素</span></span><br><span class="line">$(<span class="string">"h1, div, p"</span>);</span><br></pre></td></tr></tbody></table></figure><h2 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h2><ul><li><code>ancestor descendant</code>：后代选择器，在给定的祖先元素下匹配所有的后代元素</li><li><code>parent &gt; child</code>：子元素选择器，在给定的父元素下匹配所有的子元素</li><li><code>prev + next</code>：邻居元素选择器，匹配所有紧接在 prev 元素后的 next 元素</li><li><code>prev ~ siblings</code>：兄弟元素选择器，匹配 prev 元素之后的所有 siblings 元素</li></ul><h3 id="演示-1"><a href="#演示-1" class="headerlink" title="演示"></a>演示</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 选择&lt;form&gt;中的所有后代&lt;input&gt;元素</span></span><br><span class="line">$(<span class="string">"form input"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//选择&lt;form&gt;中的仅子代&lt;input&gt;元素</span></span><br><span class="line">$(<span class="string">"form &gt; input"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//选择&lt;div&gt;之后的一个同级&lt;span&gt;元素</span></span><br><span class="line">$(<span class="string">"div + span"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//选择&lt;a&gt;之后所有的同级&lt;button&gt;元素</span></span><br><span class="line">$(<span class="string">"a ~ button"</span>);</span><br></pre></td></tr></tbody></table></figure><h2 id="基本过滤选择器"><a href="#基本过滤选择器" class="headerlink" title="基本过滤选择器"></a>基本过滤选择器</h2><ul><li><code>:first</code>：获取第一个元素</li><li><code>:last</code>：获取最后一个元素</li><li><code>:not(selector)</code>：去除所有与给定选择器匹配的元素</li><li><code>:even</code>：匹配所有索引值为偶数的元素， 从 0 开始计数</li><li><code>:odd</code>：匹配所有索引值为奇数的元素， 从 0 开始计数</li><li><code>:eq(index)</code>：匹配一个给定索引值的元素</li><li><code>:gt(index)</code>：匹配所有大于给定索引值的元素</li><li><code>:lt(index)</code>：匹配所有小于给定索引值的元素</li><li><code>:header</code>：匹配如 h1, h2, h3 之类的标题元素</li><li><code>:animated</code>：匹配所有正在执行动画效果的元素</li></ul><h3 id="演示-2"><a href="#演示-2" class="headerlink" title="演示"></a>演示</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//选择第一个&lt;input&gt;元素</span></span><br><span class="line">$(<span class="string">"input:first"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//选择最后一个&lt;a&gt;元素</span></span><br><span class="line">$(<span class="string">"a:last"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//所有不为空的输入元素</span></span><br><span class="line">$(<span class="string">"input:not(:empty)"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//所有偶数 &lt;tr&gt; 元素，索引值从 0 开始，第一个元素是偶数 (0)，第二个元素是奇数 (1)，以此类推。</span></span><br><span class="line">$(<span class="string">"tr:even"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//所有奇数 &lt;tr&gt; 元素，索引值从 0 开始，第一个元素是偶数 (0)，第二个元素是奇数 (1)，以此类推。</span></span><br><span class="line">$(<span class="string">"tr:odd"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//列表中的第四个元素（index 值从 0 开始）</span></span><br><span class="line">$(<span class="string">"ul li:eq(3)"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//列举 index 大于 3 的元素</span></span><br><span class="line">$(<span class="string">"ul li:gt(3)"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//所有标题元素 &lt;h1&gt;, &lt;h2&gt; ...</span></span><br><span class="line">$(<span class="string">":header"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//所有动画元素</span></span><br><span class="line">$(<span class="string">":animated"</span>);</span><br></pre></td></tr></tbody></table></figure><h2 id="内容过滤器"><a href="#内容过滤器" class="headerlink" title="内容过滤器"></a>内容过滤器</h2><ul><li><code>:contains("text")</code>：匹配包含给定文本的元素</li><li><code>:empty</code>：匹配所有不包含子元素或者文本的空元素</li><li><code>:parent</code>：匹配含有子元素或者文本的元素</li><li><code>:has(selector)</code>：匹配含有选择器所匹配的元素的元素</li><li><code>:hidden</code>：匹配所有不可见元素 display:none 或 input type=hidden</li></ul><h3 id="演示-3"><a href="#演示-3" class="headerlink" title="演示"></a>演示</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//所有包含文本 "Hello" 的元素</span></span><br><span class="line">$(<span class="string">":contains('Hello')"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//所有不为空的输入元素</span></span><br><span class="line">$(<span class="string">"input:not(:empty)"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//匹配所有含有子元素或者文本的父元素。</span></span><br><span class="line">$(<span class="string">":parent"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//所有包含有 &lt;p&gt; 元素在其内的 &lt;div&gt; 元素</span></span><br><span class="line">$(<span class="string">"div:has(p)"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//所有隐藏的 &lt;p&gt; 元素</span></span><br><span class="line">$(<span class="string">"p:hidden"</span>);</span><br></pre></td></tr></tbody></table></figure><h2 id="属性过滤器"><a href="#属性过滤器" class="headerlink" title="属性过滤器"></a>属性过滤器</h2><ul><li><code>[attribute]</code>：匹配包含给定属性的元素</li><li><code>[attribute=value]</code>：匹配给定的属性是某个特定值的元素</li><li><code>[attribute!=value]</code>：匹配所有不含有指定的属性， 或者属性不等于特定值的元素</li><li><code>[attribute^=value]</code>：匹配给定的属性是以某些值开始的元素</li><li><code>[attribute$=value]</code>：匹配给定的属性是以某些值结尾的元素</li><li><code>[attribute|=value]</code>：选取每个带有指定属性的元素，该元素的值等于指定字符串（比如 “en”）或以该字符串后跟连接符作为开头的字符串（比如 “en-us”）</li><li><code>[attribute*=value]</code>：匹配给定的属性是以包含某些值的元素</li><li><code>[attrSel1][attrSel2][attrSelN]</code>：复合属性选择器， 需要同时满足多个条件时使用</li></ul><h3 id="演示-4"><a href="#演示-4" class="headerlink" title="演示"></a>演示</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//所有带有 href 属性的元素</span></span><br><span class="line">$(<span class="string">"[href]"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//所有带有 href 属性且值等于 "default.htm" 的元素</span></span><br><span class="line">$(<span class="string">"[href='default.htm']"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//所有带有 href 属性且值不等于 "default.htm" 的元素</span></span><br><span class="line">$(<span class="string">"[href!='default.htm']"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//所有带有 title 属性且值以 "Tom" 开头的元素</span></span><br><span class="line">$(<span class="string">"[title^='Tom']"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//所有带有 href 属性且值以 ".jpg" 结尾的元素</span></span><br><span class="line">$(<span class="string">"[href$='.jpg']"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//所有带有 title 属性且值等于 'Tomorrow' 或者以 'Tomorrow' 后跟连接符作为开头的字符串</span></span><br><span class="line">$(<span class="string">"[title|='Tomorrow']"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//所有带有 title 属性且值包含字符串 "hello" 的元素</span></span><br><span class="line">$(<span class="string">"[title*='hello']"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//带有 id 属性，并且 name 属性以 man 结尾的输入框</span></span><br><span class="line">$( <span class="string">"input[id][name$='man']"</span> );</span><br></pre></td></tr></tbody></table></figure><h2 id="表单过滤器"><a href="#表单过滤器" class="headerlink" title="表单过滤器"></a>表单过滤器</h2><ul><li><code>:input</code>：匹配所有 input, textarea, select 和 button 元素</li><li><code>:text</code>：匹配所有的文本输入框</li><li><code>:password</code>：匹配所有的密码输入框</li><li><code>:radio</code>：匹配所有的单选框</li><li><code>:checkbox</code>：匹配所有的复选框</li><li><code>:submit</code>：匹配所有提交按钮</li><li><code>:image</code>：匹配所有 img 标签</li><li><code>:reset</code>：匹配所有重置按钮</li><li><code>:button</code>：匹配所有 input type=button 按钮</li><li><code>:file</code>：匹配所有 input type=file 文件上传框</li></ul><h3 id="演示-5"><a href="#演示-5" class="headerlink" title="演示"></a>演示</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//所有 input 元素</span></span><br><span class="line">$(<span class="string">":input"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//所有带有 type="text" 的 input 元素</span></span><br><span class="line">$(<span class="string">":text"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//所有带有 type="password" 的 input 元素</span></span><br><span class="line">$(<span class="string">":password"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//所有带有 type="radio" 的 input 元素</span></span><br><span class="line">$(<span class="string">":radio"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//所有带有 type="checkbox" 的 input 元素</span></span><br><span class="line">$(<span class="string">":checkbox"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//所有带有 type="submit" 的 input 元素</span></span><br><span class="line">$(<span class="string">":submit"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//所有带有 type="image" 的 input 元素</span></span><br><span class="line">$(<span class="string">":image"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//所有带有 type="reset" 的 input 元素</span></span><br><span class="line">$(<span class="string">":reset"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//所有带有 type="button" 的 input 元素</span></span><br><span class="line">$(<span class="string">":button"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//所有带有 type="file" 的 inpu</span></span><br><span class="line">$(<span class="string">":file"</span>);</span><br></pre></td></tr></tbody></table></figure><h2 id="表单对象属性过滤器"><a href="#表单对象属性过滤器" class="headerlink" title="表单对象属性过滤器"></a>表单对象属性过滤器</h2><ul><li><code>:enabled</code>：匹配所有可用元素</li><li><code>:disabled</code>：匹配所有不可用元素</li><li><code>:checked</code>：匹配所有选中的单选， 复选， 和下拉列表中选中的 option 标签对象</li><li><code>:selected</code>：匹配所有选中的 option</li></ul><h3 id="演示-6"><a href="#演示-6" class="headerlink" title="演示"></a>演示</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//所有启用的元素</span></span><br><span class="line">$(<span class="string">":enabled"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//所有禁用的元素</span></span><br><span class="line">$(<span class="string">":disabled"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//所有选中的复选框选项</span></span><br><span class="line">$(<span class="string">":checked"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//所有选定的下拉列表元素</span></span><br><span class="line">$(<span class="string">":selected"</span>);</span><br></pre></td></tr></tbody></table></figure><h1 id="JQuery元素筛选"><a href="#JQuery元素筛选" class="headerlink" title="JQuery元素筛选"></a>JQuery元素筛选</h1><ul><li><code>eq(index)</code>：获取给定索引的元素（功能与<code>:eq(index)</code>一致）</li><li><code>first()</code>：获取第一个元素（功能与<code>:first</code>一致）</li><li><code>last()</code>：获取最后一个元素（功能与<code>:last</code>一致）</li><li><code>filter(exp)</code>：留下匹配的元素</li><li><code>is(exp)</code>：判断是否匹配给定的选择器， 只要有一个匹配就返回， true</li><li><code>has(exp)</code>：返回包含有匹配选择器的元素的元素（功能与<code>:has(selector)</code>一致</li><li><code>not(exp)</code>：删除匹配选择器的元素（功能与<code>:not(selector)</code>一致）</li><li><code>children(exp)</code>：返回匹配给定选择器的子元素（功能与<code>:parent &gt; child</code>一致）</li><li><code>find(exp)</code>：返回匹配给定选择器的后代元素（功能与<code>ancestor descendant</code>一致）</li><li><code>next()</code>：返回当前元素的下一个兄弟元素（功能与<code>prev + next</code>一致）</li><li><code>nextAll()</code>：返回当前元素后面所有的兄弟元素（功能与<code>prev ~ siblings</code>一致）</li><li><code>nextUntil()</code>：返回当前元素到指定匹配的元素为止的后面元素</li><li><code>parent()</code>：返回父元素</li><li><code>prev(exp)</code>：返回当前元素的上一个兄弟元素</li><li><code>prevAll()</code>：返回当前元素前面所有的兄弟元素</li><li><code>prevUnit(exp)</code>：返回当前元素到指定匹配的元素为止的前面元素</li><li><code>siblings(exp)</code>：返回所有兄弟元素</li><li><code>add()</code>：把 add 匹配的选择器的元素添加到当前 jquery 对象中</li></ul><h1 id="JQuery的属性操作"><a href="#JQuery的属性操作" class="headerlink" title="JQuery的属性操作"></a>JQuery的属性操作</h1><ul><li><code>html()</code>：它可以设置和获取起始标签和结束标签中的内容</li><li><code>text()</code>：它可以设置和获取起始标签和结束标签中的文本</li><li><code>val()</code>：它可以设置和获取表单项的 value 属性值，还可以操作单选、复选、下拉列表的勾选</li><li><code>attr()</code>：可以设置和获取属性的值，还可以添加自定义的属性、属性值（但不推荐操作 checked、 readOnly、 selected、 disabled 等等）</li><li><code>prop()</code>：可以设置和获取属性的值（只推荐操作 checked、 readOnly、 selected、 disabled 等等）</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取id='one'的&lt;div&gt;元素中的html内容</span></span><br><span class="line">$(<span class="string">"div[id='one']"</span>).html();</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置id='one'的&lt;div&gt;元素中的html内容</span></span><br><span class="line">$(<span class="string">"div[id='one']"</span>).html(<span class="string">"&lt;span&gt;我是王多鱼&lt;/span&gt;"</span>);<span class="comment">//页面效果为：我是王多鱼</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取id='two'的&lt;div&gt;元素中的text内容</span></span><br><span class="line">$(<span class="string">"div[id='two']"</span>).text();</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置id='two'的&lt;div&gt;元素中的text内容</span></span><br><span class="line">$(<span class="string">"div[id='two']"</span>).text(<span class="string">"&lt;span&gt;我是王多鱼&lt;/span&gt;"</span>);<span class="comment">//页面效果为：&lt;span&gt;我是王多鱼&lt;/span&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取id='three'且type='text'的&lt;input&gt;的value值</span></span><br><span class="line">$(<span class="string">":text[id='three']"</span>).val();</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置id='three'且type='text'的&lt;input&gt;的value值</span></span><br><span class="line">$(<span class="string">":text[id='three']"</span>).val(<span class="string">"HelloWorld"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//操作单选、复选、下拉列表的勾选</span></span><br><span class="line">$(<span class="string">".radio,.checkbox,#single,#multiple"</span>).val([<span class="string">"man"</span>,<span class="string">"game"</span>,<span class="string">"Japanese"</span>,<span class="string">"male"</span>,<span class="string">"female"</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取第一个复选框的name属性值</span></span><br><span class="line">$(<span class="string">":checkbox:first"</span>).attr(<span class="string">"name"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置最后一个复选框的name属性值</span></span><br><span class="line">$(<span class="string">":checkbox:last"</span>).attr(<span class="string">"name"</span>,<span class="string">"hobbies"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//为第一个复选框添加自定义的love='never'属性值</span></span><br><span class="line">$(<span class="string">":checkbox:first"</span>).attr(<span class="string">"love"</span>,<span class="string">"never"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取索引为0的单选框的选中状态</span></span><br><span class="line">$(<span class="string">":radio:eq(0)"</span>).prop(<span class="string">"checked"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置索引为1的单选框的选中状态</span></span><br><span class="line">$(<span class="string">":radio:eq(1)"</span>).prop(<span class="string">"checkbox"</span>,<span class="string">"true"</span>);</span><br></pre></td></tr></tbody></table></figure><h1 id="案例-JQuery全选-全不选（待复习）"><a href="#案例-JQuery全选-全不选（待复习）" class="headerlink" title="案例-JQuery全选/全不选（待复习）"></a>案例-JQuery全选/全不选（待复习）</h1><h2 id="案例要求"><a href="#案例要求" class="headerlink" title="案例要求"></a>案例要求</h2><p>要求实现<code>全选/全不选</code>、<code>全选</code>、<code>全不选</code>、<code>反选</code>、<code>提交</code>按钮的功能。</p><h2 id="案例实现"><a href="#案例实现" class="headerlink" title="案例实现"></a>案例实现</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Exercise<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery-3.5.1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">            <span class="comment">//给全选按钮绑定单击事件</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#checkAllBtn"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">                $(<span class="string">":checkbox"</span>).prop(<span class="string">"checked"</span>, <span class="literal">true</span>);</span></span><br><span class="line">            });</span><br><span class="line"><span class="javascript">            <span class="comment">//给全不选按钮绑定单击事件</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#checkNotAllBtn"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">                $(<span class="string">":checkbox"</span>).prop(<span class="string">"checked"</span>, <span class="literal">false</span>);</span></span><br><span class="line">            });</span><br><span class="line"><span class="javascript">            <span class="comment">//给反选绑定按钮单击事件</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#invert"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">                <span class="comment">//遍历每个name='sport'复选框的勾选状态</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">":checkbox[name='sport']"</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//进行反选</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.checked = !<span class="built_in">this</span>.checked;</span></span><br><span class="line">                });</span><br><span class="line"><span class="javascript">                <span class="comment">//全部name='sport'复选框的个数</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> $allNum = $(<span class="string">":checkbox[name='sport']"</span>).length;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//已经勾选的name='sport'复选框个数</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> $checkedNum = $(<span class="string">":checkbox[name='sport']:checked"</span>).length;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//判断全选/全不选按钮选取状态</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">"#checkAllBox"</span>).prop(<span class="string">"checked"</span>, $allNum === $checkedNum);</span></span><br><span class="line">            });</span><br><span class="line"><span class="javascript">            <span class="comment">//给提交按钮绑定单击事件</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#submit"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">                <span class="comment">//创建储存已选中按钮value值的数组</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> checkedValue = [];</span></span><br><span class="line"><span class="javascript">                <span class="comment">//遍历name='sport'的已选中复选框</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">":checkbox[name='sport']:checked"</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//获取value值，并放入数组</span></span></span><br><span class="line"><span class="javascript">                    checkedValue.push(<span class="built_in">this</span>.value);</span></span><br><span class="line">                });</span><br><span class="line"><span class="javascript">                <span class="comment">//弹出value值数组</span></span></span><br><span class="line">                alert(checkedValue);</span><br><span class="line">            });</span><br><span class="line"><span class="javascript">            <span class="comment">//给全选/全不选按钮绑定单击事件</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#checkAllBox"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">                <span class="comment">//通过全选/全不选按钮的选中状态给所有name='sport'的复选框选中状态赋值</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">":checkbox[name='sport']"</span>).prop(<span class="string">"checked"</span>,<span class="built_in">this</span>.checked);</span></span><br><span class="line">            });</span><br><span class="line"><span class="javascript">            <span class="comment">//手动全选name='sport'复选框，全选/全不选复选框也要自动选中</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">":checkbox[name='sport']"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span></span><br><span class="line"><span class="javascript">                <span class="comment">//获取全部name='sport'复选框数量</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> $allSport = $(<span class="string">":checkbox[name='sport']"</span>).length;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//获取全部已选中的name='sport'复选框数量</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> $allChecked = $(<span class="string">":checkbox[name='sport']:checked"</span>).length;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//判断全选/全不选checked状态</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">"#checkAllBox"</span>).prop(<span class="string">"checked"</span>,$allSport === $allChecked);</span></span><br><span class="line">            });</span><br><span class="line">        });</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>What's your favorite sport?<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"checkAllBox"</span>/&gt;</span>全选/全不选</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"sport"</span> <span class="attr">value</span>=<span class="string">"football"</span>/&gt;</span>football</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"sport"</span> <span class="attr">value</span>=<span class="string">"basketball"</span>/&gt;</span>basketball</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"sport"</span> <span class="attr">value</span>=<span class="string">"badminton"</span>/&gt;</span>badminton</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"sport"</span> <span class="attr">value</span>=<span class="string">"tableTennis"</span>/&gt;</span>tableTennis</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"checkAllBtn"</span> <span class="attr">value</span>=<span class="string">"全选"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"checkNotAllBtn"</span> <span class="attr">value</span>=<span class="string">"全不选"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"invert"</span> <span class="attr">value</span>=<span class="string">"反选"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h1 id="DOM对象的增删改"><a href="#DOM对象的增删改" class="headerlink" title="DOM对象的增删改"></a>DOM对象的增删改</h1><h2 id="内部插入"><a href="#内部插入" class="headerlink" title="内部插入"></a>内部插入</h2><ul><li><code>appendTo()</code>：例如<code>a.prependTo(b)</code>，把 a 插入到 b 子元素末尾， 成为最后一个子元素</li><li><code>prependTo()</code>：例如<code>a.prependTo(b)</code>，把 a 插到 b 所有子元素前面， 成为第一个子元素</li></ul><h2 id="外部插入"><a href="#外部插入" class="headerlink" title="外部插入"></a>外部插入</h2><ul><li><code>insertAfter()</code>：例如<code>a.insertAfter(b)</code>，把 a 插到 b 后面， 成为同级一元素</li><li><code>insertBefore()</code>：例如<code>a.insertBefore(b)</code>，把 a 插到 b 前面， 成为同级一元素</li></ul><h2 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h2><ul><li><code>replaceWith()</code>：例如<code>a.replaceWith(b)</code>，用b替换掉所有a</li><li><code>replaceAll()</code>：例如<code>a.replaceAll(b)</code>，用a替换掉所有b</li></ul><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><ul><li><code>remove()</code>：例如<code>a.remove()</code>，删除a标签</li><li><code>empty()</code>：例如<code>a.empty()</code>，清空a标签里的内容</li></ul><h2 id="演示-7"><a href="#演示-7" class="headerlink" title="演示"></a>演示</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>DOM对象增删改<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery-3.5.1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span></span><br><span class="line"><span class="javascript">            <span class="comment">//创建一个DOM对象，并添加class='one'的div中的最后面</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">"&lt;p&gt;原来我也是一个Joker&lt;/p&gt;"</span>).appendTo($(<span class="string">"div[class='one']"</span>));</span></span><br><span class="line"><span class="javascript">            <span class="comment">//创建一个DOM对象，并添加class='one'的div中的最前面</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">"&lt;a&gt;www.pornhub.com&lt;/a&gt;&lt;br/&gt;"</span>).prependTo($(<span class="string">"div[class='one']"</span>));</span></span><br><span class="line"><span class="javascript">            <span class="comment">//创建一个DOM对象，并添加class='one'的div外的最前面</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">"&lt;img src=\"\" alt=\"骗你的，其实没有图片\"/&gt;"</span>).insertBefore($(<span class="string">"div[class='one']"</span>));</span></span><br><span class="line"><span class="javascript">            <span class="comment">//创建一个DOM对象，并添加class='one'的div外的最后面</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">"&lt;ol&gt;什么情况啊！你！&lt;/ol&gt;"</span>).insertAfter($(<span class="string">"div[class='one']"</span>));</span></span><br><span class="line"><span class="javascript">            <span class="comment">//前替换所有后</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">"    &lt;form&gt;\n"</span> +</span></span><br><span class="line"><span class="handlebars"><span class="xml">                "        <span class="tag">&lt;<span class="name">span</span>&gt;</span>装逼犯姓名：<span class="tag">&lt;/<span class="name">span</span>&gt;</span>\n" +</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                "        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">\</span>"<span class="attr">text</span>\"/&gt;</span>\n" +</span></span></span><br><span class="line"><span class="javascript">                <span class="string">"    &lt;/form&gt;"</span>).replaceAll($(<span class="string">"div[class='two']"</span>));</span></span><br><span class="line"><span class="javascript">            <span class="comment">//后替换所有前</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">"div[class='three']"</span>).replaceWith(<span class="string">"&lt;p&gt;别叫了，行不行啊！&lt;/p&gt;"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="comment">//删除指定DOM对象</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">"div[class='four']:first"</span>).remove();</span></span><br><span class="line"><span class="javascript">            <span class="comment">//清楚指定DOM对象中的内容</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">"div[class='four']:first"</span>).empty();</span></span><br><span class="line">        });</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>严老板都已经拉了夸，你是真小丑！<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"two"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>不是，我都不知道，你在装什么？<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"two"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>你就是一个因溜狗！<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"three"</span>&gt;</span></span><br><span class="line">        都太经典了，你知道不？</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"three"</span>&gt;</span></span><br><span class="line">        龙哥的S6第一个王者，韩晶亮你懂不懂啊！</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"four"</span>&gt;</span></span><br><span class="line">        上路被三人越塔！打野都不在，我为什么要去啊！</span><br><span class="line">        不是，不是抬杠！你来告诉我，打野都不在，我为什么要去！</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"four"</span>&gt;</span></span><br><span class="line">        来，这个叫尊尼获加的臭JB钢筋！我给你房管来，来你给我说话！</span><br><span class="line">        你说不明白，明天你妈出门被车撞死！</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h1 id="案例-从左到右，从右到左（待复习）"><a href="#案例-从左到右，从右到左（待复习）" class="headerlink" title="案例-从左到右，从右到左（待复习）"></a>案例-从左到右，从右到左（待复习）</h1><h2 id="案例要求-1"><a href="#案例要求-1" class="headerlink" title="案例要求"></a>案例要求</h2><p>做出两个下拉列表，再做出四个按钮。按钮的功能分别为：<code>添加选中项到右边</code>、<code>添加全部项到右边</code>、<code>添加选中项到左边</code>、<code>添加全部项到左边</code>。</p><h2 id="案例实现-1"><a href="#案例实现-1" class="headerlink" title="案例实现"></a>案例实现</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>从左到右，从右到左<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery-3.5.1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        select {</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 140px;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        div {</span><br><span class="line">            width: 130px;</span><br><span class="line">            float: left;</span><br><span class="line">            text-align: center;</span><br><span class="line">        }</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">            <span class="comment">//实现"添加选中项到右边"按钮功能</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">"button:eq(0)"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">                $(<span class="string">"select:eq(0) &gt; option:selected"</span>).appendTo($(<span class="string">"select:eq(1)"</span>));</span></span><br><span class="line">            });</span><br><span class="line"><span class="javascript">            <span class="comment">//实现"添加全部项到右边"按钮功能</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">"button:eq(1)"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">                $(<span class="string">"select:eq(0) &gt; option"</span>).appendTo($(<span class="string">"select:eq(1)"</span>));</span></span><br><span class="line">            });</span><br><span class="line"><span class="javascript">            <span class="comment">//实现"添加选中项到左边"按钮功能</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">"button:eq(2)"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">                $(<span class="string">"select:eq(1) &gt; option:selected"</span>).appendTo($(<span class="string">"select:eq(0)"</span>));</span></span><br><span class="line">            });</span><br><span class="line"><span class="javascript">            <span class="comment">//实现"添加全部项到左边"按钮功能</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">"button:eq(3)"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">                $(<span class="string">"select:eq(1) &gt; option"</span>).appendTo($(<span class="string">"select:eq(0)"</span>));</span></span><br><span class="line">            });</span><br><span class="line">        });</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">multiple</span>=<span class="string">"multiple"</span> <span class="attr">name</span>=<span class="string">"sel01"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"one"</span>&gt;</span>one<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"two"</span>&gt;</span>two<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"three"</span>&gt;</span>three<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"four"</span>&gt;</span>four<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"five"</span>&gt;</span>five<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"six"</span>&gt;</span>six<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"seven"</span>&gt;</span>seven<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"eight"</span>&gt;</span>eight<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>添加选中项到右边<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>添加全部项到右边<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">multiple</span>=<span class="string">"multiple"</span> <span class="attr">name</span>=<span class="string">"sel02"</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>添加选中项到左边<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>添加全部项到左边<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h1 id="案例-表格的动态添加、删除（待复习）"><a href="#案例-表格的动态添加、删除（待复习）" class="headerlink" title="案例-表格的动态添加、删除（待复习）"></a>案例-表格的动态添加、删除（待复习）</h1><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>动态添加、删除表格记录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#employeeTable</span> {</span></span><br><span class="line">            border-spacing: 1px;</span><br><span class="line">            background-color: black;</span><br><span class="line">            margin: 80px auto 10px auto;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        th, td {</span><br><span class="line">            background-color: white;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#formDiv</span> {</span></span><br><span class="line">            width: 250px;</span><br><span class="line">            border-style: solid;</span><br><span class="line">            border-width: 1px;</span><br><span class="line">            margin: 50px auto 10px auto;</span><br><span class="line">            padding: 10px;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#formDiv</span> <span class="selector-tag">input</span> {</span></span><br><span class="line">            width: 100%;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.word</span> {</span></span><br><span class="line">            width: 40px;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.inp</span> {</span></span><br><span class="line">            width: 200px;</span><br><span class="line">        }</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery-3.5.1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">            <span class="comment">//Delete函数</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> deleteFun = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">                <span class="comment">//获取被删除表格行对象</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> $trObj = $(<span class="built_in">this</span>).parent().parent();</span></span><br><span class="line"><span class="javascript">                <span class="comment">//获取被删除表格行name</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> name = $trObj.find(<span class="string">"td:first"</span>).text();</span></span><br><span class="line"><span class="javascript">                <span class="comment">//用户确认删除</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (confirm(<span class="string">"确定删除["</span> + name + <span class="string">"]用户？"</span>)) {</span></span><br><span class="line">                    $trObj.remove();</span><br><span class="line">                }</span><br><span class="line"><span class="javascript">                <span class="comment">//阻止a标签的默认跳转</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">            };</span><br><span class="line"><span class="javascript">            <span class="comment">//实现提交按钮功能</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#addEmpButton"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">                <span class="comment">//获取输入框中 姓名、邮箱、工资的内容</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> name = $(<span class="string">":text[name='empName']"</span>).val();</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> email = $(<span class="string">":text[name='email']"</span>).val();</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> salary = $(<span class="string">":text[name='salary']"</span>).val();</span></span><br><span class="line"><span class="javascript">                <span class="comment">//创建一个新的表格行，将数据添加进去</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> $newTrObj = $(<span class="string">"    &lt;tr&gt;"</span> +</span></span><br><span class="line"><span class="javascript">                    <span class="string">"        &lt;td&gt;"</span>+name+<span class="string">"&lt;/td&gt;"</span> +</span></span><br><span class="line"><span class="javascript">                    <span class="string">"        &lt;td&gt;"</span>+email+<span class="string">"&lt;/td&gt;"</span> +</span></span><br><span class="line"><span class="javascript">                    <span class="string">"        &lt;td&gt;"</span>+salary+<span class="string">"&lt;/td&gt;"</span> +</span></span><br><span class="line"><span class="handlebars"><span class="xml">                    "        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">\</span>"<span class="attr">deleteEmp</span>?<span class="attr">id</span>=<span class="string">new\</span>"&gt;</span>Delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span>" +</span></span></span><br><span class="line"><span class="javascript">                    <span class="string">"    &lt;/tr&gt;"</span>);</span></span><br><span class="line"><span class="javascript">                <span class="comment">//将新的表格行添加进员工表格中</span></span></span><br><span class="line"><span class="javascript">                $newTrObj.appendTo($(<span class="string">"#employeeTable"</span>));</span></span><br><span class="line"><span class="javascript">                <span class="comment">//与新添加的表格行绑定Delete事件</span></span></span><br><span class="line"><span class="javascript">                $newTrObj.find(<span class="string">"a"</span>).click(deleteFun);</span></span><br><span class="line">            });</span><br><span class="line"><span class="javascript">            <span class="comment">//实现Delete&lt;a&gt;标签功能</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">"a"</span>).click(deleteFun);</span></span><br><span class="line">        });</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">"employeeTable"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Salary<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Delete<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Jason<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>your_email@example.com<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>5000<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"deleteEmp?id=001"</span>&gt;</span>Delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Bob<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>your_email@example.com<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>6000<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"deleteEmp?id=002"</span>&gt;</span>Delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Bernardo<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>your_email@example.com<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>7000<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"deleteEmp?id=003"</span>&gt;</span>Delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"formDiv"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>添加新员工<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"word"</span>&gt;</span>name<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"inp"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"empName"</span> <span class="attr">id</span>=<span class="string">"empName"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"word"</span>&gt;</span>email<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"inp"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">id</span>=<span class="string">"email"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"word"</span>&gt;</span>salary<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"inp"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"salary"</span> <span class="attr">id</span>=<span class="string">"salary"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"addEmpButton"</span> <span class="attr">value</span>=<span class="string">"abc"</span>&gt;</span></span><br><span class="line">                    Submit</span><br><span class="line">                <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h1 id="JQuery操作CSS样式"><a href="#JQuery操作CSS样式" class="headerlink" title="JQuery操作CSS样式"></a>JQuery操作CSS样式</h1><ul><li><p><code>addClass()</code>：添加样式</p></li><li><p><code>removeClass()</code>：删除样式</p></li><li><p><code>toggleClass()</code>：样式存在即删除，不存在即添加</p></li><li><p><code>offset()</code>：获取和设置元素的坐标位置</p><ul><li>属性：top 和 left，分别为到dom顶的距离、和到dom左的距离。</li></ul><blockquote><p>在设置<code>offset()</code>时，必须传入键值对数据。如<code>offset({left:100,top:100})</code></p></blockquote></li></ul><h2 id="演示（待复习）"><a href="#演示（待复习）" class="headerlink" title="演示（待复习）"></a>演示（待复习）</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Css样式操作<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div {</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 260px;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-class">.yellowBorder</span> {</span></span><br><span class="line">            border: 2px yellow solid;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-class">.redDiv</span> {</span></span><br><span class="line">            background-color: red;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-class">.blueBorder</span> {</span></span><br><span class="line">            border: 5px blue solid;</span><br><span class="line">        }</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery-3.5.1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">            <span class="comment">//实现addClass()按钮功能</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">":button[value='addClass()']"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">                $(<span class="string">"div.border"</span>).addClass(<span class="string">"redDiv yellowBorder"</span>);</span></span><br><span class="line">            });</span><br><span class="line"><span class="javascript">            <span class="comment">//实现removeClass()按钮功能</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">":button[value='removeClass()']"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">                $(<span class="string">"div.border"</span>).removeClass(<span class="string">"redDiv"</span>);</span></span><br><span class="line">            });</span><br><span class="line"><span class="javascript">            <span class="comment">//实现toggleClass()按钮功能</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">":button[value='toggleClass()']"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">                $(<span class="string">"div.border"</span>).toggleClass(<span class="string">"blueBorder"</span>);</span></span><br><span class="line">            });</span><br><span class="line"><span class="javascript">            <span class="comment">//实现offset()按钮的获取功能</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">":button[value='offset()01']"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> leftNum = $(<span class="string">"div.border"</span>).offset().left;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> topNum = $(<span class="string">"div.border"</span>).offset().top;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">"left: "</span>+leftNum+<span class="string">"    top: "</span>+topNum);</span></span><br><span class="line">            });</span><br><span class="line"><span class="javascript">            <span class="comment">//实现offset()按钮的设置功能</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#btn05"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> $offset = $(<span class="string">"div.border"</span>).offset({</span></span><br><span class="line">                    top: 100,</span><br><span class="line">                    left: 100</span><br><span class="line">                });</span><br><span class="line">            });</span><br><span class="line">        });</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--空白元素，以便测试css样式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"addClass()"</span> <span class="attr">id</span>=<span class="string">"btn01"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"removeClass()"</span> <span class="attr">id</span>=<span class="string">"btn02"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"toggleClass()"</span> <span class="attr">id</span>=<span class="string">"btn03"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"offset()01"</span> <span class="attr">id</span>=<span class="string">"btn04"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"offset()02"</span> <span class="attr">id</span>=<span class="string">"btn05"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h1 id="JQuery操作动画"><a href="#JQuery操作动画" class="headerlink" title="JQuery操作动画"></a>JQuery操作动画</h1><h2 id="基本动画"><a href="#基本动画" class="headerlink" title="基本动画"></a>基本动画</h2><ul><li><code>show()</code>：将隐藏的元素显示</li><li><code>hide()</code>：将可见的元素隐藏</li><li><code>toggle()</code>：可见则隐藏，不可见则显示=</li></ul><h2 id="淡入淡出动画"><a href="#淡入淡出动画" class="headerlink" title="淡入淡出动画"></a>淡入淡出动画</h2><ul><li><code>fadeIn()</code>：淡入（慢慢可见）</li><li><code>fadeOut()</code>：淡出（慢慢消失）</li><li><code>fadeTo()</code>：在指定时长内慢慢的将透明度修改到指定的值。 0 透明， 1 完成可见， 0.5 半透明（此方法较为特殊，第二个参数为透明度，第三个方法才为回调函数）</li><li><code>fadeToggle()</code>：淡入则切换为淡出，淡出则切换为淡入</li></ul><blockquote><p>上述所有方法都可以添加两个参数：</p><ol><li>参数一，动画执行的时长</li><li>参数二，动画的回调函数</li></ol></blockquote><h2 id="演示（待复习）-1"><a href="#演示（待复习）-1" class="headerlink" title="演示（待复习）"></a>演示（待复习）</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JQuery操作动画<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        table, td {</span><br><span class="line">            border: 1px solid;</span><br><span class="line">            border-collapse: collapse;;</span><br><span class="line">        }</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery-3.5.1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">            <span class="comment">//显示show()</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#btn1"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">                $(<span class="string">"#div1"</span>).show(<span class="number">2000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">"show()动画完成了"</span>);</span></span><br><span class="line">                });</span><br><span class="line">            });</span><br><span class="line"><span class="javascript">            <span class="comment">//隐藏hide()</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#btn2"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">                $(<span class="string">"#div1"</span>).hide(<span class="number">2000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">"hide动画执行完成了"</span>);</span></span><br><span class="line">                });</span><br><span class="line">            });</span><br><span class="line"><span class="javascript">            <span class="comment">//切换toggle()</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#btn3"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">                $(<span class="string">"#div1"</span>).toggle(<span class="number">1000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">"toggle动画完成"</span>);</span></span><br><span class="line">                });</span><br><span class="line">            });</span><br><span class="line"><span class="javascript">            <span class="comment">//自动动画效果</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> $autoToggle = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">                $(<span class="string">"#div1"</span>).toggle(<span class="number">1000</span>, $autoToggle);</span></span><br><span class="line">            };</span><br><span class="line"><span class="javascript">            <span class="comment">//取消注释，开启自动动画效果</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//$autoToggle();</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">//淡出fadeOut()</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#btn4"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">                $(<span class="string">"#div1"</span>).fadeOut(<span class="number">2000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">"fadeOut动画完成"</span>);</span></span><br><span class="line">                });</span><br><span class="line">            });</span><br><span class="line"><span class="javascript">            <span class="comment">//淡入fadeIn()</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#btn5"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">                $(<span class="string">"#div1"</span>).fadeIn(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">"fadeIn动画完成"</span>);</span></span><br><span class="line">                });</span><br><span class="line">            });</span><br><span class="line"><span class="javascript">            <span class="comment">//fadeTo()</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#btn6"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">                $(<span class="string">"#div1"</span>).fadeTo(<span class="number">2000</span>, <span class="number">0.5</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">"fadeTo动画完成"</span>);</span></span><br><span class="line">                })</span><br><span class="line">            });</span><br><span class="line"><span class="javascript">            <span class="comment">//fadeToggle()</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#btn7"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">                $(<span class="string">"#div1"</span>).fadeToggle(<span class="number">2000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">"fadeToggle动画完成"</span>);</span></span><br><span class="line">                });</span><br><span class="line">            });</span><br><span class="line">        });</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"float: left"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn1"</span>&gt;</span>显示show()<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn2"</span>&gt;</span>隐藏hide()<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn3"</span>&gt;</span>显示/隐藏切换toggle()<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn4"</span>&gt;</span>淡出fadeOut()<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn5"</span>&gt;</span>淡入fadeIn()<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn6"</span>&gt;</span>淡化到fadeTo()<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn7"</span>&gt;</span>淡化切换fadeToggle()<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span> <span class="attr">style</span>=<span class="string">"float:left;border: 1px solid;background-color: blue;width: 300px;height: 200px;"</span>&gt;</span></span><br><span class="line">    jquery动画定义了很多种动画效果，可以很方便的使用这些动画效果</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h1 id="案例-CSS动画之品牌展示"><a href="#案例-CSS动画之品牌展示" class="headerlink" title="案例-CSS动画之品牌展示"></a>案例-CSS动画之品牌展示</h1><h2 id="案例要求-2"><a href="#案例要求-2" class="headerlink" title="案例要求"></a>案例要求</h2><ol><li>点击按钮的时候， 隐藏和显示卡西欧之后的品牌。</li><li>当显示全部内容的时候， 按钮文本为“显示精简品牌”。然后小三角形向上， 所有品牌产品为默认颜色。</li><li>当只显示精简品牌的时候， 要隐藏卡西欧之后的品牌， 按钮文本为“显示全部品牌”。然后小三形向下，并且把 佳能，尼康的品牌颜色改为红色（给 li 标签添加 promoted 样式即可）</li></ol><h2 id="案例实现（待复习）"><a href="#案例实现（待复习）" class="headerlink" title="案例实现（待复习）"></a>案例实现（待复习）</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS动画之商品展示练习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * {</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        body {</span><br><span class="line">            font-size: 12px;</span><br><span class="line">            text-align: center;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        a {</span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#0044DD</span>;</span></span><br><span class="line">            text-decoration: none;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> {</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#FF5500</span>;</span></span><br><span class="line">            text-decoration: underline;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.SubCategoryBox</span> {</span></span><br><span class="line">            width: 600px;</span><br><span class="line">            margin: 0 auto;</span><br><span class="line">            text-align: center;</span><br><span class="line">            margin-top: 40px;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.SubCategoryBox</span> <span class="selector-tag">ul</span> {</span></span><br><span class="line">            list-style: none;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.SubCategoryBox</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> {</span></span><br><span class="line">            display: block;</span><br><span class="line">            float: left;</span><br><span class="line">            width: 200px;</span><br><span class="line">            line-height: 20px;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.showMore</span>, <span class="selector-class">.showLess</span> {</span></span><br><span class="line">            clear: both;</span><br><span class="line">            text-align: center;</span><br><span class="line">            paddin-top: 10px;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.showMore</span> <span class="selector-tag">a</span>, <span class="selector-class">.showLess</span> <span class="selector-tag">a</span> {</span></span><br><span class="line">            display: block;</span><br><span class="line">            width: 120px;</span><br><span class="line">            margin: 0 auto;</span><br><span class="line">            line-height: 24px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#AAAAAA</span>;</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.showMore</span> <span class="selector-tag">a</span> <span class="selector-tag">span</span> {</span></span><br><span class="line">            padding-left: 15px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-tag">url</span>("<span class="selector-tag">img</span>/<span class="selector-tag">down</span><span class="selector-class">.gif</span>") <span class="selector-tag">no-repeat</span> 0 0;</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.showLess</span> <span class="selector-tag">a</span> <span class="selector-tag">span</span> {</span></span><br><span class="line">            padding-left: 15px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-tag">url</span>("<span class="selector-tag">img</span>/<span class="selector-tag">up</span><span class="selector-class">.gif</span>") <span class="selector-tag">no-repeat</span> 0 0;</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.promoted</span> <span class="selector-tag">a</span> {</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#FF5500</span>;</span></span><br><span class="line">        }</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery-3.5.1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">            <span class="comment">//页面初始状态</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">"li:gt(4):not(:last)"</span>).hide();</span></span><br><span class="line"><span class="javascript">            <span class="comment">//实现展示/收起按钮功能</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">"a:last"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">                <span class="comment">//让下面的品牌显示或隐藏</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">"li:gt(4):not(:last)"</span>).toggle();</span></span><br><span class="line"><span class="javascript">                <span class="comment">//判断下面的品牌是显示还是隐藏</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> ($(<span class="string">"li:gt(4):not(:last)"</span>).is(<span class="string">":hidden"</span>)) {</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//若下面的品牌是隐藏的，则text为'显示全部品牌'，图标为向下</span></span></span><br><span class="line"><span class="javascript">                    $(<span class="string">"div div a span"</span>).text(<span class="string">"显示全部品牌"</span>);</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">"div div"</span>).removeClass();</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">"div div"</span>).addClass(<span class="string">"showMore"</span>)</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//除去广告高亮</span></span></span><br><span class="line"><span class="javascript">                    $(<span class="string">"li:contains('佳能')"</span>).removeClass(<span class="string">"promoted"</span>);</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">"li:contains('索尼')"</span>).removeClass(<span class="string">"promoted"</span>);</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">"li:contains('三星')"</span>).removeClass(<span class="string">"promoted"</span>);</span></span><br><span class="line"><span class="javascript">                } <span class="keyword">else</span> {</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//若下面的品牌是显示的，则text为'显示精简品牌'，图标为向上</span></span></span><br><span class="line"><span class="javascript">                    $(<span class="string">"div div a span"</span>).text(<span class="string">"显示精简品牌"</span>);</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">"div div"</span>).removeClass();</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">"div div"</span>).addClass(<span class="string">"showLess"</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//添加广告高亮</span></span></span><br><span class="line"><span class="javascript">                    $(<span class="string">"li:contains('佳能')"</span>).addClass(<span class="string">"promoted"</span>);</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">"li:contains('索尼')"</span>).addClass(<span class="string">"promoted"</span>);</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">"li:contains('三星')"</span>).addClass(<span class="string">"promoted"</span>);</span></span><br><span class="line">                }</span><br><span class="line"><span class="javascript">                <span class="comment">//取消&lt;a&gt;标签自动跳转</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">            });</span><br><span class="line">        });</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"SubCategoryBox"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>佳能<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span>&gt;</span>(30440)<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>索尼<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span>&gt;</span>(20001)<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>三星<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span>&gt;</span>(19028)<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>尼康<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span>&gt;</span>(17821)<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>松下<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span>&gt;</span>(12289)<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>卡西欧<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span>&gt;</span>(8242)<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>富士<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span>&gt;</span>(14894)<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>柯达<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span>&gt;</span>(9520)<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>宾得<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span>&gt;</span>(2195)<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>理光<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span>&gt;</span>(4114)<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>奥林巴斯<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span>&gt;</span>(12205)<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>明基<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span>&gt;</span>(1466)<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>爱国者<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span>&gt;</span>(3091)<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>小米<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span>&gt;</span>(1010)<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>其他品牌<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span>&gt;</span>(7275)<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"showMore"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"more.html"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>显示全部品牌<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h1 id="JQuery操作事件"><a href="#JQuery操作事件" class="headerlink" title="JQuery操作事件"></a>JQuery操作事件</h1><h2 id="JQuery页面加载后事件"><a href="#JQuery页面加载后事件" class="headerlink" title="JQuery页面加载后事件"></a>JQuery页面加载后事件</h2><h3 id="什么是’JQuery页面加载后事件’"><a href="#什么是’JQuery页面加载后事件’" class="headerlink" title="什么是’JQuery页面加载后事件’?"></a>什么是’JQuery页面加载后事件’?</h3><p><code>$(document).ready()</code></p><h3 id="JQuery页面加载后事件与原生JS页面加载后事件的触发顺序？"><a href="#JQuery页面加载后事件与原生JS页面加载后事件的触发顺序？" class="headerlink" title="JQuery页面加载后事件与原生JS页面加载后事件的触发顺序？"></a>JQuery页面加载后事件与原生JS页面加载后事件的触发顺序？</h3><ul><li>JQuery的<code>$(document).ready()</code>先执行</li><li>原生JS的<code>window.onload</code>后执行</li></ul><h3 id="JQuery页面加载后事件与原生JS页面加载后事件的触发时机？"><a href="#JQuery页面加载后事件与原生JS页面加载后事件的触发时机？" class="headerlink" title="JQuery页面加载后事件与原生JS页面加载后事件的触发时机？"></a>JQuery页面加载后事件与原生JS页面加载后事件的触发时机？</h3><ul><li>JQuery的<code>$(document).ready()</code>是浏览器的内核解析完页面的标签，创建好 DOM 对象之后就会马上执行</li><li>原生JS的<code>window.onload</code>除了要等浏览器内核解析完标签创建好 DOM 对象， 还要等标签显示时需要的内容加载<br>完成才能执行</li></ul><h3 id="JQuery页面加载后事件与原生JS页面加载后事件的可执行次数？"><a href="#JQuery页面加载后事件与原生JS页面加载后事件的可执行次数？" class="headerlink" title="JQuery页面加载后事件与原生JS页面加载后事件的可执行次数？"></a>JQuery页面加载后事件与原生JS页面加载后事件的可执行次数？</h3><ul><li>JQuery的<code>$(document).ready()</code>，有多少执行多少（依次）</li><li>原生JS的<code>window.onload</code>再多，也只能执行最后依次的赋值函数</li></ul><h2 id="JQuery其他常见事件"><a href="#JQuery其他常见事件" class="headerlink" title="JQuery其他常见事件"></a>JQuery其他常见事件</h2><ul><li><code>click()</code>：鼠标单击事件（被调用时传入函数为绑定，不传入函数为触发）</li><li><code>mouseover()</code>：鼠标移入事件（被调用时传入函数为绑定，不传入函数为触发）</li><li><code>mouseout()</code>：鼠标移出事件（被调用时传入函数为绑定，不传入函数为触发）</li><li><code>bind()</code>：给元素绑定一个或多个事件</li><li><code>one()</code>：给元素绑定一个或多个事件，但其绑定的事件只能被触发一次（使用格式与<code>bind()</code>一致）</li><li><code>unbind()</code>：解除元素绑定的一个或多个事件（功能与<code>bind()</code>相反，调用时只需传入字符串形式的事件名即可）</li><li><code>$(document).on(events,[selector],[data],fn) </code>：动态绑定事件，即使元素是后创建的</li></ul><h3 id="演示-8"><a href="#演示-8" class="headerlink" title="演示"></a>演示</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//click()绑定单击事件</span></span><br><span class="line">$(<span class="string">"h5"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    alert(<span class="string">"h5的单击事件"</span>);</span><br><span class="line">});</span><br><span class="line"><span class="comment">//click()触发单击事件</span></span><br><span class="line">$(<span class="string">"h5"</span>).click();</span><br><span class="line"></span><br><span class="line"><span class="comment">//mouseover()绑定鼠标移入事件</span></span><br><span class="line">$(<span class="string">"h5"</span>).mouseover(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    alert(<span class="string">"h5的鼠标移入事件"</span>);;</span><br><span class="line">});</span><br><span class="line"><span class="comment">//mouseover()触发鼠标移入事件</span></span><br><span class="line">$(<span class="string">"h5"</span>).mouseover();</span><br><span class="line"></span><br><span class="line"><span class="comment">//mouseout()绑定鼠标移出事件</span></span><br><span class="line">$(<span class="string">"h5"</span>).mouseout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    alert(<span class="string">"鼠标移出事件"</span>);</span><br><span class="line">});</span><br><span class="line"><span class="comment">//mouseout()触发鼠标移出事件</span></span><br><span class="line">$(<span class="string">"h5"</span>).mouseout();</span><br><span class="line"></span><br><span class="line"><span class="comment">//bind()元素绑定三个事件</span></span><br><span class="line">$(<span class="string">"h5"</span>).bind(<span class="string">"click mouseover mouseout"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"别JB叫！"</span>);</span><br><span class="line">});</span><br><span class="line"><span class="comment">//bind()分别触发三个事件</span></span><br><span class="line">$(<span class="string">"h5"</span>).click();</span><br><span class="line">$(<span class="string">"h5"</span>).mouseover();</span><br><span class="line">$(<span class="string">"h5"</span>).mouseout();</span><br><span class="line"></span><br><span class="line"><span class="comment">//one()元素绑定三个事件</span></span><br><span class="line">$(<span class="string">"h5"</span>).one(<span class="string">"click mouseover mouseout"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"我说的，眼老板是垃圾！"</span>);</span><br><span class="line">});</span><br><span class="line"><span class="comment">//one()分别触发三个事件（一个事件只能被触发一次）</span></span><br><span class="line">$(<span class="string">"h5"</span>).click();</span><br><span class="line">$(<span class="string">"h5"</span>).mouseover();</span><br><span class="line">$(<span class="string">"h5"</span>).mouseout();</span><br><span class="line"></span><br><span class="line"><span class="comment">//unbind()解除两个事件的绑定</span></span><br><span class="line">$(<span class="string">"h5"</span>).unbind(<span class="string">"mouseover mouseout"</span>);</span><br><span class="line"><span class="comment">//unbind()解除所有事件的绑定（不传参，表示解除全部事件绑定）</span></span><br><span class="line">$(<span class="string">"h5"</span>).unbind();</span><br><span class="line"></span><br><span class="line"><span class="comment">//$(document).on(events,[selector],[data],fn)动态绑定事件</span></span><br><span class="line">$(<span class="built_in">document</span>).on(<span class="string">"click mouseover mouseout"</span>, $(<span class="string">"h5"</span>), <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"live没了"</span>);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h1 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h1><h2 id="什么是事件冒泡？"><a href="#什么是事件冒泡？" class="headerlink" title="什么是事件冒泡？"></a>什么是事件冒泡？</h2><p>事件的冒泡是指：父子元素同时监听同一个事件，当触发子元素的事件的时候， 同一个事件也被传递到了父元素的事件里去响应。</p><h3 id="演示-9"><a href="#演示-9" class="headerlink" title="演示"></a>演示</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JQuery操作事件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#ancestor</span> {</span></span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 300px;</span><br><span class="line">            border: black solid 2px;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#descendant</span> {</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            border: blue solid 1px;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery-3.5.1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">            <span class="comment">//父元素div与子元素div绑定同一个事件，</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//当子元素div的单击事件被触发，</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//父元素div的单击事件也会被自动触发</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">"div"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">"事件冒泡"</span>);</span></span><br><span class="line">            });</span><br><span class="line">        });</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ancestor"</span>&gt;</span>one</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"descendant"</span>&gt;</span>two<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="怎么解决事件冒泡？"><a href="#怎么解决事件冒泡？" class="headerlink" title="怎么解决事件冒泡？"></a>怎么解决事件冒泡？</h2><p>在子元素事件函数体内， return false; 可以阻止事件的冒泡传递。</p><h3 id="演示-10"><a href="#演示-10" class="headerlink" title="演示"></a>演示</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JQuery操作事件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#ancestor</span> {</span></span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 300px;</span><br><span class="line">            border: black solid 2px;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#descendant</span> {</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            border: blue solid 1px;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery-3.5.1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">            <span class="comment">//与上面的是同样的代码，现在只需要加上return false</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//即可阻止事件冒泡的产生</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">"div"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">"事件冒泡"</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">            });</span><br><span class="line">        });</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ancestor"</span>&gt;</span>one</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"descendant"</span>&gt;</span>two<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h1 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h1><h2 id="什么是事件对象？"><a href="#什么是事件对象？" class="headerlink" title="什么是事件对象？"></a>什么是事件对象？</h2><p>事件对象， 是封装有触发的事件信息的一个 javascript 对象。</p><h2 id="如何获取事件对象？"><a href="#如何获取事件对象？" class="headerlink" title="如何获取事件对象？"></a>如何获取事件对象？</h2><p>在给元素绑定事件的时候， 在事件的 function( event ) 参数列表中添加一个参数， 这个参数名， 我们习惯取名为 event。这个 event 就是 javascript 传递参事件处理函数的事件对象。</p><h3 id="演示-11"><a href="#演示-11" class="headerlink" title="演示"></a>演示</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原生Js获取事件对象event</span></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>)[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>{</span><br><span class="line">        <span class="built_in">console</span>.log(event);</span><br><span class="line">    };</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">//JQuery获取事件对象event</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    $(<span class="string">"div:first"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>{</span><br><span class="line">        <span class="built_in">console</span>.log(event);</span><br><span class="line">    });</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h2 id="事件对象的作用"><a href="#事件对象的作用" class="headerlink" title="事件对象的作用"></a>事件对象的作用</h2><p>在我们使用<code>bind()</code>给一个元素一次性绑定多个事件时，我们该如何分别给这些事件设置单独的函数呢？这个时候，我们就需要用到事件对象event了。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用bind()给一个元素一次性绑定多个事件</span></span><br><span class="line">$(<span class="string">"div:first"</span>).bind(<span class="string">"mouseover mouseout click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>{</span><br><span class="line">    <span class="comment">//若是mouseover事件，控制台打印mouseover</span></span><br><span class="line">    <span class="keyword">if</span> (event.type == <span class="string">"mouseover"</span>) {</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"mouseover"</span>);</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (event.type == <span class="string">"mouseout"</span>) {</span><br><span class="line">        <span class="comment">//若是mouseout事件，控制台打印mouseout</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"mouseout"</span>);</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (event.type == <span class="string">"click"</span>) {</span><br><span class="line">        <span class="comment">//若是click事件，控制台打印click</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"click"</span>);</span><br><span class="line">    }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h1 id="案例-图片放大跟随"><a href="#案例-图片放大跟随" class="headerlink" title="案例-图片放大跟随"></a>案例-图片放大跟随</h1><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>图片跟随<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        body {</span><br><span class="line">            text-align: center;</span><br><span class="line">        }</span><br><span class="line"><span class="css">        <span class="selector-id">#small</span> {</span></span><br><span class="line">            width: 20%;</span><br><span class="line">            height: 20%;</span><br><span class="line">        }</span><br><span class="line"><span class="css">        <span class="selector-id">#big</span> {</span></span><br><span class="line">            width: 600px;</span><br><span class="line">            height: 300px;</span><br><span class="line">        }</span><br><span class="line"><span class="css">        <span class="selector-id">#showBig</span> {</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            display: none;</span><br><span class="line">        }</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery-3.5.1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#small"</span>).bind(<span class="string">"mouseover mouseout mousemove"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>{</span></span><br><span class="line"><span class="javascript">                <span class="comment">//当鼠标到图片上时，添加大图片</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (event.type == <span class="string">"mouseover"</span>) {</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">"#showBig"</span>).show();</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                    <span class="comment">//当鼠标移动时，大图片也要跟随鼠标移动</span></span></span><br><span class="line"><span class="javascript">                } <span class="keyword">else</span> <span class="keyword">if</span> (event.type == <span class="string">"mousemove"</span>) {</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">"#showBig"</span>).offset({</span></span><br><span class="line">                       left: event.pageX + 10,</span><br><span class="line">                       top: event.pageY + 10</span><br><span class="line">                    });</span><br><span class="line"></span><br><span class="line"><span class="javascript">                    <span class="comment">//当鼠标移出图片上时，大图片消失</span></span></span><br><span class="line"><span class="javascript">                } <span class="keyword">else</span> <span class="keyword">if</span> (event.type == <span class="string">"mouseout"</span>) {</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">"#showBig"</span>).hide();</span></span><br><span class="line">                }</span><br><span class="line">            });</span><br><span class="line">        });</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"small"</span> <span class="attr">src</span>=<span class="string">"img/wallhaven-6oqzgq.jpg"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"showBig"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"big"</span> <span class="attr">src</span>=<span class="string">"img/wallhaven-6oqzgq.jpg"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>计网万字扫盲</title>
      <link href="2020/11/30/92_%E8%AE%A1%E7%BD%91%E4%B8%87%E5%AD%97%E6%89%AB%E7%9B%B2/"/>
      <url>2020/11/30/92_%E8%AE%A1%E7%BD%91%E4%B8%87%E5%AD%97%E6%89%AB%E7%9B%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络概述"><a href="#计算机网络概述" class="headerlink" title="计算机网络概述"></a>计算机网络概述</h1><h2 id="基本术语"><a href="#基本术语" class="headerlink" title="基本术语"></a>基本术语</h2><ol><li><strong>结点（node）</strong>：网络中的结点可以是计算机、集线器、交换机或路由器等。</li><li><strong>链路（link）</strong>：从一个结点到另一个结点的一段物理线路，中间没有任何其他交点。</li><li><strong>主机（host）</strong>：连接在因特网上的计算机。</li><li><strong>ISP（Internet Service Provider）：</strong>因特网服务提供者（提供商）。</li><li><strong>IXP（Internet eXchange Point）：</strong>互联网交换点IXP的主要作用就是允许两个网络直接相连并交换分组，而不需要再通过第三个网络来转发分组。</li><li><strong>RFC（Requst For Comments）：</strong>意思是“请求评议”，包含了关于Internet几乎所有的重要的文字资料。</li><li><strong>广域网WAN（Wide Area Network）：</strong>任务是通过长距离运送主机发送的数据。</li><li><strong>城域网MAN（Metropolitan Area Network）：</strong>大型的计算机网络，MAN是改进LAN（局域网）中的传输介质，扩大局域网的范围。</li><li><strong>局域网LAN（Local Area Network）：</strong>地理分布范较小，一般为数百米至数公里。</li><li><strong>个人区域网PAN（Personal Area Network）：</strong>在个人工作的地方把属于个人使用的电子设备用无线技术连接起来的网络。</li><li><strong>分组（packet）：</strong>因特网中传送的数据单元，由首部header和数据段组成。分组又称为包，首部可称为包头。</li><li><strong>存储转发（store and forward）：</strong>路由器收到一个分组，先检查分组是否正确，并过滤掉冲突包错误。确定包正确后，取出目的地址，通过查找表找到想要发送的输出端口地址，然后将该包发送出去。</li><li><strong>带宽（bandwidth）：</strong>在计算机网络中，表示在单位时间内从网络中的某一点到另一点所能通过的“最高数据率”。常用来表示网络的通信线路所能传送数据的能力，单位是“比特每秒”，记为b/s。</li><li><strong>吞吐量（throughput）：</strong>表示在单位时间内通过某个网络（或信道、接口）的数据量。吞吐量更经常地用于对现实世界中的网络的一种测量，以便知道实际上到底有多少数据量能够通过网路。吞吐量受网络的带宽或网络的额定速率的限制。</li></ol><h2 id="重要知识点总结"><a href="#重要知识点总结" class="headerlink" title="重要知识点总结"></a>重要知识点总结</h2><ol><li><p>计算机网络（简称网络）把许多计算机连接所在一起，而互联网把许多网络连接在一起，是网络的网络。</p></li><li><p>小写字母 i 开头的 internet（互联网）是通用名词，它泛指由多个计算机网络相互连接而成的网络，在这些网络之间的通信协议（即通信规则）可以是任意的。大写字母 I 开头的 Internet（互联网）是专用名词，它指全球最大的，开放的，由众多网络相互连接而成的特定的互联网，并采用 TCP/IP 协议作为通信规则，其前身为 ARPANET 。</p></li><li><p>路由器是实现分组交换的关键构件，其任务是转发收到的分组，这是网络核心部分最重要的功能。分组交换采用存储转发技术，表示把一个报文（要发送的整块数据）分为几个分组后在进行传送。在发送报文之前，先把较长的报文划分成为一个个更小的等长数据段。在每个数据段的前面加上一些由必要的控制信息组成的首部后，就构成了一个分组。分组又称为包，分组是在互联网中传送的数据单元，正是由于分组的头部包含了诸如目的地址和源地址等重要控制信息，每一个分组才能在互联网中独立的选择传输路径，并正确地交付到分组传输的终点。</p></li><li><p>互联网按工作方式可划分为边缘部分和核心部分。主机在网络的边缘部分，其作用是进行信息处理。由大量网络和连接这些网络的路由器组成核心部分，其作用是提供连通性的交换。</p></li><li><p>计算机通信是计算机中进程（即运行着的程序）之间的通信。计算机网络采用的通信方式是客户-服务器方式（C/S方式）和对等连接方式（P2P方式）。</p></li><li><p>客户和服务器都是指通信中所涉及的应用进程。客户是服务请求方，服务器是服务提供方。</p></li><li><p>按照作用范围的不同，计算机网络分为广域网WAN、城域网MAN、局域网LAN、个人区域网PAN。</p></li><li><p>计算机网络最常用的性能指标是：速率、带宽、吞吐量、时延（发送时延、处理时延、排队时延）、时延带宽积、往返时间和信道利用率。</p></li><li><p>网络协议即协议，是为进行网络中的数据交换而建立的规则。计算机网络的各层以及其协议集合，称为网络的体系结构。</p></li><li><p>五层体系结构由应用层、运输层、网络层（网际层）、数据链路层、物理层组成。运输层最主要的协议是 TCP和 UDP 协议，网络层最重要的协议是 IP 协议。下面的内容会介绍计算机的五层体系结构：</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201130172230.png"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC入门</title>
      <link href="2020/11/27/91_JDBC%E5%85%A5%E9%97%A8/"/>
      <url>2020/11/27/91_JDBC%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="JDBC概述"><a href="#JDBC概述" class="headerlink" title="JDBC概述"></a>JDBC概述</h1><p>JDBC 是 Java 访问数据库的标准规范，真正怎么操作数据库还需要具体的实现类，也就是数据库驱动。每个数据库厂商根据自家数据库的通信格式编写好自己数据库的驱动。所以我们只需要会调用 JDBC 接口中的方法即 可，数据库驱动由数据库厂商提供。</p><p>程序员如果要开发访问数据库的程序，只需要会调用 JDBC 接口中的方法即可，不用关注类是如何实现的。 </p><p> 使用同一套 Java 代码，进行少量的修改就可以访问其他 JDBC 支持的数据库。</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201127205158.png"></p><h1 id="JDBC相关开发包"><a href="#JDBC相关开发包" class="headerlink" title="JDBC相关开发包"></a>JDBC相关开发包</h1><ul><li><code>java.sql</code>：包含所有与JDBC访问数据库相关的接口和类。</li><li><code>javax.sql</code>：数据库扩展包，提供数据库额外的功能。如：连接池</li><li>数据库的驱动：由各大数据库厂商提供，需要额外去下载，是对 JDBC 接口实现的类</li></ul><h1 id="JDBC核心API"><a href="#JDBC核心API" class="headerlink" title="JDBC核心API"></a>JDBC核心API</h1><ul><li><code>DriverManager</code>类：管理和注册数据库驱动，得到数据库连接对象。</li><li><code>Connection</code>接口：一个连接对象，可用于创建<code>Statement</code>和<code>PreparedStatement</code>对象</li><li><code>Statement</code>接口：一个SQL语句对象，用于将SQL语句发送给数据库服务器。</li><li><code>PreparedStatement</code>接口：一个SQL语句对象，是Statement的子接口</li><li><code>ResultSet</code>接口：用于封装数据库查询的结果集，返回给客户端Java程序。</li></ul><h1 id="JDBC使用步骤"><a href="#JDBC使用步骤" class="headerlink" title="JDBC使用步骤"></a>JDBC使用步骤</h1><ol><li><p>Java 连接 MySQL 需要驱动包，官网下载地址为<a href="https://dev.mysql.com/downloads/connector/j/">MySQL驱动包官网下载</a><br>还是建议大家下载以前的版本</p></li><li><p>导入驱动Jar包到Java项目中</p><p><a href="https://blog.csdn.net/weixin_47330507/article/details/106192548"> JDBC驱动jar包的下载&amp;导入IDEA</a></p></li><li><p>加载和注册驱动</p><p>使用<code>Class.forName</code>(数据库驱动实现类)来加载和注册数据库驱动。</p></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.liboshuai.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Human</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>{</span><br><span class="line">        <span class="comment">//注册数据库驱动</span></span><br><span class="line">        Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>从 JDBC3 开始，目前已经普遍使用的版本。可以不用注册驱动而直接使用。Class.forName 这句话可以省略。</p></blockquote><h1 id="JDBC初级代码模板"><a href="#JDBC初级代码模板" class="headerlink" title="JDBC初级代码模板"></a>JDBC初级代码模板</h1><ul><li><p>在<code>mydatabase</code>数据库中创建一个<code>students</code>表格（执行DDL语句）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.liboshuai.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings("all")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement state = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">//注册数据库驱动</span></span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">            <span class="comment">//获取数据库连接对象</span></span><br><span class="line">            conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/mydatabase"</span>, <span class="string">"root"</span>, <span class="string">"helloWorld"</span>);</span><br><span class="line">            <span class="comment">//定义SQL语句</span></span><br><span class="line">            String sql = <span class="string">"CREATE TABLE students (id INT PRIMARY KEY AUTO_INCREMENT,NAME VARCHAR(20) NOT NULL,gender VARCHAR(2) NOT NULL,age INT NOT NULL,join_date DATE NOT NULL);"</span>;</span><br><span class="line">            <span class="comment">//获取执行SQL语句的对象</span></span><br><span class="line">            state = conn.createStatement();</span><br><span class="line">            <span class="comment">//执行SQL语句</span></span><br><span class="line">            <span class="keyword">int</span> count = state.executeUpdate(sql);</span><br><span class="line">            <span class="comment">//处理结果</span></span><br><span class="line">            System.out.println(count);<span class="comment">//0</span></span><br><span class="line">        } <span class="keyword">catch</span> (ClassNotFoundException | SQLException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            <span class="keyword">if</span> (state != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    state.close();</span><br><span class="line">                } <span class="keyword">catch</span> (SQLException throwables) {</span><br><span class="line">                    throwables.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    conn.close();</span><br><span class="line">                } <span class="keyword">catch</span> (SQLException throwables) {</span><br><span class="line">                    throwables.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>向<code>students</code>表格中添加三条记录（执行DML语句）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.liboshuai.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement state = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">//注册数据库驱动</span></span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">            <span class="comment">//获取数据库连接</span></span><br><span class="line">            conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/mydatabase"</span>, <span class="string">"root"</span>, <span class="string">"helloWorld"</span>);</span><br><span class="line">            <span class="comment">//定义SQL语句</span></span><br><span class="line">            String sql01 = <span class="string">"INSERT INTO students (NAME, gender, age, join_date) VALUES ('Jason', '男', 21, '1999-08-22');"</span>;</span><br><span class="line">            String sql02 = <span class="string">"INSERT INTO students (NAME, gender, age, join_date) VALUES ('Charlie', '女', 20, '1999-07-12');"</span>;</span><br><span class="line">            String sql03 = <span class="string">"INSERT INTO students (NAME, gender, age, join_date) VALUES ('June', '男', 23, '2020-01-01');"</span>;</span><br><span class="line">            <span class="comment">//获取执行SQL语句的对象</span></span><br><span class="line">            state = conn.createStatement();</span><br><span class="line">            <span class="comment">//执行SQL语句</span></span><br><span class="line">            <span class="keyword">int</span> count = state.executeUpdate(sql01);</span><br><span class="line">            count += state.executeUpdate(sql02);</span><br><span class="line">            count += state.executeUpdate(sql03);</span><br><span class="line">            <span class="comment">//处理结果</span></span><br><span class="line">            System.out.println(count);<span class="comment">//3</span></span><br><span class="line">        } <span class="keyword">catch</span> (ClassNotFoundException | SQLException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            <span class="keyword">if</span> (state != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    state.close();</span><br><span class="line">                } <span class="keyword">catch</span> (SQLException throwables) {</span><br><span class="line">                    throwables.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    conn.close();</span><br><span class="line">                } <span class="keyword">catch</span> (SQLException throwables) {</span><br><span class="line">                    throwables.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>查询<code>students</code>表格中的所有记录（执行DQL语句）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.liboshuai.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement state = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">//注册数据库驱动</span></span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">            <span class="comment">//获取数据库连接对象</span></span><br><span class="line">            conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/mydatabase"</span>, <span class="string">"root"</span>, <span class="string">"helloWorld"</span>);</span><br><span class="line">            <span class="comment">//定义SQL语句</span></span><br><span class="line">            String sql = <span class="string">"select * from students"</span>;</span><br><span class="line">            <span class="comment">//获取执行SQL语句的对象</span></span><br><span class="line">            state = conn.createStatement();</span><br><span class="line">            <span class="comment">//执行SQL语句</span></span><br><span class="line">            result = state.executeQuery(sql);</span><br><span class="line">            <span class="comment">//处理结果</span></span><br><span class="line">            <span class="keyword">while</span> (result.next()) {</span><br><span class="line">                <span class="keyword">int</span> id = result.getInt(<span class="string">"id"</span>);</span><br><span class="line">                String name = result.getString(<span class="number">2</span>);</span><br><span class="line">                String gender = result.getString(<span class="string">"gender"</span>);</span><br><span class="line">                <span class="keyword">int</span> age = result.getInt(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">                System.out.println(id + <span class="string">", "</span> + name + <span class="string">","</span> + gender + <span class="string">","</span> + age);</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">catch</span> (ClassNotFoundException | SQLException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            <span class="keyword">if</span> (result != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    result.close();</span><br><span class="line">                } <span class="keyword">catch</span> (SQLException throwables) {</span><br><span class="line">                    throwables.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (state != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    state.close();</span><br><span class="line">                } <span class="keyword">catch</span> (SQLException throwables) {</span><br><span class="line">                    throwables.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    conn.close();</span><br><span class="line">                } <span class="keyword">catch</span> (SQLException throwables) {</span><br><span class="line">                    throwables.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="步骤详解"><a href="#步骤详解" class="headerlink" title="步骤详解"></a>步骤详解</h2><h3 id="一：注册数据库驱动"><a href="#一：注册数据库驱动" class="headerlink" title="一：注册数据库驱动"></a>一：注册数据库驱动</h3><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><p>告诉程序该使用哪一个数据库驱动</p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><ul><li><p><code>Class.forName("com.mysql.jdbc.Driver")</code></p><p>通过查看源代码发现，使用此方法实际上是调用<code>com.mysql.jdbc.Driver</code>类中的静态代码块</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> {</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        DriverManager.registerDriver(<span class="keyword">new</span> Driver());</span><br><span class="line">    } <span class="keyword">catch</span> (SQLException E) {</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Can't register driver!"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>通过<code>DriverManager</code>类调用静态方法<code>registerDriver()</code>来进行数据库驱动注册的。</p><p>在<code>mysql 5</code>版本之后的驱动jar都是可以直接省略注册驱动的。</p></li></ul><h3 id="二：获取数据库连接对象"><a href="#二：获取数据库连接对象" class="headerlink" title="二：获取数据库连接对象"></a>二：获取数据库连接对象</h3><h4 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h4><p>通过传入URL、用户名、密码，来获取数据库的连接。</p><h4 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h4><p><code>java.sql.DriverManager</code>类中的<code>static Connection getConnection(String url, String user, String password)</code></p><ul><li><p><code>user</code>：用户名</p></li><li><p><code>password</code>：密码</p></li><li><p><code>URL</code></p><p>格式：<code>jdbc:mysql://ip:端口/数据库名称</code></p><p>实例：<code>jdbc:mysql://localhost:3306/mydatabase</code></p><p>备注：如果连接的是本机<code>mysql</code>服务器，并且默认端口为3306，则URL可以简写为<code>jdbc:mysql:///mydatabase</code></p></li></ul><h3 id="三：定义sql语句"><a href="#三：定义sql语句" class="headerlink" title="三：定义sql语句"></a>三：定义sql语句</h3><p>定义一个字符串引用，用于接收字符串形式的SQL语句。</p><h4 id="占位符？"><a href="#占位符？" class="headerlink" title="占位符？"></a>占位符？</h4><p>使用占位符：<code>select * from user where username = ? and password = ?</code></p><p>给占位符赋值：setXxx(参数1, 参数2)</p><h3 id="四：获取执行sql语句对象"><a href="#四：获取执行sql语句对象" class="headerlink" title="四：获取执行sql语句对象"></a>四：获取执行sql语句对象</h3><h4 id="功能-2"><a href="#功能-2" class="headerlink" title="功能"></a>功能</h4><p>获取用于执行SQL语句的对象。</p><h4 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h4><ol><li><p><code>java.sql.Connection</code>接口中的<code>Statement createStatement()</code></p><p>创建一个Statement对象，用于向数据库发送SQL语句。</p></li><li><p><code>java.sql.Connection</code>接口中的<code>PreparedStatement prepareStatement(String sql)</code></p><p>创建用于向数据库发送参数化SQL语句的PreparedStatement对象。</p></li></ol><h3 id="五：执行sql语句"><a href="#五：执行sql语句" class="headerlink" title="五：执行sql语句"></a>五：执行sql语句</h3><h4 id="功能-3"><a href="#功能-3" class="headerlink" title="功能"></a>功能</h4><p>执行传入的String类型的SQL语句。</p><h4 id="方法-3"><a href="#方法-3" class="headerlink" title="方法"></a>方法</h4><ol><li><p><code>java.sql.Statement()</code>接口中的<code>int executeUpdate(String sql)</code></p><ul><li><p>作用</p><p>执行insert、delete、update和DDL语句。</p></li><li><p>返回值</p><p>影响的行数，可以通过这个影响的行数判断DML语句是否执行成功 返回值&gt;0的则执行成功，反之，则失败。</p></li></ul></li><li><p><code>java.sql.Statement()</code>接口的<code>ResultSet executeQuery(String sql)</code></p><ul><li><p>作用</p><p>执行给定的DQL语句，该语句返回单个ResultSet对象。</p></li><li><p>返回值</p><p>查询得到的结果集</p></li></ul></li><li><p><code>java.sql.PreparedStatement()</code>接口中的<code>int executeUpdate()</code></p><ul><li><p>作用</p><p>执行PreparedStatement对象中的SQL语句，该对象必须是SQL数据操作语言(DML)语句，如insert、update或delete;或者不返回任何内容的SQL语句，比如DDL语句。</p></li><li><p>返回值</p><p>影响的行数，可以通过这个影响的行数判断DML语句是否执行成功 返回值&gt;0的则执行成功，反之，则失败。</p></li></ul></li><li><p><code>java.sql.PreparedStatement()</code>接口中的<code>ResultSet executeQuery()</code></p><ul><li><p>作用</p><p>在这个PreparedStatement对象中执行SQL查询，并返回查询生成的ResultSet对象。</p></li><li><p>返回值</p><p>查询得到的结果集</p></li></ul></li></ol><h3 id="六：处理结果集"><a href="#六：处理结果集" class="headerlink" title="六：处理结果集"></a>六：处理结果集</h3><h4 id="功能-4"><a href="#功能-4" class="headerlink" title="功能"></a>功能</h4><ul><li><p><code>executeUpdate()</code>返回值为<code>int</code>类型</p><p>执行DDL语句，成功则返回0。执行DML语句，成功则返回影响的行数。我们需要利用这个返回得到的int类型的数值进行一些代码操作。</p></li><li><p><code>executeQuery</code>返回值为<code>ResultSet</code>类型。两种的处理方式不同。</p></li></ul><p>下面我只讲述一下关于<code>executeQuery()</code>返回的<code>ResultSet</code>类型的结果的处理。</p><h4 id="方法-4"><a href="#方法-4" class="headerlink" title="方法"></a>方法</h4><ol><li><p><code>java.sql.Result</code>接口的<code>boolean next()</code></p><p>将光标从当前位置向前移动一行，当光标移动到最后一行之后则返回true，其余返回false。</p></li><li><p><code>java.sql.Result</code>接口的<code>xxx getXxx(int columnIndex)</code></p><p>通过传入索引获取表中的字段值。如：getString()不管数据库中的数据类型是什么，都已String类型取出。其他方法也类似。并且jdbc下标是从1开始，而不是0。</p></li><li><p><code>java.sql.Result</code>接口的<code>xxx getXxx(String columnLabel)</code>（推荐这一种）</p><p>通过传入列名获取表中的值。注意这里的列名，是指我们查询之后得到的列名，这个列名可能会被起别名。</p></li></ol><h4 id="常用数据类型转换表"><a href="#常用数据类型转换表" class="headerlink" title="常用数据类型转换表"></a>常用数据类型转换表</h4><table><thead><tr><th>SQL类型</th><th>JDBC对应方法</th><th>返回类型</th></tr></thead><tbody><tr><td>BIT(1) bit(n)</td><td>getBoolean()</td><td>boolean</td></tr><tr><td>TINYINT</td><td>getByte()</td><td>byte</td></tr><tr><td>SMALLINT</td><td>getShort()</td><td>short</td></tr><tr><td>INT</td><td>getInt()</td><td>int</td></tr><tr><td>BIGINT</td><td>getLong()</td><td>long</td></tr><tr><td>CHAR, VARCHAR</td><td>getString()</td><td>String</td></tr><tr><td>Text(Clob) Blob</td><td>getClob getBlob()</td><td>Clob Blob</td></tr><tr><td>DATE</td><td>getDate()</td><td>java.sql.Date只代表日期</td></tr><tr><td>TIME</td><td>getTime()</td><td>java.sql.Time只表示时间</td></tr><tr><td>TIMESTAMP</td><td>getTimestamp()</td><td>java.sql.Timestamp同时有日期和时间</td></tr></tbody></table><h3 id="七：关闭资源"><a href="#七：关闭资源" class="headerlink" title="七：关闭资源"></a>七：关闭资源</h3><p>首先判断需要关闭的资源引用是否为<code>null</code>，如果不为<code>null</code>，则调用<code>close()</code>方法关闭资源。</p><h1 id="JDBC结合属性配置文件"><a href="#JDBC结合属性配置文件" class="headerlink" title="JDBC结合属性配置文件"></a>JDBC结合属性配置文件</h1><ul><li><p>配置文件</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mydatabase</span></span><br><span class="line"><span class="attr">user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">helloWorld</span></span><br><span class="line"><span class="attr">sql</span>=<span class="string">CREATE TABLE person (id INT PRIMARY KEY AUTO_INCREMENT,NAME VARCHAR(20),age INT,gender VARCHAR(2));</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>实例代码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.liboshuai.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings("all")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//使用资源绑定器绑定属性配置文件</span></span><br><span class="line">        ResourceBundle bundle = ResourceBundle.getBundle(<span class="string">"jdbc"</span>);</span><br><span class="line">        String driver = bundle.getString(<span class="string">"driver"</span>);</span><br><span class="line">        String url = bundle.getString(<span class="string">"url"</span>);</span><br><span class="line">        String user = bundle.getString(<span class="string">"user"</span>);</span><br><span class="line">        String password = bundle.getString(<span class="string">"password"</span>);</span><br><span class="line">        String sql = bundle.getString(<span class="string">"sql"</span>);</span><br><span class="line"></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement state = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">//注册数据库驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">            <span class="comment">//获取数据库连接</span></span><br><span class="line">            conn = DriverManager.getConnection(url,user,password);</span><br><span class="line">            <span class="comment">//sql语句已经在配置文件中定义好了</span></span><br><span class="line">            <span class="comment">//获取执行SQL语句的对象</span></span><br><span class="line">            state = conn.createStatement();</span><br><span class="line">            <span class="comment">//执行SQL语句</span></span><br><span class="line">            <span class="keyword">int</span> count = state.executeUpdate(sql);</span><br><span class="line">            <span class="comment">//处理结果</span></span><br><span class="line">            System.out.println(count);<span class="comment">//0</span></span><br><span class="line">        } <span class="keyword">catch</span> (ClassNotFoundException | SQLException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            <span class="keyword">if</span> (state != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    state.close();</span><br><span class="line">                } <span class="keyword">catch</span> (SQLException throwables) {</span><br><span class="line">                    throwables.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    conn.close();</span><br><span class="line">                } <span class="keyword">catch</span> (SQLException throwables) {</span><br><span class="line">                    throwables.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h1 id="JDBC案例：用户登录"><a href="#JDBC案例：用户登录" class="headerlink" title="JDBC案例：用户登录"></a>JDBC案例：用户登录</h1><ul><li><p>用户账号数据库<code>mydatabase.account</code></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">----+---------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> <span class="keyword">user</span>          <span class="operator">|</span> password  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------+-----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> fortune       <span class="operator">|</span> wswdy     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> dragon        <span class="operator">|</span> xhssf     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> dinosaur      <span class="operator">|</span> xxxxxxx   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> dragonPortal  <span class="operator">|</span> wswswswsw <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> questionnaire <span class="operator">|</span> ds.o2.cgi <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------+-----------+</span></span><br></pre></td></tr></tbody></table></figure></li><li><p><code>jdbc.properties</code>配置文件</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mydatabase</span></span><br><span class="line"><span class="attr">user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">helloWorld</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>代码实现</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.liboshuai.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//初始化一个界面</span></span><br><span class="line">        Map&lt;String, String&gt; userLoginInfo = initUI();</span><br><span class="line">        <span class="comment">//验证用户名和密码</span></span><br><span class="line">        <span class="keyword">boolean</span> loginSuccess = login(userLoginInfo);</span><br><span class="line">        System.out.println(loginSuccess ? <span class="string">"登录成功"</span> : <span class="string">"登录失败"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证用户名和密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userLoginInfo 用户输入的用户名和密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否登录成功的布尔值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">login</span><span class="params">(Map&lt;String, String&gt; userLoginInfo)</span> </span>{</span><br><span class="line">        <span class="comment">//登录成功的布尔标记</span></span><br><span class="line">        <span class="keyword">boolean</span> loginSuccess = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取出用户输入的用户名和密码</span></span><br><span class="line">        String loginName = userLoginInfo.get(<span class="string">"userName"</span>);</span><br><span class="line">        String loginPwd = userLoginInfo.get(<span class="string">"password"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用资源绑定器绑定配置文件</span></span><br><span class="line">        ResourceBundle resource = ResourceBundle.getBundle(<span class="string">"jdbc"</span>);</span><br><span class="line">        <span class="comment">//获取配置文件中值</span></span><br><span class="line">        String driver = resource.getString(<span class="string">"driver"</span>);</span><br><span class="line">        String url = resource.getString(<span class="string">"url"</span>);</span><br><span class="line">        String user = resource.getString(<span class="string">"user"</span>);</span><br><span class="line">        String password = resource.getString(<span class="string">"password"</span>);</span><br><span class="line"></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement state = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet result = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">//注册数据库驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">            <span class="comment">//获取数据库连接对象</span></span><br><span class="line">            conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">            <span class="comment">//定义SQL语句</span></span><br><span class="line">            String sql = <span class="string">"select * from account where user = '"</span>+ loginName +<span class="string">"' and password = '"</span>+ loginPwd +<span class="string">"';"</span>;</span><br><span class="line">            <span class="comment">//获取SQL语句执行对象</span></span><br><span class="line">            state = conn.createStatement();</span><br><span class="line">            <span class="comment">//执行SQL语句</span></span><br><span class="line">            result = state.executeQuery(sql);</span><br><span class="line">            <span class="comment">//判断是否登录成功</span></span><br><span class="line">            <span class="keyword">if</span> (result.next()) {</span><br><span class="line">                loginSuccess = <span class="keyword">true</span>;</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">catch</span> (ClassNotFoundException | SQLException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            <span class="keyword">if</span> (state != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    state.close();</span><br><span class="line">                } <span class="keyword">catch</span> (SQLException throwables) {</span><br><span class="line">                    throwables.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    conn.close();</span><br><span class="line">                } <span class="keyword">catch</span> (SQLException throwables) {</span><br><span class="line">                    throwables.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> loginSuccess;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化用户界面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户输入的用户名和密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, String&gt; <span class="title">initUI</span><span class="params">()</span> </span>{</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">"请输入用户名："</span>);</span><br><span class="line">        String userName = scan.nextLine();</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">"请输入密码："</span>);</span><br><span class="line">        String password = scan.nextLine();</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; userLoginInfo = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        userLoginInfo.put(<span class="string">"userName"</span>,userName);</span><br><span class="line">        userLoginInfo.put(<span class="string">"password"</span>,password);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> userLoginInfo;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>经过测试发现，上面的程序有如下的问题：</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201201130142.png"></p><p>当密码设置为<code>xxx' OR '1'='1</code>时，无论是否此用户，输入的密码是否正确，都会登录成功。此种现象被称为【SQL注入】</p><h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><p>因为用户输入的信息中含有SQL语句的关键字，并且这些关键字参与SQL语句的编译过程，导致SQL语句的原意被扭曲，进行出现了SQL注入的问题。</p><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>只要用户提供的信息不参与SQL语句e编译过程，即使信息中含有SQL语句的关键字，SQL注入问题也不会产生。为了达成上述目的，我们就需要使用到<code>java.sql.PreparedStatement</code>。下面我们先对于<code>java.sqlPreparedStatement</code>进行一个简短的说明：</p><ul><li><code>java.sql.PreparedStatement</code>接口是<code>java.sql.Statement</code>的子接口。</li><li><code>java.sql.PreparedStatement</code>是被称为预编译的数据库操作对象.</li><li><code>java.sql.PreparedStatement</code>的原理为：预先对SQL语句的框架进行编译，然后再给SQL语句传值。</li></ul><h1 id="JDBC案例：利用SQL注入，进行数据排序"><a href="#JDBC案例：利用SQL注入，进行数据排序" class="headerlink" title="JDBC案例：利用SQL注入，进行数据排序"></a>JDBC案例：利用SQL注入，进行数据排序</h1><ul><li><p>数据库<code>mydatabase.account</code></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">----+---------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> <span class="keyword">user</span>          <span class="operator">|</span> password  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------+-----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> fortune       <span class="operator">|</span> wswdy     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> dragon        <span class="operator">|</span> xhssf     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> dinosaur      <span class="operator">|</span> xxxxxxx   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> dragonPortal  <span class="operator">|</span> wswswswsw <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> questionnaire <span class="operator">|</span> ds.o2.cgi <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------+-----------+</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>配置文件</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mydatabase</span></span><br><span class="line"><span class="attr">user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">helloWorld</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>实现代码</p></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.liboshuai.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        String keyWord = initUI();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//排序</span></span><br><span class="line">        order(keyWord);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户输入的命令对查询的数据进行排序</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyWord 用户输入的命令</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">order</span><span class="params">(String keyWord)</span> </span>{</span><br><span class="line">        <span class="comment">//使用资源绑定器绑定配置文件</span></span><br><span class="line">        ResourceBundle source = ResourceBundle.getBundle(<span class="string">"jdbc"</span>);</span><br><span class="line">        <span class="comment">//获取配置文件中的值</span></span><br><span class="line">        String driver = source.getString(<span class="string">"driver"</span>);</span><br><span class="line">        String url = source.getString(<span class="string">"url"</span>);</span><br><span class="line">        String user = source.getString(<span class="string">"user"</span>);</span><br><span class="line">        String password = source.getString(<span class="string">"password"</span>);</span><br><span class="line"></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement state = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet result = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">//注册数据库驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">            <span class="comment">//获取数据库连接</span></span><br><span class="line">            conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">            <span class="comment">//定义SQL语句</span></span><br><span class="line">            String sql = <span class="string">"select * from account order by id "</span> + keyWord;</span><br><span class="line">            <span class="comment">//获取sql语句执行的对象</span></span><br><span class="line">            state = conn.createStatement();</span><br><span class="line">            <span class="comment">//执行SQL语句</span></span><br><span class="line">            result = state.executeQuery(sql);</span><br><span class="line">            <span class="comment">//打印查询结果集</span></span><br><span class="line">            <span class="keyword">while</span> (result.next()) {</span><br><span class="line">                <span class="keyword">int</span> id = result.getInt(<span class="number">1</span>);</span><br><span class="line">                String userName = result.getString(<span class="string">"user"</span>);</span><br><span class="line">                String userPwd = result.getString(<span class="string">"password"</span>);</span><br><span class="line"></span><br><span class="line">                System.out.println(id + <span class="string">", "</span> + userName + <span class="string">", "</span> + userPwd);</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">catch</span> (ClassNotFoundException | SQLException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化用户界面,接收用户输入的命令</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户输入的命令</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">initUI</span><span class="params">()</span> </span>{</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"输入命令(desc或asc)："</span>);</span><br><span class="line">        String keyWord = scan.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> keyWord;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="JDBC案例-用户登录-防SQL注入PreparedStatement"><a href="#JDBC案例-用户登录-防SQL注入PreparedStatement" class="headerlink" title="JDBC案例:用户登录(防SQL注入PreparedStatement)"></a>JDBC案例:用户登录(防SQL注入PreparedStatement)</h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.liboshuai.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//初始化一个界面</span></span><br><span class="line">        Map&lt;String, String&gt; userLoginInfo = initUI();</span><br><span class="line">        <span class="comment">//验证用户名和密码</span></span><br><span class="line">        <span class="keyword">boolean</span> loginSuccess = login(userLoginInfo);</span><br><span class="line">        System.out.println(loginSuccess ? <span class="string">"登录成功"</span> : <span class="string">"登录失败"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证用户名和密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userLoginInfo 用户输入的用户名和密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否登录成功的布尔值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">login</span><span class="params">(Map&lt;String, String&gt; userLoginInfo)</span> </span>{</span><br><span class="line">        <span class="comment">//登录成功的布尔标记</span></span><br><span class="line">        <span class="keyword">boolean</span> loginSuccess = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取出用户输入的用户名和密码</span></span><br><span class="line">        String loginName = userLoginInfo.get(<span class="string">"userName"</span>);</span><br><span class="line">        String loginPwd = userLoginInfo.get(<span class="string">"password"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用资源绑定器绑定配置文件</span></span><br><span class="line">        ResourceBundle resource = ResourceBundle.getBundle(<span class="string">"jdbc"</span>);</span><br><span class="line">        <span class="comment">//获取配置文件中值</span></span><br><span class="line">        String driver = resource.getString(<span class="string">"driver"</span>);</span><br><span class="line">        String url = resource.getString(<span class="string">"url"</span>);</span><br><span class="line">        String user = resource.getString(<span class="string">"user"</span>);</span><br><span class="line">        String password = resource.getString(<span class="string">"password"</span>);</span><br><span class="line"></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement pState = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet result = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">//注册数据库驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">            <span class="comment">//获取数据库连接对象</span></span><br><span class="line">            conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">            <span class="comment">//定义SQL语句，使用占位符</span></span><br><span class="line">            String sql = <span class="string">"select * from account where user = ? and password = ?;"</span>;</span><br><span class="line">            <span class="comment">//获取SQL语句预编译的执行对象（将SQL语句提前发送给DBMS进行预编译）</span></span><br><span class="line">            pState = conn.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//给占位符赋值(JDBC的index都是从1开始)</span></span><br><span class="line">            pState.setString(<span class="number">1</span>,loginName);</span><br><span class="line">            pState.setString(<span class="number">2</span>,loginPwd);</span><br><span class="line">            <span class="comment">//执行SQL语句</span></span><br><span class="line">            result = pState.executeQuery();</span><br><span class="line">            <span class="comment">//判断是否登录成功</span></span><br><span class="line">            <span class="keyword">if</span> (result.next()) {</span><br><span class="line">                loginSuccess = <span class="keyword">true</span>;</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">catch</span> (ClassNotFoundException | SQLException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            <span class="keyword">if</span> (pState != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    pState.close();</span><br><span class="line">                } <span class="keyword">catch</span> (SQLException throwables) {</span><br><span class="line">                    throwables.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    conn.close();</span><br><span class="line">                } <span class="keyword">catch</span> (SQLException throwables) {</span><br><span class="line">                    throwables.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> loginSuccess;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化用户界面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户输入的用户名和密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, String&gt; <span class="title">initUI</span><span class="params">()</span> </span>{</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">"请输入用户名："</span>);</span><br><span class="line">        String userName = scan.nextLine();</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">"请输入密码："</span>);</span><br><span class="line">        String password = scan.nextLine();</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; userLoginInfo = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        userLoginInfo.put(<span class="string">"userName"</span>,userName);</span><br><span class="line">        userLoginInfo.put(<span class="string">"password"</span>,password);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> userLoginInfo;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="Statement对比PreparedStatement"><a href="#Statement对比PreparedStatement" class="headerlink" title="Statement对比PreparedStatement"></a>Statement对比PreparedStatement</h1><ol><li>Statement存在SQL注入问题，而PreparedStatement解决了SQL注入问题。</li><li>Statement效率低于PreparedStatement。因为Statement是编译一次执行一次，而PreparedStatement是编译一次，可以执行N次。</li><li>Statement安全性也低于PreparedStatement。因为PreparedStatement会再编译阶段进行安全检查。</li><li>我们工作中大多数使用PreparedStatement，但遇到业务方面要求需要进行SQL语句拼接、SQL注入时，就必须使用Statement了。</li></ol><h1 id="JDBC代码模板PreparedStatement版"><a href="#JDBC代码模板PreparedStatement版" class="headerlink" title="JDBC代码模板PreparedStatement版"></a>JDBC代码模板PreparedStatement版</h1><ul><li><p>配置文件</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mydatabase</span></span><br><span class="line"><span class="attr">user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">helloWorld</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>在<code>mydatabase</code>中创建一个<code>person</code>表格</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.liboshuai.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用PreparedStatement版的JDBC代码模板</span></span><br><span class="line"><span class="comment"> * 创建一个person表格</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//使用资源绑定器绑定配置文件</span></span><br><span class="line">        ResourceBundle resource = ResourceBundle.getBundle(<span class="string">"jdbc"</span>);</span><br><span class="line">        <span class="comment">//获取配置文件中的信息</span></span><br><span class="line">        String driver= resource.getString(<span class="string">"driver"</span>);</span><br><span class="line">        String url= resource.getString(<span class="string">"url"</span>);</span><br><span class="line">        String user= resource.getString(<span class="string">"user"</span>);</span><br><span class="line">        String password=resource.getString(<span class="string">"password"</span>);</span><br><span class="line">        </span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">//注册驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">            <span class="comment">//获取数据库连接</span></span><br><span class="line">            conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">            <span class="comment">//定义SQL语句</span></span><br><span class="line">            String sql = <span class="string">"CREATE TABLE person (id INT PRIMARY KEY AUTO_INCREMENT,NAME VARCHAR(20) NOT NULL,age INT);"</span>;</span><br><span class="line">            <span class="comment">//获取SQL语句预编译的执行对象</span></span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//执行SQL语句</span></span><br><span class="line">            <span class="keyword">int</span> count = ps.executeUpdate();</span><br><span class="line">            <span class="comment">//处理结果</span></span><br><span class="line">            System.out.println(count);<span class="comment">//0</span></span><br><span class="line">        } <span class="keyword">catch</span> (ClassNotFoundException | SQLException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            <span class="keyword">if</span> (ps != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    ps.close();</span><br><span class="line">                } <span class="keyword">catch</span> (SQLException throwables) {</span><br><span class="line">                    throwables.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (conn != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                conn.close();</span><br><span class="line">            } <span class="keyword">catch</span> (SQLException throwables) {</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>向<code>person</code>表格中插入三条记录</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.liboshuai.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC模板preparedStatement版</span></span><br><span class="line"><span class="comment"> * 向`person`表格中插入三条记录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//使用资源绑定器绑定配置文件</span></span><br><span class="line">        ResourceBundle resource = ResourceBundle.getBundle(<span class="string">"jdbc"</span>);</span><br><span class="line">        <span class="comment">//获取配置文件中的信息</span></span><br><span class="line">        String driver = resource.getString(<span class="string">"driver"</span>);</span><br><span class="line">        String url = resource.getString(<span class="string">"url"</span>);</span><br><span class="line">        String user = resource.getString(<span class="string">"user"</span>);</span><br><span class="line">        String password = resource.getString(<span class="string">"password"</span>);</span><br><span class="line"></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps01 = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps02 = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps03 = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">//注册数据库驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">            <span class="comment">//获取数据库连接</span></span><br><span class="line">            conn = DriverManager.getConnection(url,user,password);</span><br><span class="line">            <span class="comment">//定义SQL语句</span></span><br><span class="line">            String sql01 = <span class="string">"INSERT INTO person (NAME,age) VALUES (?,?);"</span>;</span><br><span class="line">            String sql02 = <span class="string">"INSERT INTO person (NAME,age) VALUES (?,?);"</span>;</span><br><span class="line">            String sql03 = <span class="string">"INSERT INTO person (NAME,age) VALUES (?,?);"</span>;</span><br><span class="line">            <span class="comment">//获取SQL语句的预编译执行对象</span></span><br><span class="line">            ps01 = conn.prepareStatement(sql01);</span><br><span class="line">            ps02 = conn.prepareStatement(sql02);</span><br><span class="line">            ps03 = conn.prepareStatement(sql03);</span><br><span class="line">            <span class="comment">//给占位符赋值</span></span><br><span class="line">            ps01.setString(<span class="number">1</span>,<span class="string">"one"</span>);</span><br><span class="line">            ps01.setInt(<span class="number">2</span>,<span class="number">21</span>);</span><br><span class="line">            ps02.setString(<span class="number">1</span>,<span class="string">"two"</span>);</span><br><span class="line">            ps02.setInt(<span class="number">2</span>,<span class="number">22</span>);</span><br><span class="line">            ps03.setString(<span class="number">1</span>,<span class="string">"three"</span>);</span><br><span class="line">            ps03.setInt(<span class="number">2</span>,<span class="number">23</span>);</span><br><span class="line">            <span class="comment">//执行SQL语句</span></span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">            count += ps01.executeUpdate();</span><br><span class="line">            count += ps02.executeUpdate();</span><br><span class="line">            count += ps03.executeUpdate();</span><br><span class="line">            <span class="comment">//处理结果</span></span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">3</span>) {</span><br><span class="line">                System.out.println(<span class="string">"三条记录插入成功"</span>);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                System.out.println(<span class="string">"三条记录插入失败"</span>);</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">catch</span> (ClassNotFoundException | SQLException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            <span class="keyword">if</span> (ps01 != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    ps01.close();</span><br><span class="line">                } <span class="keyword">catch</span> (SQLException throwables) {</span><br><span class="line">                    throwables.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (ps02 != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    ps02.close();</span><br><span class="line">                } <span class="keyword">catch</span> (SQLException throwables) {</span><br><span class="line">                    throwables.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (ps03 != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    ps03.close();</span><br><span class="line">                } <span class="keyword">catch</span> (SQLException throwables) {</span><br><span class="line">                    throwables.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    conn.close();</span><br><span class="line">                } <span class="keyword">catch</span> (SQLException throwables) {</span><br><span class="line">                    throwables.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>删除<code>person</code>表格中的一条记录</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.liboshuai.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//使用资源绑定器绑定配置文件</span></span><br><span class="line">        ResourceBundle resource = ResourceBundle.getBundle(<span class="string">"jdbc"</span>);</span><br><span class="line">        <span class="comment">//获取配置文件中的信息</span></span><br><span class="line">        String driver=resource.getString(<span class="string">"driver"</span>);</span><br><span class="line">        String url=resource.getString(<span class="string">"url"</span>);</span><br><span class="line">        String user=resource.getString(<span class="string">"user"</span>);</span><br><span class="line">        String password=resource.getString(<span class="string">"password"</span>);</span><br><span class="line"></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">//注册数据库驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">            <span class="comment">//获取数据库连接</span></span><br><span class="line">            conn = DriverManager.getConnection(url,user,password);</span><br><span class="line">            <span class="comment">//定义SQL语句</span></span><br><span class="line">            String sql = <span class="string">"DELETE from person WHERE id = ?;"</span>;</span><br><span class="line">            <span class="comment">//获取SQL语句的预编译执行对象</span></span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//给占位符赋值</span></span><br><span class="line">            ps.setInt(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">            <span class="comment">//执行SQL语句</span></span><br><span class="line">            <span class="keyword">int</span> count = ps.executeUpdate();</span><br><span class="line">            <span class="comment">//处理结果</span></span><br><span class="line">            System.out.println(count);<span class="comment">//1</span></span><br><span class="line">        } <span class="keyword">catch</span> (ClassNotFoundException | SQLException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            <span class="keyword">if</span> (ps != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    ps.close();</span><br><span class="line">                } <span class="keyword">catch</span> (SQLException throwables) {</span><br><span class="line">                    throwables.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    conn.close();</span><br><span class="line">                } <span class="keyword">catch</span> (SQLException throwables) {</span><br><span class="line">                    throwables.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>查询<code>person</code>表格中的指定列名记录</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.liboshuai.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//使用资源绑定器绑定配置文件</span></span><br><span class="line">        ResourceBundle resource = ResourceBundle.getBundle(<span class="string">"jdbc"</span>);</span><br><span class="line">        <span class="comment">//获取配置文件中的信息</span></span><br><span class="line">        String driver=resource.getString(<span class="string">"driver"</span>);</span><br><span class="line">        String url=resource.getString(<span class="string">"url"</span>);</span><br><span class="line">        String user=resource.getString(<span class="string">"user"</span>);</span><br><span class="line">        String password=resource.getString(<span class="string">"password"</span>);</span><br><span class="line"></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet result = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">//注册数据库驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">            <span class="comment">//获取数据库连接</span></span><br><span class="line">            conn = DriverManager.getConnection(url,user,password);</span><br><span class="line">            <span class="comment">//定义SQL</span></span><br><span class="line">            String sql = <span class="string">"SELECT * FROM person WHERE NAME = ?;"</span>;</span><br><span class="line">            <span class="comment">//获取SQL语句的预编译执行对象</span></span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//给占位符赋值</span></span><br><span class="line">            ps.setString(<span class="number">1</span>,<span class="string">"one"</span>);</span><br><span class="line">            <span class="comment">//执行SQL语句</span></span><br><span class="line">            result = ps.executeQuery();</span><br><span class="line">            <span class="comment">//打印查询结果集</span></span><br><span class="line">            <span class="keyword">while</span> (result.next()) {</span><br><span class="line">                String name = result.getString(<span class="string">"name"</span>);</span><br><span class="line">                <span class="keyword">int</span> age = result.getInt(<span class="string">"age"</span>);</span><br><span class="line"></span><br><span class="line">                System.out.println(name + <span class="string">", "</span> + age);</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">catch</span> (ClassNotFoundException | SQLException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
          <category> 复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS安装MySQL详解</title>
      <link href="2020/11/27/90_CentOS%E5%AE%89%E8%A3%85MySQL%E8%AF%A6%E8%A7%A3/"/>
      <url>2020/11/27/90_CentOS%E5%AE%89%E8%A3%85MySQL%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>最近某云搞活动，买了个服务器作为平时学习和测试用，新机器啥也没有，一些常用软件的安装是免不了的，于是乎想着把安装过程都详细记录下来，一是做个备忘，二是给有需要的同学作个参考。</p><p>Linux上安装软件常见的几种方式：</p><ul><li>源码编译</li><li>压缩包解压（一般为tar.gz）</li><li>编译好的安装包（RPM、DPKG等）</li><li>在线安装（YUM、APT等）</li></ul><p>以上几种方式便捷性依次增加，但通用性依次下降，比如直接下载压缩包进行解压，这种方式一般需要自己做一些额外的配置工作，但只要掌握了方法，各个平台基本都适用，YUM虽然简单，但是平台受限，网络受限，必要的时候还需要增加一些特定YUM源。</p><p>几种安装方式最好都能掌握，原则上能用简单的就用简单的：YUM&gt;RPM&gt;tar.gz&gt;源码</p><p>本文是介绍MySQL在CentOS上的安装，主要步骤都是参考了MySQL官方文档：<a href="https://dev.mysql.com/doc/refman/5.7/en/installing.html">https://dev.mysql.com/doc/refman/5.7/en/installing.html</a></p><p>为了测试不同安装方式，反复折腾了好几次，装了删，删了装，每个步骤都是亲测成功的，每条命令都是亲自执行过的，可以放心使用</p><p>咱们闲话少说，书归正传（这闲话就不少了…）</p><h2 id="一、YUM"><a href="#一、YUM" class="headerlink" title="一、YUM"></a>一、YUM</h2><h4 id="0、删除已安装的MySQL"><a href="#0、删除已安装的MySQL" class="headerlink" title="0、删除已安装的MySQL"></a>0、删除已安装的MySQL</h4><h5 id="检查MariaDB"><a href="#检查MariaDB" class="headerlink" title="检查MariaDB"></a>检查MariaDB</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; rpm -qa|grep mariadb</span><br><span class="line">mariadb-server-5.5.60-1.el7_5.x86_64</span><br><span class="line">mariadb-5.5.60-1.el7_5.x86_64</span><br><span class="line">mariadb-libs-5.5.60-1.el7_5.x86_64</span><br></pre></td></tr></tbody></table></figure><h5 id="删除mariadb"><a href="#删除mariadb" class="headerlink" title="删除mariadb"></a>删除mariadb</h5><p>如果不存在（上面检查结果返回空）则跳过步骤</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; rpm -e --nodeps mariadb-server</span><br><span class="line">shell&gt; rpm -e --nodeps mariadb</span><br><span class="line">shell&gt; rpm -e --nodeps mariadb-libs</span><br></pre></td></tr></tbody></table></figure><p><em>其实yum方式安装是可以不用删除mariadb的，安装MySQL会覆盖掉之前已存在的mariadb</em></p><h5 id="检查MySQL"><a href="#检查MySQL" class="headerlink" title="检查MySQL"></a>检查MySQL</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; rpm -qa|grep mysql</span><br></pre></td></tr></tbody></table></figure><h5 id="删除MySQL"><a href="#删除MySQL" class="headerlink" title="删除MySQL"></a>删除MySQL</h5><p>如果不存在（上面检查结果返回空）则跳过步骤</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; rpm -e --nodeps xxx</span><br></pre></td></tr></tbody></table></figure><h3 id="1、添加MySQL-Yum-Repository"><a href="#1、添加MySQL-Yum-Repository" class="headerlink" title="1、添加MySQL Yum Repository"></a>1、添加MySQL Yum Repository</h3><blockquote><p>从CentOS 7开始，MariaDB成为Yum源中默认的数据库安装包。也就是说在CentOS 7及以上的系统中使用yum安装MySQL默认安装的会是MariaDB（MySQL的一个分支）。如果想安装官方MySQL版本，需要使用MySQL提供的Yum源。</p></blockquote><h5 id="下载MySQL源"><a href="#下载MySQL源" class="headerlink" title="下载MySQL源"></a>下载MySQL源</h5><p>官网地址：<a href="https://dev.mysql.com/downloads/repo/yum/">https://dev.mysql.com/downloads/repo/yum/</a></p><p>查看系统版本：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; cat /etc/redhat-release</span><br><span class="line">CentOS Linux release 7.6.1810 (Core)</span><br></pre></td></tr></tbody></table></figure><p>选择对应的版本进行下载，例如CentOS 7当前在官网查看最新Yum源的下载地址为：<br><a href="https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm">https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm</a></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; wget https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm</span><br></pre></td></tr></tbody></table></figure><h5 id="安装MySQL源"><a href="#安装MySQL源" class="headerlink" title="安装MySQL源"></a>安装MySQL源</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; sudo rpm -Uvh platform-and-version-specific-package-name.rpm</span><br></pre></td></tr></tbody></table></figure><p>例如CentOS7当前最新MySQL源安装：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; sudo rpm -Uvh mysql80-community-release-el7-3.noarch.rpm</span><br></pre></td></tr></tbody></table></figure><h5 id="检查是否安装成功"><a href="#检查是否安装成功" class="headerlink" title="检查是否安装成功"></a>检查是否安装成功</h5><p>执行成功后会在<code>/etc/yum.repos.d/</code>目录下生成两个repo文件<code>mysql-community.repo</code>及 <code>mysql-community-source.repo</code></p><p>并且通过<code>yum repolist</code>可以看到mysql相关资源</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; yum repolist enabled | grep "mysql.*-community.*"</span><br><span class="line">!mysql-connectors-community/x86_64 MySQL Connectors Community                108</span><br><span class="line">!mysql-tools-community/x86_64      MySQL Tools Community                      90</span><br><span class="line">!mysql80-community/x86_64          MySQL 8.0 Community Server                113</span><br></pre></td></tr></tbody></table></figure><h3 id="2、选择MySQL版本"><a href="#2、选择MySQL版本" class="headerlink" title="2、选择MySQL版本"></a>2、选择MySQL版本</h3><p>使用MySQL Yum Repository安装MySQL，默认会选择当前最新的稳定版本，例如通过上面的MySQL源进行安装的话，默安装会选择MySQL 8.0版本，如果就是想要安装该版本，可以直接跳过此步骤，如果不是，比如我这里希望安装MySQL5.7版本，就需要“切换一下版本”：</p><h5 id="查看当前MySQL-Yum-Repository中所有MySQL版本（每个版本在不同的子仓库中）"><a href="#查看当前MySQL-Yum-Repository中所有MySQL版本（每个版本在不同的子仓库中）" class="headerlink" title="查看当前MySQL Yum Repository中所有MySQL版本（每个版本在不同的子仓库中）"></a>查看当前MySQL Yum Repository中所有MySQL版本（每个版本在不同的子仓库中）</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; yum repolist all | grep mysql</span><br></pre></td></tr></tbody></table></figure><h5 id="切换版本"><a href="#切换版本" class="headerlink" title="切换版本"></a>切换版本</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; sudo yum-config-manager --disable mysql80-community</span><br><span class="line">shell&gt; sudo yum-config-manager --enable mysql57-community</span><br></pre></td></tr></tbody></table></figure><p>除了使用yum-config-manager之外，还可以直接编辑<code>/etc/yum.repos.d/mysql-community.repo</code>文件</p><p>enabled=0禁用</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[mysql80-community]</span><br><span class="line">name=MySQL 8.0 Community Server</span><br><span class="line">baseurl=http://repo.mysql.com/yum/mysql-8.0-community/el/7/$basearch/</span><br><span class="line">enabled=0</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</span><br></pre></td></tr></tbody></table></figure><p>enabled=1启用</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Enable to use MySQL 5.7</span><br><span class="line">[mysql57-community]</span><br><span class="line">name=MySQL 5.7 Community Server</span><br><span class="line">baseurl=http://repo.mysql.com/yum/mysql-5.7-community/el/7/$basearch/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</span><br></pre></td></tr></tbody></table></figure><h5 id="检查当前启用的MySQL仓库"><a href="#检查当前启用的MySQL仓库" class="headerlink" title="检查当前启用的MySQL仓库"></a>检查当前启用的MySQL仓库</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; yum repolist enabled | grep mysql</span><br></pre></td></tr></tbody></table></figure><p><em>如果同时启用了多个仓库，安装时会选择最新版本</em></p><h3 id="3、安装MySQL"><a href="#3、安装MySQL" class="headerlink" title="3、安装MySQL"></a>3、安装MySQL</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; sudo yum install mysql-community-server</span><br></pre></td></tr></tbody></table></figure><p>该命令会安装MySQL服务器 (mysql-community-server) 及其所需的依赖、相关组件，包括mysql-community-client、mysql-community-common、mysql-community-libs等</p><p>如果带宽不够，这个步骤时间会比较长，请耐心等待~</p><h3 id="4、启动MySQL"><a href="#4、启动MySQL" class="headerlink" title="4、启动MySQL"></a>4、启动MySQL</h3><h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; sudo systemctl start mysqld.service</span><br></pre></td></tr></tbody></table></figure><p>CentOS 6：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; sudo service mysqld start</span><br></pre></td></tr></tbody></table></figure><h5 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; sudo systemctl status mysqld.service</span><br></pre></td></tr></tbody></table></figure><p>CentOS 6：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; sudo service mysqld status</span><br></pre></td></tr></tbody></table></figure><h5 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; sudo systemctl stop mysqld.service</span><br></pre></td></tr></tbody></table></figure><p>CentOS 6：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; sudo service mysqld stop</span><br></pre></td></tr></tbody></table></figure><h5 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; sudo systemctl restart mysqld.service</span><br></pre></td></tr></tbody></table></figure><p>CentOS 6：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; sudo service mysqld restart</span><br></pre></td></tr></tbody></table></figure><h3 id="5、修改密码"><a href="#5、修改密码" class="headerlink" title="5、修改密码"></a>5、修改密码</h3><h5 id="初始密码"><a href="#初始密码" class="headerlink" title="初始密码"></a>初始密码</h5><p>MySQL第一次启动后会创建超级管理员账号<code>root@localhost</code>，初始密码存储在日志文件中：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; sudo grep 'temporary password' /var/log/mysqld.log</span><br></pre></td></tr></tbody></table></figure><h5 id="修改默认密码"><a href="#修改默认密码" class="headerlink" title="修改默认密码"></a>修改默认密码</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; mysql -uroot -p</span><br><span class="line">mysql&gt; ALTER USER 'root'@'localhost' IDENTIFIED BY '123456';</span><br><span class="line">ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</span><br></pre></td></tr></tbody></table></figure><p>出现上面的提示是因为密码太简单了，解决方法如下：</p><ol><li>使用复杂密码，MySQL默认的密码策略是要包含数字、字母及特殊字符；</li><li>如果只是测试用，不想用那么复杂的密码，可以修改默认策略，即<code>validate_password_policy</code>（以及<code>validate_password_length</code>等相关参数），使其支持简单密码的设定，具体方法可以自行百度；</li><li>修改配置文件<code>/etc/my.cnf</code>，添加<code>validate_password=OFF</code>，保存并重启MySQL</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER USER 'root'@'localhost' IDENTIFIED BY '123456';</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></tbody></table></figure><h3 id="6、允许root远程访问"><a href="#6、允许root远程访问" class="headerlink" title="6、允许root远程访问"></a>6、允许root远程访问</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '123456' WITH GRANT OPTION;</span><br><span class="line">mysql&gt; FLUSH PRIVILEGES;</span><br></pre></td></tr></tbody></table></figure><h3 id="7、设置编码为utf8"><a href="#7、设置编码为utf8" class="headerlink" title="7、设置编码为utf8"></a>7、设置编码为utf8</h3><h5 id="查看编码"><a href="#查看编码" class="headerlink" title="查看编码"></a>查看编码</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES LIKE 'character%';</span><br></pre></td></tr></tbody></table></figure><h5 id="设置编码"><a href="#设置编码" class="headerlink" title="设置编码"></a>设置编码</h5><p>编辑/etc/my.cnf，[mysqld]节点增加以下代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">character_set_server=utf8</span><br><span class="line">init-connect='SET NAMES utf8'</span><br></pre></td></tr></tbody></table></figure><h3 id="8、设置开机启动"><a href="#8、设置开机启动" class="headerlink" title="8、设置开机启动"></a>8、设置开机启动</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; systemctl enable mysqld</span><br><span class="line">shell&gt; systemctl daemon-reload</span><br></pre></td></tr></tbody></table></figure><h2 id="二、RPM"><a href="#二、RPM" class="headerlink" title="二、RPM"></a>二、RPM</h2><blockquote><p>除安装过程外，其他步骤和yum方式安装相同，不再赘述</p></blockquote><h3 id="0、删除已旧版本"><a href="#0、删除已旧版本" class="headerlink" title="0、删除已旧版本"></a>0、删除已旧版本</h3><p>略</p><h3 id="1、下载MySQL安装包"><a href="#1、下载MySQL安装包" class="headerlink" title="1、下载MySQL安装包"></a>1、下载MySQL安装包</h3><p>下载地址：<a href="https://dev.mysql.com/downloads/mysql/">https://dev.mysql.com/downloads/mysql/</a></p><p>选择对应的版本：</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201130101014.png"></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar</span><br></pre></td></tr></tbody></table></figure><h3 id="2、安装MySQL"><a href="#2、安装MySQL" class="headerlink" title="2、安装MySQL"></a>2、安装MySQL</h3><h5 id="解压（解打包）"><a href="#解压（解打包）" class="headerlink" title="解压（解打包）"></a>解压（解打包）</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; tar -xvf mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar</span><br><span class="line">tar -xvf mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar</span><br><span class="line">mysql-community-embedded-devel-5.7.26-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-libs-5.7.26-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-embedded-5.7.26-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-test-5.7.26-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-embedded-compat-5.7.26-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-common-5.7.26-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-devel-5.7.26-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-client-5.7.26-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-server-5.7.26-1.el7.x86_64.rpm</span><br></pre></td></tr></tbody></table></figure><p>我们主要安装的是这四个（如果有需要也可以一并安装其它的）：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql-community-libs-5.7.26-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-common-5.7.26-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-client-5.7.26-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-server-5.7.26-1.el7.x86_64.rpm</span><br></pre></td></tr></tbody></table></figure><p>如果不想下载rpm-bundle，官网也提供单独的rpm下载链接</p><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>各rpm包是有依赖关系的，所以需要按照一定顺序进行安装，安装期间如果提示缺少哪些依赖也要先安装相应的包：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; rpm -ivh mysql-community-common-5.7.26-1.el7.x86_64.rpm</span><br><span class="line">shell&gt; rpm -ivh mysql-community-libs-5.7.26-1.el7.x86_64.rpm</span><br><span class="line">shell&gt; rpm -ivh mysql-community-client-5.7.26-1.el7.x86_64.rpm</span><br><span class="line">shell&gt; rpm -ivh mysql-community-server-5.7.26-1.el7.x86_64.rpm</span><br></pre></td></tr></tbody></table></figure><p>还有一种简单的方式，可以自动处理各个包之间的依赖关系并自动下载缺少的依赖：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; yum install mysql-community-{server,client,common,libs}-*</span><br></pre></td></tr></tbody></table></figure><p><em>注意：上面的<code>yum install</code>命令需要在tar解压之后的各个rpm包所在目录内执行，否则就变成yum方式安装了，需要配置MySQL的yum源并且速度很慢，还要当前机器支持外网访问</em></p><h3 id="3、设置"><a href="#3、设置" class="headerlink" title="3、设置"></a>3、设置</h3><p>略</p><h2 id="三、tar-gz"><a href="#三、tar-gz" class="headerlink" title="三、tar.gz"></a>三、tar.gz</h2><h3 id="0、删除旧版本"><a href="#0、删除旧版本" class="headerlink" title="0、删除旧版本"></a>0、删除旧版本</h3><p>略</p><h3 id="1、下载"><a href="#1、下载" class="headerlink" title="1、下载"></a>1、下载</h3><p>下载地址：<a href="https://dev.mysql.com/downloads/mysql/">https://dev.mysql.com/downloa…</a></p><p>选择对应的版本：<br><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201130100824.png"></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.26-linux-glibc2.12-x86_64.tar.gz</span><br></pre></td></tr></tbody></table></figure><h3 id="2、安装-amp-配置："><a href="#2、安装-amp-配置：" class="headerlink" title="2、安装&amp;配置："></a>2、安装&amp;配置：</h3><h5 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h5><p>MySQL依赖libaio库，如果没有先安装一下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; yum install libaio</span><br></pre></td></tr></tbody></table></figure><h5 id="创建mysql用户"><a href="#创建mysql用户" class="headerlink" title="创建mysql用户"></a>创建mysql用户</h5><p>不需要登录的一个系统账号，启动MySQL服务时会使用该账号</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; groupadd mysql</span><br><span class="line">shell&gt; useradd -r -g mysql -s /bin/false mysql</span><br></pre></td></tr></tbody></table></figure><h5 id="解压并创建链接"><a href="#解压并创建链接" class="headerlink" title="解压并创建链接"></a>解压并创建链接</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; cd /usr/local</span><br><span class="line">shell&gt; tar zxvf /path/to/mysql-5.7.26-linux-glibc2.12-x86_64.tar.gz</span><br><span class="line">shell&gt; ln -s mysql-5.7.26-linux-glibc2.12-x86_64/ mysql</span><br></pre></td></tr></tbody></table></figure><h5 id="创建mysql-files目录"><a href="#创建mysql-files目录" class="headerlink" title="创建mysql-files目录"></a>创建mysql-files目录</h5><p>这一步并不是必须的，可以设置secure_file_priv的值指向该目录（用于限制数据导入导出操作的目录）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; cd mysql</span><br><span class="line">shell&gt; mkdir mysql-files</span><br><span class="line">shell&gt; chown mysql:mysql mysql-files</span><br><span class="line">shell&gt; chmod 750 mysql-files</span><br></pre></td></tr></tbody></table></figure><h5 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; bin/mysqld --initialize --user=mysql</span><br></pre></td></tr></tbody></table></figure><p>如果初始化时报错如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error while loading shared libraries: libnuma.so.1: cannot open shared object file: No such file or directory</span><br></pre></td></tr></tbody></table></figure><p>是因为libnuma没有安装（或者默认安装的是32位），我们这里需要64位的：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; yum install numactl.x86_64</span><br></pre></td></tr></tbody></table></figure><p>执行完后重新初始化即可<br>初始化成功后返回结果中有一行包含初始密码，第一次登录时要用到它：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A temporary password is generated for root@localhost: 8M0ary878s*U</span><br></pre></td></tr></tbody></table></figure><h5 id="启用SSL（非必须）"><a href="#启用SSL（非必须）" class="headerlink" title="启用SSL（非必须）"></a>启用SSL（非必须）</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; bin/mysql_ssl_rsa_setup</span><br></pre></td></tr></tbody></table></figure><h5 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; bin/mysqld_safe --user=mysql &amp;</span><br></pre></td></tr></tbody></table></figure><p>查看进程可以看到一些默认参数，可以在配置文件中修改这些参数</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; ps -ef | grep mysql</span><br><span class="line">root     14604 12719  0 00:03 pts/0    00:00:00 /bin/sh bin/mysqld_safe --user=mysql</span><br><span class="line">mysql    14674 14604  0 00:03 pts/0    00:00:00 /usr/local/mysql/bin/mysqld --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data --plugin-dir=/usr/local/mysql/lib/plugin --user=mysql --log-error=VM_2_24_centos.err --pid-file=VM_2_24_centos.pid</span><br></pre></td></tr></tbody></table></figure><h5 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h5><p>避免每次执行mysql命令都要加上路径，在<code>/etc/profile</code>中添加：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$PATH:/usr/local/mysql/bin</span><br></pre></td></tr></tbody></table></figure><h5 id="设置为服务"><a href="#设置为服务" class="headerlink" title="设置为服务"></a>设置为服务</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; cp support-files/mysql.server /etc/init.d/mysqld</span><br><span class="line">shell&gt; service mysqld start|stop|restart|status</span><br></pre></td></tr></tbody></table></figure><h5 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; chkconfig --add mysqld</span><br><span class="line">shell&gt; chkconfig --list mysqld</span><br><span class="line">mysqld             0:关    1:关    2:开    3:开    4:开    5:开    6:关</span><br></pre></td></tr></tbody></table></figure><p><em>其他配置与yum、rpm相同，不再赘述</em></p><h2 id="四、源码安装"><a href="#四、源码安装" class="headerlink" title="四、源码安装"></a>四、源码安装</h2><p>就别费这个劲了吧…</p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>我们不是Linux运维专家，也不是MySQL专家，生在这个年代也不知算是幸福还是不幸，线上的环境已经越来越少有人（主要指平时写代码的人）手动去搞这些数据库、中间件的安装配置了，为什么呢？因为各种云产品实在是太方便了呀，一般的公司也不会差这几个钱，既方便又稳定，何乐而不为呢~但是我们自己搞一搞用于自己测试还是必要的，而且还有不少公司的开发环境、测试环境偶尔还是需要手动搞一下的，当然，还有那些个自己搞机房的巨头们。</p><p>那我们既然不是专家，上面所写的内容如果有纰漏也是在所难免的，如果被看到了还希望能够及时批评指正~</p><blockquote><p>转载至：<a href="https://segmentfault.com/a/1190000019507071">CentOS安装MySQL详解_个人文章 - SegmentFault 思否</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> Linux </tag>
            
            <tag> 安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL插入记录出现Incorrent string value错误</title>
      <link href="2020/11/26/89_MySQL%E6%8F%92%E5%85%A5%E8%AE%B0%E5%BD%95%E5%87%BA%E7%8E%B0Incorrent-string-value%E9%94%99%E8%AF%AF/"/>
      <url>2020/11/26/89_MySQL%E6%8F%92%E5%85%A5%E8%AE%B0%E5%BD%95%E5%87%BA%E7%8E%B0Incorrent-string-value%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL插入记录出现Incorrent-string-value错误"><a href="#MySQL插入记录出现Incorrent-string-value错误" class="headerlink" title="MySQL插入记录出现Incorrent string value错误"></a>MySQL插入记录出现Incorrent string value错误</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>你是否遇到过类似以下错误？</p><p>java.sql.SQLException: Incorrect string value: ‘\xF0\x9F\x92\x9C’ for column ‘content’ at row 1.</p><p>产生这种异常的原因在于，mysql中的utf8编码最多会用3个字节存储一个字符，如果一个字符的utf8</p><p>编码占用4个字节（最常见的就是ios中的emoji表情字符），那么在写入数据库时就会报错。</p><p>mysql从5.5.3版本开始，才支持4字节的utf8编码，编码名称为utf8mb4（mb4的意思是max bytes 4），这种编码方式最多用4个字节存储一个字符。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ol><li><p>修改MySQL的配置文件：windows 查找<code>C:\ProgramData\MySQL\MySQL Server 5.7\my.ini</code>，Linux查找my.cnf。在配置文件最后添加如下字段：(先备份)</p><figure class="highlight ini"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">character-set-server</span>=utf8mb4</span><br><span class="line"> </span><br><span class="line"><span class="section">[mysql]</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8mb4</span><br></pre></td></tr></tbody></table></figure></li><li><p>重启MySQL</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭MySQL服务</span></span><br><span class="line">net stop &lt;mysql服务名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Mysql服务</span></span><br><span class="line">net start &lt;mysql服务名称&gt;</span><br></pre></td></tr></tbody></table></figure></li><li><p>按顺序执行下面两个SQL语句：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 修改数据库字符集</span></span><br><span class="line"><span class="keyword">ALTER</span> DATABASE 数据库名 <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_unicode_ci</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改表字符集</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">CONVERT</span> <span class="keyword">TO</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci;</span><br></pre></td></tr></tbody></table></figure></li><li><p>如果觉得步骤三太过麻烦，也可以重建数据库，进行数据迁移。这样就不需要手动执行命令来修改字符集。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
          <category> 报错 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL-DCL语句</title>
      <link href="2020/11/25/88_MySQL-DCL%E8%AF%AD%E5%8F%A5/"/>
      <url>2020/11/25/88_MySQL-DCL%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-DCL语句"><a href="#MySQL-DCL语句" class="headerlink" title="MySQL-DCL语句"></a>MySQL-DCL语句</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>我们现在默认使用的都是 root 用户，超级管理员，拥有全部的权限。但是，一个公司里面的数据库服务器上面可能同时运行着很多个项目的数据库。所以，我们应该可以根据不同的项目建立不同的用户，分配不同的权限来管理和维护数据库。</p><blockquote><p>注：mysqld是MySQL的主程序，服务器端。mysql是MySQL的命令行工具，客户端。</p></blockquote><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201125232739.png"></p><h2 id="查看用户"><a href="#查看用户" class="headerlink" title="查看用户"></a>查看用户</h2><p>所有的用户信息，我们都可以去MySQL自带的数据库<code>mysql</code>中的表<code>user</code>去查询（密码是加密的）。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 切换到mysql数据库</span></span><br><span class="line">use mysql;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询user表中的用户信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></tbody></table></figure><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201126235617.png"></p><h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'用户名'</span>@<span class="string">'主机名'</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">'密码'</span>;</span><br></pre></td></tr></tbody></table></figure><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><ul><li><p><code>'用户名'</code></p><p>将要创建的用户名</p></li><li><p><code>'主机名'</code></p><p>指定该用户在哪个主机上可以登录，如果是本地用户可用<code>localhost</code>。如果想让该用户可以从任意远程主机登录，可以使用通配符<code>%</code></p></li><li><p><code>'密码'</code></p><p>该用户的登录密码，密码可以为空，如果为空则该用户可以不需要密码登录服务器</p></li></ul><h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建 user1 用户，只能在本地登录 mysql 服务器，密码为 空</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'user1'</span>@<span class="string">'127.0.0.1'</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建 user2 用户可以在远程主机'182.92.151.10'电脑上登录 mysql 服务器，密码为 remote</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'user2'</span>@<span class="string">'182.92.151.10'</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">'remote'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建 user3 用户可以在任何电脑上登录 mysql 服务器，密码为 admin</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'user3'</span>@<span class="string">'%'</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">'admin'</span>;</span><br></pre></td></tr></tbody></table></figure><h2 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h2><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">'用户名'</span>@<span class="string">'主机名'</span>; <span class="comment">-- 要与创建用户时的 '用户名'@'主机名'，保持一致</span></span><br></pre></td></tr></tbody></table></figure><h3 id="代码演示-1"><a href="#代码演示-1" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除 user2 用户</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> <span class="string">'user2'</span>@<span class="string">'%'</span>;</span><br></pre></td></tr></tbody></table></figure><h2 id="查看权限"><a href="#查看权限" class="headerlink" title="查看权限"></a>查看权限</h2><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="string">'用户名'</span>@<span class="string">'主机名'</span>; <span class="comment">-- 要与创建用户时的 '用户名'@'主机名'，保持一致</span></span><br></pre></td></tr></tbody></table></figure><h3 id="代码演示-2"><a href="#代码演示-2" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看 user1 用户的权限</span></span><br><span class="line"><span class="keyword">show</span> grants <span class="keyword">for</span> <span class="string">'user1'</span>@<span class="string">'localhost'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看 user2 用户的权限</span></span><br><span class="line"><span class="keyword">show</span> grants <span class="keyword">for</span> <span class="string">'user2'</span>@<span class="string">'%'</span>;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>usage 是指连接（登陆）权限，建立一个用户，就会自动授予其 usage 权限（默认授予）。</p></blockquote><h2 id="用户授权"><a href="#用户授权" class="headerlink" title="用户授权"></a>用户授权</h2><p>在我们创建一个用户之处，这个用户是没用任何权限的，我们需要单独给这个用户赋予权限。</p><h3 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> 权限<span class="number">1</span>, 权限<span class="number">2</span> ... <span class="keyword">ON</span> 数据库名.表名 <span class="keyword">TO</span> <span class="string">'用户名'</span>@<span class="string">'主机名'</span>; </span><br><span class="line"><span class="comment">-- 要与创建用户时的 '用户名'@'主机名'，保持一致</span></span><br></pre></td></tr></tbody></table></figure><h3 id="关键字说明"><a href="#关键字说明" class="headerlink" title="关键字说明"></a>关键字说明</h3><ul><li><p><code>权限</code></p><p>授予用户的权限，如<code>CREATE</code>、<code>ALTER</code>、<code>DROP</code>、<code>SELECT</code>、<code>INSERT</code>、<code>UPDATE</code>、<code>DELETE</code>、<code>GRANT</code>等的权限。如果要授予所有的权限则使用<code>All</code></p></li><li><p><code>数据库名.表名</code></p><p>该用户可以操作哪个数据库的哪些表。如果要授予该用户对所有数据库和表的相应操作权限则可用<code>*</code>表示，如<code>*.*</code></p></li></ul><h3 id="代码演示-3"><a href="#代码演示-3" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 给 user1 用户分配对 mydatabase 这个数据库操作的权限：创建表，修改表，插入记录，更新记录，查询</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">create</span>, <span class="keyword">alter</span>, <span class="keyword">insert</span>, <span class="keyword">update</span>, <span class="keyword">select</span> <span class="keyword">on</span> mydatabase.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">'user1'</span>@<span class="string">'localhost'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 给 user2 用户分配所有权限，对所有数据库的所有表</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">'user2'</span>@<span class="string">'%'</span>;</span><br></pre></td></tr></tbody></table></figure><h2 id="撤销授权"><a href="#撤销授权" class="headerlink" title="撤销授权"></a>撤销授权</h2><p>当我们需要撤销一个用户的权限时，我们可以采用下面的语法语句，撤销一个用户的权限。</p><h3 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> 权限<span class="number">1</span>, 权限<span class="number">2</span> ... <span class="keyword">ON</span> 数据库.表名 <span class="keyword">FROM</span> <span class="string">'用户名'</span>@<span class="string">'主机名'</span>;</span><br><span class="line"> <span class="comment">-- 要与创建用户时的 '用户名'@'主机名'，保持一致</span></span><br></pre></td></tr></tbody></table></figure><h3 id="关键字说明-1"><a href="#关键字说明-1" class="headerlink" title="关键字说明"></a>关键字说明</h3><ul><li><p><code>权限</code></p><p>用户的权限，如<code>CREATE</code>、<code>ALTER</code>、<code>SELECT</code>、<code>INSERT</code>、<code>UPDATE</code>等权限。如果要撤销所有权限，则可以使用<code>ALL</code></p></li><li><p><code>数据库名</code>.<code>表名</code></p><p>对哪些数据库的哪些表的权限进行撤销，如果要撤销该用户对所有数据库和表的操作权限，则可以使用<code>*.*</code></p></li></ul><h3 id="代码演示-4"><a href="#代码演示-4" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 撤销user1用户对mydatabase数据所有表的操作权限</span></span><br><span class="line"><span class="keyword">revoke</span> <span class="keyword">all</span> <span class="keyword">on</span> mydatabase.<span class="operator">*</span> <span class="keyword">from</span> <span class="string">'user1'</span>@<span class="string">'localhost'</span>;</span><br></pre></td></tr></tbody></table></figure><h2 id="修改管理员密码"><a href="#修改管理员密码" class="headerlink" title="修改管理员密码"></a>修改管理员密码</h2><h3 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h3><ul><li><p>记得root用户密码</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -uroot -p password 新密码;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>需要在未登陆 MySQL 的情况下操作，新密码没有特殊符号，就不需要加上引号。</p></blockquote></li></ul><h3 id="代码演示-5"><a href="#代码演示-5" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将 root 管理员的新密码改成 123456</span></span><br><span class="line">mysqladmin -uroot -p password 123456;</span><br></pre></td></tr></tbody></table></figure><h2 id="修改普通用户密码"><a href="#修改普通用户密码" class="headerlink" title="修改普通用户密码"></a>修改普通用户密码</h2><h3 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> PASSWORD <span class="keyword">FOR</span> <span class="string">'用户名'</span>@<span class="string">'主机名'</span><span class="operator">=</span>password(<span class="string">'新密码'</span>);</span><br><span class="line">或</span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">USER</span> <span class="keyword">SET</span> PASSWORD <span class="operator">=</span> PASSWORD(<span class="string">'新密码'</span>) <span class="keyword">WHERE</span> <span class="keyword">USER</span> <span class="operator">=</span> <span class="string">'用户名'</span>;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>需要在登陆 MySQL 的情况下操作，新密码要加单引号。</p></blockquote><h3 id="代码演示-6"><a href="#代码演示-6" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 将'user1'@'localhost'的密码改成'666666'</span></span><br><span class="line"><span class="keyword">set</span> password <span class="keyword">for</span> <span class="string">'user1'</span>@<span class="string">'localhost'</span><span class="operator">=</span>password(<span class="string">'666666'</span>);</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
          <category> 复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事务</title>
      <link href="2020/11/25/87_%E4%BA%8B%E5%8A%A1/"/>
      <url>2020/11/25/87_%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p><strong>数据准备</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建数据表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> account (</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">    balance <span class="keyword">DOUBLE</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 添加数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> account (name, balance) <span class="keyword">VALUES</span> (<span class="string">'张三'</span>, <span class="number">1000</span>), (<span class="string">'李四'</span>, <span class="number">1000</span>);</span><br></pre></td></tr></tbody></table></figure><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在实际的开发过程中，一个业务操作如：转账，往往是要多次访问数据库才能完成的。转账是一个用户扣钱，另一个用户加钱。如果其中有一条 SQL 语句出现异常，这条 SQL 就可能执行失败。 </p><p>事务执行是一个整体，所有的 SQL 语句都必须执行成功。如果其中有 1 条 SQL 语句出现异常，则所有的 SQL 语句都要回滚，整个业务执行失败。</p><p><strong>代码演示</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 模拟转账的操作 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 张三账号-500</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">500</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">'张三'</span>;</span><br><span class="line"><span class="comment">-- 李四账号+500</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="number">500</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">'李四'</span>;</span><br></pre></td></tr></tbody></table></figure><p>假设当张三账号上-500 元,服务器崩溃了。李四的账号并没有+500 元，数据就出现问题了。我们需要保证其中 一条 SQL 语句出现问题，整个转账就算失败。只有两条 SQL 都成功了转账才算成功。这个时候就需要用到事务.</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p><code>MySQL</code>中可以有两种方式进行事务的操作：</p><ol><li>手动提交事务</li><li>自动提交事务</li></ol><h2 id="手动提交"><a href="#手动提交" class="headerlink" title="手动提交"></a>手动提交</h2><p><code>MySQL</code>默认事务是自动提交的，所以想要开启事务，就需要执行对应的命令。相关的命令如下：</p><ul><li><p>开启事务</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">start</span> transaction;</span><br></pre></td></tr></tbody></table></figure></li><li><p>提交事务</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></tbody></table></figure></li><li><p>回滚事务</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">rollback</span>;</span><br></pre></td></tr></tbody></table></figure><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201125125158.png"></p></li></ul><p><strong>代码演示</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 重置表数据</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> balance <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 张三账户-500</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">500</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">'张三'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 李四账号+500</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="number">500</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">'李四'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交</span></span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看表数据,数据已发现改变</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 重置表数据</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> balance <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 张三账户-500</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">500</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">'张三'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 李四账号+500</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="number">500</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">'李四'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 回滚</span></span><br><span class="line"><span class="keyword">rollback</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看表数据,数据未发现改变</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>如果事务中 SQL 语句没有问题，commit 提交事务，会对数据库数据的数据进行改变。 如果事务中 SQL 语句有问题，rollback 回滚事务，会回退到开启事务时的状态。</p></blockquote><h2 id="自动提交"><a href="#自动提交" class="headerlink" title="自动提交"></a>自动提交</h2><p>MySQL 默认每一条 DML(增删改)语句都是一个单独的事务，每条语句都会自动开启一个事务，语句执行完毕 自动提交事务，MySQL 默认开始自动提交事务。</p><ul><li><p>查看是否了开启自动提交事务</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@AUTOCOMMIT</span>;<span class="comment">-- @@表示全局变量，1 表示开启，0 表示关闭</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>取消自动提交事务</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> @<span class="variable">@AUTOCOMMIT</span> <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></tbody></table></figure></li><li><p>开启自动提交事务</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> @<span class="variable">@AUTOCOMMIT</span> <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure></li></ul><p><strong>代码演示</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 重置表数据</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> balance <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看是否开启了自动提交事务</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@AUTOCOMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 取消自动提交事务</span></span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@AUTOCOMMIT</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 张三账户-500</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">500</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">'张三'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 李四账号+500</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="number">500</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">'李四'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 回滚</span></span><br><span class="line"><span class="keyword">rollback</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询表数据，数据未发生改变（自动提交事务已关闭，回滚，会导致前面的SQL失效）</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 重置表数据</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> balance <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看是否开启了自动提交事务</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@AUTOCOMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 张三账户-500</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">500</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">'张三'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 李四账号+500</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="number">500</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">'李四'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交</span></span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询表数据，数据已发生改变（自动提交事务已关闭，只有commit，才能提交数据）</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 重置表数据</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> balance <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看是否开启了自动提交事务</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@AUTOCOMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 开启自动提交事务</span></span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@AUTOCOMMIT</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 张三账户-500</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">500</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">'张三'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 李四账号+500</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="number">500</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">'李四'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 回滚</span></span><br><span class="line"><span class="keyword">rollback</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询表数据，数据已发生改变(自动提交事务已开启，回滚无效)</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;</span><br></pre></td></tr></tbody></table></figure><h2 id="事务原理"><a href="#事务原理" class="headerlink" title="事务原理"></a>事务原理</h2><p>事务开启之后, 所有的操作都会临时保存到事务日志中, 事务日志只有在得到<code>commit</code>命令才会同步到数据表 中，其他任何情况(rollback，断开连接)都会清空事务日志。</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201125193145.png"></p><h2 id="事务步骤"><a href="#事务步骤" class="headerlink" title="事务步骤"></a>事务步骤</h2><ol><li>客户端连接数据库服务器，创建连接时创建此用户临时日志文件</li><li>开启事务以后，所有的操作都会先写入到临时日志文件中</li><li>所有的查询操作从表中查询，但会经过日志文件加工后才返回</li><li>如果事务提交则将日志文件中的数据写到表中，否则清空日志文件。</li></ol><h2 id="回滚点"><a href="#回滚点" class="headerlink" title="回滚点"></a>回滚点</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>在某些成功的操作完成之后，后续的操作有可能成功有可能失败，但是不管成功还是失败，前面操作都已经成功，可以在当前成功的位置设置一个回滚点。可以供后续失败操作返回到该位置，而不是返回所有操作，这个点称之为<strong>回滚点</strong>。</p><h3 id="设置回滚点"><a href="#设置回滚点" class="headerlink" title="设置回滚点"></a>设置回滚点</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SAVEPOINT</span> 回滚点名字;</span><br></pre></td></tr></tbody></table></figure><h3 id="返回回滚点"><a href="#返回回滚点" class="headerlink" title="返回回滚点"></a>返回回滚点</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> 回滚点名字;</span><br></pre></td></tr></tbody></table></figure><p><strong>代码演示</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 重置表数据</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> balance <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 李四账号-100</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">100</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">'李四'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 设置回滚点</span></span><br><span class="line"><span class="keyword">savepoint</span> one_time;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 李四账号再-100</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">100</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">'李四'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 返回回滚点</span></span><br><span class="line"><span class="keyword">rollback</span> <span class="keyword">to</span> one_time;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交</span></span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询表数据，发现李四账号只减少了100</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;</span><br></pre></td></tr></tbody></table></figure><h2 id="事务特征"><a href="#事务特征" class="headerlink" title="事务特征"></a>事务特征</h2><ol><li><p><strong>原子性</strong>(Atomicity)</p><p>每个事务都是一个整体，不可再拆分，事务中所有的 SQL 语句要么都执行成功， 要么都失败。</p></li><li><p><strong>一致性</strong>(Consistency)</p><p>事务在执行前数据库的状态与执行后数据库的状态保持一致。如：转账前2个人的总金额是2000，转账后2 个人总金额也是2000</p></li><li><p><strong>隔离性</strong>(Isolation)</p><p>事务与事务之间不应该相互影响，执行时保持隔离的状态。</p></li><li><p><strong>持久性</strong>(Durability)</p><p>一旦事务执行成功，对数据库的修改是持久的。就算关机，也是保存下来的。</p></li></ol><h2 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h2><p>事务在操作时的理想状态是：所有的事务之间保持隔离，互不影响。</p><p>但是因为并发操作，多个用户同时访问同一个数据。就可能引发并发访问的问题，如下：</p><ul><li><p><strong>脏读</strong></p><p>一个事务读取到了另一个事务中尚未提交的数据。</p></li><li><p><strong>不可重复读</strong></p><p>一个事务中两次读取的数据内容不一致（update时引发的问题）</p></li><li><p><strong>幻读</strong></p><p>一个事务中两次读取的数据的数量不一致（insert或delete引发的问题）</p></li></ul><p>下表为<code>MySQL</code>数据库中的四种隔离级别，每种级别可能又不同的访问问题：</p><table><thead><tr><th>级别</th><th>名字</th><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th><th>默认采用此级别的数据库</th></tr></thead><tbody><tr><td>1</td><td>读未提交</td><td>read uncommitted</td><td>是</td><td>是</td><td>是</td><td></td></tr><tr><td>2</td><td>读已提交</td><td>read committed</td><td>否</td><td>是</td><td>是</td><td>Oracle 和 SQL Server</td></tr><tr><td>3</td><td>可重复读</td><td>repeatable read</td><td>否</td><td>否</td><td>是</td><td>MySQL</td></tr><tr><td>4</td><td>串行化</td><td>serializable</td><td>否</td><td>否</td><td>否</td><td></td></tr></tbody></table><blockquote><p> 隔离级别越高，性能越差，安全性越高。</p></blockquote><h3 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h3><ul><li><p>查询全局事务隔离级别</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@TX</span>_ISOLATION;</span><br></pre></td></tr></tbody></table></figure></li><li><p>设置事务隔离级别（需重登MySQL，才能看出隔离级别变化）</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> TRANSACTION ISOLATION LEVEL 级别字符串;</span><br></pre></td></tr></tbody></table></figure></li></ul><p><strong>代码演示</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 脏读演示 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 打开 A 窗口登录 MySQL，重置表格</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> balance <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- A 窗口设置全局的隔离级别为最低(read uncommitted——读未提交)</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> transaction isolation level read uncommitted;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 再打开 B 窗口登录MySQL,进入指定数据库，然后 A B 窗口都开启事务</span></span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- A 窗口更新 2 个人的账户数据，不提交</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">500</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">'张三'</span>;</span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="number">500</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">'李四'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- B 窗口查询账户, 结果读取了 A 窗口尚未提交的事务，这就叫作脏读</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- A 窗口回滚</span></span><br><span class="line"><span class="keyword">rollback</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- B 窗口查询，表数据又变为原来的样子</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>脏读非常危险的，比如张三向李四购买商品，张三开启事务，向李四账号转入 500 块，然后打电话给李四说钱 已经转了。李四一查询钱到账了，发货给张三。张三收到货后回滚事务，李四的再查看钱没了。</p><p><strong>解决脏读的办法</strong>：将全局的隔离级别进行提升为<code>read committed</code></p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 解决脏读演示 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 打开 A 窗口登录 MySQL，重置表格</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> balance <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- A 窗口设置全局的隔离级别为read committed-读已提交</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> transaction isolation level read committed;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- B 窗口重登MySQL，A B窗口都开启事务</span></span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- A 窗口更新2人账号，不提交</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">500</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">'张三'</span>;</span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="number">500</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">'李四'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- B 窗口查询账户，并没有读取到 A 窗口尚未提交的数据(脏读已被解决)</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- A 窗口提交事务</span></span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- B 窗口查看账户，才读取到 A 窗口已经提交的数据(脏读已被解决)</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>隔离级别为<code>read committed</code>可以避免<strong>脏读</strong>的发生</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 不可重复读演示 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 打开 A 窗口登录 MySQL，重置表格</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> balance <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- A 窗口设置全局的隔离级别为read committed-读已提交</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> transaction isolation level read committed;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- B 窗口重登MySQL，并开启事务</span></span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- B 窗口查询表数据</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- A 窗口也开启事务</span></span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- A 窗口更新2人账号，并提交</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">500</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">'张三'</span>;</span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="number">500</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">'李四'</span>;</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- B 窗口查询，发现查询到的数据与前一次不同</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>两次查询输出的结果不同，这也是一种危险情况！我们可以考虑这样一种情况，比如银行程序需要将查询结果分别输出到电脑屏幕和发短信给客户，结果在一个事务中针对不同的输出目的地进行的两次查询不一致，导致文件和屏幕中的结果不一致，这样就可能会导致账务错误。</p><p><strong>解决不可重复读的办法：</strong>将全局的隔离级别提升为<code>repeatable read</code></p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 解决不可重复读演示 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 打开 A 窗口登录 MySQL，重置表格</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> balance <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- A 窗口设置全局的隔离级别为repeatable read-可重复读</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> transaction isolation level repeatable read;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- B 窗口重登MySQL，并开启事务</span></span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- B 窗口都查询表数据</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- A 窗口也开启事务</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- A 窗口更新2人账号，并提交</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">500</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">'张三'</span>;</span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="number">500</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">'李四'</span>;</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- B 窗口查询，发现查询到的数据与前一次一致</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>隔离级别为<code>repeatable read</code>可以避免<strong>不可重复读</strong>的发生</p><p>首先需要声明的是：在<code>MySQL</code>中，我们是无法看到幻读的效果的。但是我们可以将事务隔离级别设置到最高，以挡住幻读的发生，将数据进行恢复。</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 幻读演示 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 打开 A 窗口登录 MySQL，重置表格</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> balance <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- A 窗口设置全局的隔离级别为最高serializable-串行化</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> transaction isolation level serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- A 窗口重登MySQL, 并开启事务</span></span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- A 窗口查询表记录总数</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> account;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- B 窗口登录 MySQL，并开启事务</span></span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- B 窗口添加一条记录(此时回车确认时，会发现操作没有继续进行，光标仍在闪烁)</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> account (name, balance) <span class="keyword">values</span> (<span class="string">'Jason'</span>, <span class="number">500</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- A 窗口中执行commit提交事务后，B 窗口中的insert语句就立即执行完毕</span></span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- A 窗口中查询表记录总数，发现总数未改变，B 窗口的insert没起作用</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> account;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- B 窗口中执行commit提交事务</span></span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- A 窗口查询表记录总数，发现总数已经改变，B 窗口的insert起作用了</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> account;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>使用<code>serializable</code>隔离级别，一个事务没有执行完，其他事务的 SQL 执行不了，可以挡住幻读</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>默认情况下autocommit（自动提交）=1时：<br>执行sql修改语句（insert into，update…set，delete from）后，是立即生效的；</p></li><li><p>若手动修改autocommit（自动提交）=0，即手动提交时：<br>执行sql修改语句（insert into，update，delete from）后，不会生效；</p><p>在当前终端查看到的数据是存在缓存里的数据；</p><p>重新打开一个终端查看，会发现数据没有生效；</p><p>需要输入commit命令，提交数据到数据库，这样才会生效；</p></li><li><p>不管是autocommit=1或=0时；开启事务使用了begin命令，执行了sql修改语句后，都必须要使用commit命令提交数据<br>给数据库，不然不会生效；<br>如果使用了begin，没有使用commit,而是用begin另外开启了一个事务，之前的修改会被提交，隐式提交；<br>即：使用begin开启事务-&gt;后面必须使用commit/begin(其他命令不行)，sql修改语句才能生效；</p></li><li><p>以上要使用到commit的，在commit之前，使用命令rollback，都可以使数据回滚</p></li><li><p>事务开启到结束：begin+commit/rollback</p></li><li><p>对于set autocommit=0的设置的有效范围（）：</p><ul><li>只在当前操作的mysql数据库有效，临时有效</li><li>退出当前mysql数据库（未退出终端），失效</li><li>退出当前终端，再重新使用mysql，失效</li></ul></li><li><p>事务的开启，与是否选择了特定的数据库无关。即：在执行<code>use database_name</code>命令前，就可以通过<code>begin/start transaction</code>来开启事务，然后在选择你需要使用的数据库，进行数据操作。</p></li><li><p><code>begin</code>和 <code>start transaction</code> 等价，都是显式开启一个事务；<code>commit</code> 和 <code>commit work</code> 等价，都是对事物进行提交；<code>rollback</code> 和 <code>rollback work</code> 等价，都是对事物进行回滚；</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
          <category> 复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多表查询</title>
      <link href="2020/11/25/86_%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/"/>
      <url>2020/11/25/86_%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h1><p><strong>准备数据</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建部门表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dept(</span><br><span class="line"> id <span class="type">int</span> <span class="keyword">primary</span> <span class="keyword">key</span> auto_increment,</span><br><span class="line"> name <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 向部门表添加数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept (name) <span class="keyword">values</span> (<span class="string">'开发部'</span>), (<span class="string">'市场部'</span>), (<span class="string">'财务部'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建员工表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp (</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> <span class="keyword">key</span> auto_increment,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">10</span>),</span><br><span class="line">    gender <span class="type">char</span>(<span class="number">2</span>),</span><br><span class="line">    salary <span class="keyword">double</span>,</span><br><span class="line">    join_date <span class="type">date</span>,</span><br><span class="line">    dept_id <span class="type">int</span>,</span><br><span class="line">    <span class="keyword">foreign</span> <span class="keyword">key</span> (dept_id) <span class="keyword">references</span> dept(id) <span class="comment">-- 外键，关联部门表主键</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 向员工表中添加数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp (name, gender, salary, join_date, dept_id) <span class="keyword">values</span></span><br><span class="line">(<span class="string">'孙悟空'</span>,<span class="string">'男'</span>,<span class="number">7200</span>,<span class="string">'2013-02-24'</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="string">'猪八戒'</span>,<span class="string">'男'</span>,<span class="number">3600</span>,<span class="string">'2010-12-02'</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="string">'唐僧'</span>,<span class="string">'男'</span>,<span class="number">9000</span>,<span class="string">'2008-08-08'</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="string">'白骨精'</span>,<span class="string">'女'</span>,<span class="number">5000</span>,<span class="string">'2015-10-07'</span>,<span class="number">3</span>),</span><br><span class="line">(<span class="string">'蜘蛛精'</span>,<span class="string">'女'</span>,<span class="number">4500</span>,<span class="string">'2011-03-14'</span>,<span class="number">1</span>);</span><br></pre></td></tr></tbody></table></figure><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201125004843.png"></p><h2 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h2><p>用左边表的记录去匹配右边表的记录，如果符合条件的则显示。如：<code>从表.外键=主表.主键</code>。</p><p>内连接也分为两个：隐式内连接 and 显示内连接。</p><h3 id="隐式内连接"><a href="#隐式内连接" class="headerlink" title="隐式内连接"></a>隐式内连接</h3><p>看不到关键字<code>JOIN</code>，条件使用<code>WHERE</code>指定</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段名 <span class="keyword">FROM</span> 左表, 右表 <span class="keyword">WHERE</span> 条件;</span><br></pre></td></tr></tbody></table></figure><p><strong>代码演示</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp, dept <span class="keyword">where</span> emp.`dept_id` <span class="operator">=</span> dept.`id`;</span><br></pre></td></tr></tbody></table></figure><h3 id="显示内连接"><a href="#显示内连接" class="headerlink" title="显示内连接"></a>显示内连接</h3><p>使用<code>INNER JOIN ... ON</code>关键字的语句（<code>INNER</code>可以省略）</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段名 <span class="keyword">FROM</span> 左表 [<span class="keyword">INNER</span>] <span class="keyword">JOIN</span> 右表 <span class="keyword">ON</span> 条件;</span><br></pre></td></tr></tbody></table></figure><p><strong>内连接查询步骤</strong></p><ol><li>确定查询哪些表</li><li>确定表连接的条件</li><li>确定查询的条件</li><li>确定查询的字段</li></ol><p><strong>代码演示</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询唐僧的信息，显示id，姓名，性别，工资和所在的部门名称</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">e.id id, e.name name, e.gender gender, e.salary salary, d.name deptName</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp e <span class="comment">-- 给左表起别名</span></span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span></span><br><span class="line">dept d <span class="comment">-- 给右表起别名</span></span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">e.`dept_id` <span class="operator">=</span> d.`id`</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">e.`name` <span class="operator">=</span> <span class="string">'唐僧'</span>;</span><br></pre></td></tr></tbody></table></figure><h2 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h2><p>外连接也是分为两类：左外连接 and 右外连接。</p><h3 id="左外连接"><a href="#左外连接" class="headerlink" title="左外连接"></a>左外连接</h3><p>使用<code>LEFT OUTER JOIN ... ON</code>关键字的语句（<code>OUTER</code>可以省略）</p><p>用左边表的记录去匹配右边表的记录，如果符合条件的则显示. 否则，显示 <code>NULL</code>.</p><p>可以理解为：在内连接的基础上保证左表的数据全部显示</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段名 <span class="keyword">FROM</span> 左表 <span class="keyword">LEFT</span> [<span class="keyword">OUTER</span>] <span class="keyword">JOIN</span> 右表 <span class="keyword">ON</span> 条件;</span><br></pre></td></tr></tbody></table></figure><p><strong>代码演示</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 在部门表中增加一个销售部</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept (name) <span class="keyword">values</span> (<span class="string">'销售部'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用内连接查询(只显示符合条件的数据)</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept d <span class="keyword">inner</span> <span class="keyword">join</span> emp e <span class="keyword">on</span> d.`id` <span class="operator">=</span> e.`dept_id`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用左外连接查询(保证左表dept数据的全部显示,再对右表的数据再进条件过滤)</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept d <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> emp e <span class="keyword">on</span> d.`id` <span class="operator">=</span> e.`dept_id`;</span><br></pre></td></tr></tbody></table></figure><h3 id="右外连接"><a href="#右外连接" class="headerlink" title="右外连接"></a>右外连接</h3><p>使用<code>RIGHT OUTER</code>，<code>OUTER</code>可以省略</p><p>用右边表的记录去匹配左边表的记录，如果符合条件的则显示；否则，显示<code>NULL</code></p><p>可以理解为：在内连接的基础上保证右表的数据全部显示</p><p><strong>代码演示</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 在员工表中增加一个dept_id为null的员工</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span> (<span class="keyword">null</span>, <span class="string">'Jason'</span>, <span class="string">'男'</span>, <span class="number">6543.40</span>, <span class="string">'1999-07-12'</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用内连接查询(只显示符合条件的数据)</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept d <span class="keyword">inner</span> <span class="keyword">join</span> emp e <span class="keyword">on</span> d.`id` <span class="operator">=</span> e.`dept_id`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用右外连接查询(保证右表emp数据的全部显示,再对左表的数据再进条件过滤)</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept d <span class="keyword">right</span> <span class="keyword">join</span> emp e <span class="keyword">on</span> d.`id` <span class="operator">=</span> e.`dept_id`;</span><br></pre></td></tr></tbody></table></figure><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>一个查询的结果做为另一个查询的条件</p><h3 id="分类-1"><a href="#分类-1" class="headerlink" title="分类"></a>分类</h3><ol><li><p>子查询的结果是单行单列</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201125020821.png"></p></li><li><p>子查询的结果是多行单列</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201125020848.png"></p></li><li><p>子查询的结果是多行多列</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201125020920.png"></p></li></ol><h3 id="单行单列"><a href="#单行单列" class="headerlink" title="单行单列"></a>单行单列</h3><p>子查询结果只要是单行单列，肯定在<code>WHERE</code>后面作为条件</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 查询字段 <span class="keyword">FROM</span> 表 <span class="keyword">WHERE</span> 字段 <span class="operator">=</span> (子查询);</span><br></pre></td></tr></tbody></table></figure><p><strong>代码演示</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询工资最高的员工是谁？</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> salary <span class="operator">=</span> (<span class="keyword">select</span> <span class="built_in">max</span>(salary) <span class="keyword">from</span> emp);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询工资小于平均工资的员工有哪些？</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> salary <span class="operator">&lt;</span> (<span class="keyword">select</span> <span class="built_in">avg</span>(salary) <span class="keyword">from</span> emp);</span><br></pre></td></tr></tbody></table></figure><h3 id="多行单列"><a href="#多行单列" class="headerlink" title="多行单列"></a>多行单列</h3><p>子查询结果是多行单列，结果集类似于一个数组，父查询使用<code>IN</code>运算符</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 查询字段 <span class="keyword">FROM</span> 表 <span class="keyword">WHERE</span> 字段 <span class="keyword">IN</span> (子查询);</span><br></pre></td></tr></tbody></table></figure><p><strong>代码演示</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询工资大于 5000 的员工，来自于哪些部门的名字</span></span><br><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> dept <span class="keyword">where</span> id <span class="keyword">in</span> (<span class="keyword">select</span> dept_id <span class="keyword">from</span> emp <span class="keyword">where</span> salary <span class="operator">&gt;</span> <span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询开发部与财务部所有的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> dept_id <span class="keyword">in</span> (<span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="keyword">in</span> (<span class="string">'开发部'</span>,<span class="string">'财务部'</span>));</span><br></pre></td></tr></tbody></table></figure><h3 id="多行多列"><a href="#多行多列" class="headerlink" title="多行多列"></a>多行多列</h3><p>子查询结果只要是多列，肯定在<code>FROM</code>后面作为表</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 查询字段 <span class="keyword">FROM</span> (子查询) 表别名 <span class="keyword">WHERE</span> 条件;</span><br></pre></td></tr></tbody></table></figure><p><strong>代码演示</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询出 2011 年以后入职的员工信息，包括部门名称</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方法一：使用隐式内连接</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">d.name deptName, e.<span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">dept d, (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> join_date <span class="operator">&gt;=</span> <span class="string">'2011-1-1'</span>) e </span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">d.`id` <span class="operator">=</span> e.`dept_id`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方法二：使用显示内连接1</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">d.name deptName, e.<span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">dept d</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span></span><br><span class="line">(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> join_date <span class="operator">&gt;=</span> <span class="string">'2011-1-1'</span>) e</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">d.`id` <span class="operator">=</span> e.`dept_id`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方法三：使用显示内连接2</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">d.name deptName, e.<span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">dept d </span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> </span><br><span class="line">emp e</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">d.`id` <span class="operator">=</span> e.`dept_id`</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">e.`join_date` <span class="operator">&gt;=</span> <span class="string">'2011-1-1'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方法四：使用显示内连接3</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">d.name deptName, e.<span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">dept d</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span></span><br><span class="line">emp e</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">d.`id` <span class="operator">=</span> e.`dept_id`</span><br><span class="line"><span class="keyword">and</span></span><br><span class="line">e.`join_date` <span class="operator">&gt;=</span> <span class="string">'2011-1-1'</span>;</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
          <category> 复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库设计规范</title>
      <link href="2020/11/20/85_%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83/"/>
      <url>2020/11/20/85_%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库设计范例"><a href="#数据库设计范例" class="headerlink" title="数据库设计范例"></a>数据库设计范例</h1><h2 id="表关系概述"><a href="#表关系概述" class="headerlink" title="表关系概述"></a>表关系概述</h2><p>现实生活中，实体与实体之间肯定是有关系的，比如：老公和老婆，部门和员工，老师和学生等。那么我们在设计表的时候，就应该体现出表与表之间的这种关系！</p><p>数据库中之间有三种关系：</p><ol><li>一对多，例如：最常用的关系 部门和员工</li><li>多对多，例如：学生选课表 和 学生表， 一门课程可以有多个学生选择，一个学生选择多门课程</li><li>一对一，例如：相对使用比较少。员工表 简历表， 公民表 护照表</li></ol><h2 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h2><h3 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h3><p>在从表(多方)创建一个字段,字段作为外键指向主表(一方)的主键。</p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="案例需求"><a href="#案例需求" class="headerlink" title="案例需求"></a>案例需求</h4><p>一个旅游线路分类中有多个旅游线路，如下图</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201120034209.png"></p><h4 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h4><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201120034347.png"></p><h4 id="案例实现"><a href="#案例实现" class="headerlink" title="案例实现"></a>案例实现</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建主表tab_category旅游分类表</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">cid 旅游线路分类主键，自动增长</span></span><br><span class="line"><span class="comment">cname 旅游线路分类名称非空，唯一，字符串 100</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tab_category (</span><br><span class="line">    cid <span class="type">int</span> <span class="keyword">primary</span> <span class="keyword">key</span> auto_increment,</span><br><span class="line">    cname <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">unique</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 向主表添加数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tab_category (cname) <span class="keyword">values</span> (<span class="string">'周边游'</span>), (<span class="string">'出境游'</span>), (<span class="string">'国内游'</span>), (<span class="string">'港澳游'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建次表tab_route旅游路线表</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">rid 旅游线路主键，自动增长</span></span><br><span class="line"><span class="comment">rname 旅游线路名称非空，唯一，字符串 200</span></span><br><span class="line"><span class="comment">price 价格</span></span><br><span class="line"><span class="comment">rdate 上架时间，日期类型</span></span><br><span class="line"><span class="comment">cid 外键，所属分类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tab_route (</span><br><span class="line">rid <span class="type">int</span> <span class="keyword">primary</span> <span class="keyword">key</span> auto_increment,</span><br><span class="line">    rname <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span>,</span><br><span class="line">    price <span class="keyword">double</span>(<span class="number">9</span>,<span class="number">2</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    rdate <span class="type">date</span>,</span><br><span class="line">    cid <span class="type">int</span>, <span class="comment">-- 外键对应主表的主键</span></span><br><span class="line">    <span class="keyword">constraint</span> route_cid_fk <span class="keyword">foreign</span> <span class="keyword">key</span> (cid) <span class="keyword">references</span> tab_category (cid) <span class="keyword">on</span> <span class="keyword">update</span> cascade <span class="keyword">on</span> <span class="keyword">delete</span> cascade <span class="comment">-- 创建外键约束，添加级联更新、级联删除</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 向次表添加数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab_route <span class="keyword">VALUES</span> </span><br><span class="line">(<span class="keyword">NULL</span>, <span class="string">'厦门'</span>, <span class="number">1499</span>,<span class="string">'2018-01-27'</span>, <span class="number">1</span>), </span><br><span class="line">(<span class="keyword">NULL</span>, <span class="string">'西山公园'</span>, <span class="number">699</span>, <span class="string">'2018-02-22'</span>, <span class="number">3</span>), </span><br><span class="line">(<span class="keyword">NULL</span>, <span class="string">'泰国'</span>, <span class="number">1699</span>, <span class="string">'2018-01-27'</span>, <span class="number">2</span>), </span><br><span class="line">(<span class="keyword">NULL</span>, <span class="string">'巴厘岛'</span>, <span class="number">2399</span>, <span class="string">'2017-12-23'</span>,<span class="number">2</span>), </span><br><span class="line">(<span class="keyword">NULL</span>, <span class="string">'香港迪士尼'</span>, <span class="number">799</span>, <span class="string">'2018-04-10'</span>, <span class="number">4</span>);</span><br></pre></td></tr></tbody></table></figure><h2 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h2><h3 id="原则-1"><a href="#原则-1" class="headerlink" title="原则"></a>原则</h3><p>需要创建第三张表，中间表中至少两个字段，这两个字段分别作为外键指向各自一方的主键。</p><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><h4 id="案例需求-1"><a href="#案例需求-1" class="headerlink" title="案例需求"></a>案例需求</h4><p>一个用户收藏多个线路，一个线路被多个用户收藏。如下图：</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201120042412.png"></p><h4 id="案例分析-1"><a href="#案例分析-1" class="headerlink" title="案例分析"></a>案例分析</h4><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201120042448.png"></p><h4 id="案例实现-1"><a href="#案例实现-1" class="headerlink" title="案例实现"></a>案例实现</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建旅游路线表 tab_route</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">rid 旅游线路主键，自动增长</span></span><br><span class="line"><span class="comment">rname 旅游线路名称非空，唯一，字符串 200</span></span><br><span class="line"><span class="comment">price 价格</span></span><br><span class="line"><span class="comment">rdate 上架时间，日期类型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tab_route (</span><br><span class="line">rid <span class="type">int</span> <span class="keyword">primary</span> <span class="keyword">key</span> auto_increment,</span><br><span class="line">    rname <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span>,</span><br><span class="line">    price <span class="keyword">double</span>(<span class="number">9</span>,<span class="number">2</span>),</span><br><span class="line">    rdate <span class="type">date</span>,</span><br><span class="line">    cid <span class="type">int</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加旅游线路数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab_route <span class="keyword">VALUES</span></span><br><span class="line">(<span class="keyword">NULL</span>, <span class="string">'厦门'</span>, <span class="number">1499</span>,<span class="string">'2018-01-27'</span>, <span class="number">1</span>),</span><br><span class="line">(<span class="keyword">NULL</span>, <span class="string">'西山'</span>, <span class="number">699</span>, <span class="string">'2018-02-22'</span>, <span class="number">3</span>),</span><br><span class="line">(<span class="keyword">NULL</span>, <span class="string">'泰国 '</span>, <span class="number">1699</span>, <span class="string">'2018-01-27'</span>, <span class="number">2</span>),</span><br><span class="line">(<span class="keyword">NULL</span>, <span class="string">'巴厘岛'</span>, <span class="number">2399</span>, <span class="string">'2017-12-23'</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="keyword">NULL</span>, <span class="string">'香港'</span>, <span class="number">799</span>, <span class="string">'2018-04-10'</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建用户名表 tab_user</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">uid 用户主键，自增长</span></span><br><span class="line"><span class="comment">username 用户名长度 100，唯一，非空</span></span><br><span class="line"><span class="comment">password 密码长度 30，非空</span></span><br><span class="line"><span class="comment">name 真实姓名长度 100</span></span><br><span class="line"><span class="comment">birthday 生日</span></span><br><span class="line"><span class="comment">sex 性别，定长字符串 2</span></span><br><span class="line"><span class="comment">telephone 手机号，字符串 11</span></span><br><span class="line"><span class="comment">email 邮箱，字符串长度 100</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tab_user (</span><br><span class="line">uid <span class="type">int</span> <span class="keyword">primary</span> <span class="keyword">key</span> auto_increment,</span><br><span class="line">    username <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span>,</span><br><span class="line">    password <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">100</span>),</span><br><span class="line">    birthday <span class="type">date</span>,</span><br><span class="line">    sex <span class="type">char</span>(<span class="number">2</span>) <span class="keyword">default</span> <span class="string">'男'</span>,</span><br><span class="line">    telephone <span class="type">varchar</span>(<span class="number">11</span>),</span><br><span class="line">    email <span class="type">varchar</span>(<span class="number">100</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加用户数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab_user <span class="keyword">VALUES</span> </span><br><span class="line">(<span class="keyword">NULL</span>, <span class="string">'cz110'</span>, <span class="number">123456</span>, <span class="string">'老王'</span>, <span class="string">'1977-07-07'</span>, <span class="string">'男'</span>, <span class="string">'13888888888'</span>, <span class="string">'66666@qq.com'</span>), </span><br><span class="line">(<span class="keyword">NULL</span>, <span class="string">'cz119'</span>, <span class="number">654321</span>, <span class="string">'小王'</span>, <span class="string">'1999-09-09'</span>, <span class="string">'男'</span>, <span class="string">'13999999999'</span>, <span class="string">'99999@qq.com'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建收藏表 tab_favorite</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">rid 旅游线路 id，外键</span></span><br><span class="line"><span class="comment">favDate 收藏时间</span></span><br><span class="line"><span class="comment">uid 用户 id，外键</span></span><br><span class="line"><span class="comment">rid 和 uid 不能重复，设置复合主键，同一个用户不能收藏同一个线路两次</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tab_favorite (</span><br><span class="line">rid <span class="type">int</span>,</span><br><span class="line">    favDate datetime,</span><br><span class="line">    uid <span class="type">int</span>,</span><br><span class="line">    <span class="comment">-- 创建复合主键</span></span><br><span class="line">    <span class="keyword">primary</span> <span class="keyword">key</span> (rid, uid),</span><br><span class="line">    <span class="comment">-- 创建外键</span></span><br><span class="line">    <span class="keyword">foreign</span> <span class="keyword">key</span> (rid) <span class="keyword">references</span> tab_route(rid),</span><br><span class="line">    <span class="keyword">foreign</span> <span class="keyword">key</span> (uid) <span class="keyword">references</span> tab_user(uid)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 增加收藏表数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab_favorite <span class="keyword">VALUES</span> </span><br><span class="line">(<span class="number">1</span>, <span class="string">'2018-01-01'</span>, <span class="number">1</span>), </span><br><span class="line">(<span class="number">2</span>, <span class="string">'2018-02-11'</span>, <span class="number">1</span>), </span><br><span class="line">(<span class="number">3</span>, <span class="string">'2018-03-21'</span>, <span class="number">1</span>), </span><br><span class="line">(<span class="number">2</span>, <span class="string">'2018-04-21'</span>, <span class="number">2</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">'2018-05-08'</span>, <span class="number">2</span>), </span><br><span class="line">(<span class="number">5</span>, <span class="string">'2018-06-02'</span>, <span class="number">2</span>); </span><br></pre></td></tr></tbody></table></figure><h2 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h2><h3 id="原则-2"><a href="#原则-2" class="headerlink" title="原则"></a>原则</h3><p>在任意一方添加唯一外键指向另一方的主键（当然也可以直接合成一张表）</p><p><strong>小结</strong></p><table><thead><tr><th>表与表的关系</th><th>关系的维护</th></tr></thead><tbody><tr><td>一对多</td><td>主外键的关系</td></tr><tr><td>多对多</td><td>中间表，两个一对多</td></tr><tr><td>一对一</td><td>1) 特殊一对多，从表中的外键设置为唯一<br>2) 从表中的主键又是外键</td></tr></tbody></table><h2 id="数据库设计规范"><a href="#数据库设计规范" class="headerlink" title="数据库设计规范"></a>数据库设计规范</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>好的数据库设计对数据的存储性能和后期的程序开发，都会产生重要的影响。建立科学的，规范的数据库就需要满足一些规则来优化数据的设计和存储，这些规则就称为范式。</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>目前关系数据库有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）、 第四范式(4NF）和第五范式（5NF，又称完美范式）。 </p><p>满足最低要求的范式是第一范式（1NF）。在第一范式的基础上进一步满足更多规范要求的称为第二范式（2NF）， 其余范式以次类推。一般说来，数据库只需满足第三范式(3NF）就行了。</p><h3 id="第一范式（1NF）"><a href="#第一范式（1NF）" class="headerlink" title="第一范式（1NF）"></a>第一范式（1NF）</h3><p>数据库表的每一列都是不可分割的原子数据项，不能是集合、数组等非原子数据项。即表中的某个列有多个值 时，必须拆分为不同的列。简而言之，第一范式每一列不可再拆分，称为原子性。</p><h3 id="第二范式（2NF）"><a href="#第二范式（2NF）" class="headerlink" title="第二范式（2NF）"></a>第二范式（2NF）</h3><p>在满足第一范式的前提下，表中的每一个字段都完全依赖于主键。</p><p> 所谓完全依赖是指不能存在仅依赖主键一部分的列。简而言之，第二范式就是在第一范式的基础上所有列完全依赖于主键列。当存在一个复合主键包含多个主键列的时候，才会发生不符合第二范式的情况。比如有一个主键有 两个列，不能存在这样的属性，它只依赖于其中一个列，这就是不符合第二范式。</p><blockquote><p>范式定义中概念解释：</p><ol><li>属性组：几个属性组合而成。</li><li>函数依赖： A——&gt; B，如果通过A属性（属性组）的值，可以确定唯一B属性的值。则称B依赖于A。</li><li>完全函数依赖：A——B，如果A是一个属性组，则B属性值的确定需要依赖于A属性组中所有的属性值。</li><li>部分函数依赖：A——B，如果A是一个属性组，则B属性值得确定只需要依赖于A属性组中某一些值既可。</li><li>传递函数依赖：A——B，B——C。如果通过A属性（属性组）的值，可以确定唯一B属性的值。然后再通过B属性（属性组）的值可以确定唯一C属性的值，则称C传递函数依赖于A。</li><li>码：如果在一张表中，一个属性或属性组，被其他所有属性所完全依赖，则称这个属性（属性组）为该表的码。<ul><li>主属性：码属性组中的所有属性；</li><li>非主属性：除了码属性组的其他属性；</li></ul></li></ol></blockquote><p>第二范式的特点： 1. 一张表只描述一件事情。 2. 表中的每一列都完全依赖于主键</p><h3 id="第三范式（3NF）"><a href="#第三范式（3NF）" class="headerlink" title="第三范式（3NF）"></a>第三范式（3NF）</h3><p>在满足第二范式的前提下，表中的每一列都直接依赖于主键，而不是通过其它的列来间接依赖于主键。</p><p> 简而言之，第三范式就是所有列不依赖于其它非主键列，也就是在满足 2NF 的基础上，任何非主列不得传递 依赖于主键。所谓传递依赖，指的是如果存在”A → B → C”的决定关系，则 C 传递依赖于 A。因此，满足第三范 式的数据库表应该不存在如下依赖关系：主键列 → 非主键列 x → 非主键列 y</p><p><strong>小结</strong></p><table><thead><tr><th>范式</th><th>特点</th></tr></thead><tbody><tr><td>1NF</td><td>原子性，表中每列不可再拆分。</td></tr><tr><td>2NF</td><td>不产生局部依赖，一张表只描述一件事情</td></tr><tr><td>3NF</td><td>不产生传递依赖，表中每一列都直接依赖于主键。而不是通过其它列间接依赖于主键。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
          <category> 复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库表的约束</title>
      <link href="2020/11/19/84_%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E7%9A%84%E7%BA%A6%E6%9D%9F/"/>
      <url>2020/11/19/84_%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E7%9A%84%E7%BA%A6%E6%9D%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库表的约束"><a href="#数据库表的约束" class="headerlink" title="数据库表的约束"></a>数据库表的约束</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>对表中的数据进行限制，保证数据的正确性、有效性和完整性。一个表如果添加了约束，不正确的数据将无法插入到表中。约束在创建表的时候添加比较合适。</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><table><thead><tr><th>约束名</th><th>约束关键字</th></tr></thead><tbody><tr><td>主键</td><td>primary key</td></tr><tr><td>唯一</td><td>unique</td></tr><tr><td>非空</td><td>not null</td></tr><tr><td>外键</td><td>foreign key</td></tr><tr><td>检查约束</td><td>check 注：mysql 不支持</td></tr></tbody></table><h2 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>用来唯一标识数据库中的每一条记录。</p><h3 id="哪个字段应该作为表的主键？"><a href="#哪个字段应该作为表的主键？" class="headerlink" title="哪个字段应该作为表的主键？"></a>哪个字段应该作为表的主键？</h3><p>通常不用业务字段作为主键，单独给每张表设计一个 id 的字段，把 id 作为主键。主键是给数据库和程序使用 的，不是给最终的客户使用的。所以主键有没有含义没有关系，只要不重复，非空就行。 如：身份证，学号不建议做成主键</p><h3 id="主键的特点"><a href="#主键的特点" class="headerlink" title="主键的特点"></a>主键的特点</h3><ol><li>唯一且非空</li><li>一张表只能有一个主键</li></ol><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><ol><li><p>在创建表的时候给字段添加主键</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字段名 字段类型 <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>在已有表中添加主键</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span>(字段名);</span><br></pre></td></tr></tbody></table></figure></li><li><p>删除主键</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span>;</span><br></pre></td></tr></tbody></table></figure></li></ol><p><strong>代码演示</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建表学生表 student01, 包含字段(id, name, age)将 id 做为主键</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student01 (</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> <span class="keyword">key</span>, <span class="comment">-- id为主键</span></span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    age <span class="type">int</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除student01上面的主键</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student01 <span class="keyword">drop</span> <span class="keyword">primary</span> <span class="keyword">key</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 重新为表student01添加主键</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student01 <span class="keyword">add</span> <span class="keyword">primary</span> <span class="keyword">key</span>(id);</span><br></pre></td></tr></tbody></table></figure><h3 id="主键自增"><a href="#主键自增" class="headerlink" title="主键自增"></a>主键自增</h3><ul><li><p>主键如果让我们自己添加很有可能重复,我们通常希望在每次插入新记录时,数据库自动生成主键字段的值</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AUTO_INCREMENT： 表示自动增长，但字段类型必须是整数类型</span><br></pre></td></tr></tbody></table></figure></li><li><p>默认 AUTO_INCREMENT 的开始值是 1，如果希望修改起始值,请使用下列 SQL 语法</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AUTO_INCREMENT<span class="operator">=</span>初始值</span><br></pre></td></tr></tbody></table></figure></li><li><p>创建好以后修改起始值（只能往大的修改）</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 AUTO_INCREMENT <span class="operator">=</span> 初始值;</span><br></pre></td></tr></tbody></table></figure></li><li><p>创建表后，删除自增</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 MODIFY 字段名 字段类型;</span><br></pre></td></tr></tbody></table></figure></li><li><p>创建表后，添加自增</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 MODIFY 字段名 字段类型 AUTO_INCREMENT;</span><br></pre></td></tr></tbody></table></figure></li><li><p><code>DELETE</code> 和<code>TRUNCATE</code>对自增长的影响</p><p>DELETE：删除所有的记录之后，自增长没有影响。</p><p> TRUNCATE：删除以后，自增长又重新开始。</p></li></ul><p><strong>代码演示</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建表 student02, 包含字段(id, name, age)将 id 做为自增主键，起始值为5</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student02 (</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> <span class="keyword">key</span> auto_increment, <span class="comment">-- 自增主键</span></span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    age <span class="type">int</span></span><br><span class="line">) auto_increment <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 直接插入数据，主键会自动增长</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student02 (name, age) <span class="keyword">values</span>(<span class="string">'Jason'</span>, <span class="number">21</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student02 (name, age) <span class="keyword">values</span>(<span class="string">'June'</span>, <span class="number">22</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student02 (name, age) <span class="keyword">values</span>(<span class="string">'Charlie'</span>, <span class="number">23</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建好以后修改起始值为10</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student02 auto_increment <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student02 <span class="keyword">values</span> (<span class="keyword">null</span>, <span class="string">'Bob'</span>, <span class="number">24</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student02 <span class="keyword">values</span> (<span class="keyword">null</span>, <span class="string">'Sql'</span>, <span class="number">25</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student02 <span class="keyword">values</span> (<span class="keyword">null</span>, <span class="string">'My'</span>, <span class="number">26</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- DELETE：删除所有的记录之后，自增长没有影响。</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> student02;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student02 <span class="keyword">values</span> (<span class="keyword">null</span>, <span class="string">'is'</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student02 <span class="keyword">values</span> (<span class="keyword">null</span>, <span class="string">'it'</span>, <span class="number">31</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student02 <span class="keyword">values</span> (<span class="keyword">null</span>, <span class="string">'just me'</span>, <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- TRUNCATE：删除以后，自增长又重新开始。</span></span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> student02;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student02 <span class="keyword">values</span> (<span class="keyword">null</span>, <span class="string">'Sasha'</span>, <span class="number">36</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student02 <span class="keyword">values</span> (<span class="keyword">null</span>, <span class="string">'Sloan'</span>, <span class="number">40</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除自增</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student02 modify id <span class="type">int</span>(<span class="number">11</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 再次添加自增</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student02 modify id <span class="type">int</span>(<span class="number">11</span>) auto_increment;</span><br></pre></td></tr></tbody></table></figure><h2 id="唯一约束"><a href="#唯一约束" class="headerlink" title="唯一约束"></a>唯一约束</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p> 约束表中某一列不能出现重复的值（可以有多个<code>NULL</code>）</p><h3 id="格式-1"><a href="#格式-1" class="headerlink" title="格式"></a>格式</h3><ul><li><p>创建表时，设置唯一约束</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字段名 字段类型 <span class="keyword">UNIQUE</span>;</span><br></pre></td></tr></tbody></table></figure></li><li><p>在创建表后，为字段添加唯一约束</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> [<span class="keyword">CONSTRAINT</span> 唯一约束名] <span class="keyword">UNIQUE</span> (列名);</span><br></pre></td></tr></tbody></table></figure></li><li><p>删除唯一约束</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> INDEX 列名<span class="operator">/</span>唯一约束名;</span><br></pre></td></tr></tbody></table></figure></li></ul><p><strong>代码演示</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建学生表 student03, 包含字段(id, name),name 这一列设置唯一约束,不能出现同名的学生</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student03 (</span><br><span class="line">id <span class="type">int</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">unique</span> <span class="comment">-- 设置唯一约束</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加一个同名的学生</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student03 (id, name) <span class="keyword">values</span> (<span class="number">1</span>, <span class="string">'Jason'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student03 (id, name) <span class="keyword">values</span> (<span class="number">2</span>, <span class="string">'Jason'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 可以存在多个null</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student03 (id, name) <span class="keyword">values</span> (<span class="number">3</span>, <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student03 (id, name) <span class="keyword">values</span> (<span class="number">4</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">--  创建表后，为列名id设置唯一约束</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student03 <span class="keyword">add</span> <span class="keyword">constraint</span> unique_id <span class="keyword">UNIQUE</span> (id);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除列名id的唯一约束</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student03 <span class="keyword">drop</span> index unique_id;</span><br></pre></td></tr></tbody></table></figure><h2 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><p>规定某一列不能为 null。</p><h3 id="格式-2"><a href="#格式-2" class="headerlink" title="格式"></a>格式</h3><ul><li><p>创建非空约束</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字段名 字段类型 <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>删除非空约束</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 MODIFY 字段名 字段类型 <span class="keyword">NULL</span>;</span><br><span class="line">或</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 CHANGE <span class="keyword">COLUMN</span> 字段名 字段名 字段类型 <span class="keyword">NULL</span>;</span><br></pre></td></tr></tbody></table></figure></li><li><p>创建表后，为字段设置非空约束</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 MODIFY 字段名 字段类型 <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line">或</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 CHANGE <span class="keyword">COLUMN</span> 字段名 字段名 字段类型 <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></tbody></table></figure></li></ul><p><strong>代码演示</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建表学生表 student04, 包含字段(id,name,gender)其中 name 不能为 NULL</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student04 (</span><br><span class="line">id <span class="type">int</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>, <span class="comment">-- 非空约束</span></span><br><span class="line">    gender <span class="type">varchar</span>(<span class="number">4</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加一条记录其中姓名不赋值</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student04 <span class="keyword">values</span> (<span class="number">1</span>, <span class="keyword">null</span>, <span class="string">'男'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除字段名为name的非空约束</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student04 change <span class="keyword">column</span> name name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 重新为字段名为name添加上非空约束</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student04 change <span class="keyword">column</span> name name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></tbody></table></figure><h2 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h2><h3 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h3><p>给字段默认赋一个值。</p><h3 id="格式-3"><a href="#格式-3" class="headerlink" title="格式"></a>格式</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字段名 字段类型 <span class="keyword">DEFAULT</span> 默认值;</span><br></pre></td></tr></tbody></table></figure><p><strong>代码演示</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建一个学生表 student05，包含字段(id,name,address)， 地址默认值是广州</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student05 (</span><br><span class="line">id <span class="type">int</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    address <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">default</span> <span class="string">'广州'</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加一条记录,使用默认地址</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student05 (id,name) <span class="keyword">values</span>(<span class="number">1</span>, <span class="string">'Jason'</span>);</span><br></pre></td></tr></tbody></table></figure><blockquote><p> 疑问:如果一个字段设置了非空与唯一约束，该字段与主键的区别?</p><ol><li>主键数在一个表中，只能有一个。不能出现多个主键。主键可以单列，也可以是多列。</li><li>自增长只能用在主键上</li></ol></blockquote><h2 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h2><h3 id="概述-4"><a href="#概述-4" class="headerlink" title="概述"></a>概述</h3><ul><li>外键：在从表中与主表主键对应的那一列</li><li>主表：一方，用来约束别人的表</li><li>从表：多方，被别人约束的表</li></ul><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>必须先删除了从表，才能删除主表</li><li>从表的外键值可以为<code>NULL</code>，但是不能为主表主键值外不存在的值</li></ol><h3 id="格式-4"><a href="#格式-4" class="headerlink" title="格式"></a>格式</h3><ul><li><p>新建表时增加外键</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">CONSTRAINT</span>] [外键约束名称] <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span>(外键字段名) <span class="keyword">REFERENCES</span> 主表名(主键字段名);</span><br></pre></td></tr></tbody></table></figure></li><li><p>已有表增加外键</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 从表 <span class="keyword">ADD</span> [<span class="keyword">CONSTRAINT</span>] [外键约束名称] FOERIGN KEY (外键字段名) <span class="keyword">REFERENCES</span> 主表(主键字段名);</span><br></pre></td></tr></tbody></table></figure></li><li><p>删除外键</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 从表 <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> 外键名称;</span><br></pre></td></tr></tbody></table></figure></li></ul><p><strong>代码演示</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建表department，作为主表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> department (</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> <span class="keyword">key</span> auto_increment,</span><br><span class="line">    dep_name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    dep_location <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 向主表添加数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> department <span class="keyword">values</span> (<span class="keyword">null</span>, <span class="string">'研发部'</span>, <span class="string">'北京'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> department <span class="keyword">values</span> (<span class="keyword">null</span>, <span class="string">'开发部'</span>, <span class="string">'上海'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建从表 employee 并添加外键约束 emp_depid_fk</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> employee (</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary</span> <span class="keyword">key</span> auto_increment,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    age <span class="type">int</span>,</span><br><span class="line">    dep_id <span class="type">int</span>, <span class="comment">-- 外键对应主表的主键</span></span><br><span class="line">    <span class="comment">-- 创建外键约束</span></span><br><span class="line">    <span class="keyword">constraint</span> emp_depid_fk <span class="keyword">foreign</span> <span class="keyword">key</span> (dep_id) <span class="keyword">references</span> department (id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 向从表添加数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employee (name, age, dep_id) <span class="keyword">values</span> (<span class="string">'Jason'</span>, <span class="number">21</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employee (name, age, dep_id) <span class="keyword">values</span> (<span class="string">'Charlie'</span>, <span class="number">22</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employee (name, age ,dep_id) <span class="keyword">values</span> (<span class="string">'June'</span>, <span class="number">23</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employee (name, age, dep_id) <span class="keyword">values</span> (<span class="string">'Bob'</span>, <span class="number">25</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employee (name, age ,dep_id) <span class="keyword">values</span> (<span class="string">'Run'</span>, <span class="number">19</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employee (name, age, dep_id) <span class="keyword">values</span> (<span class="string">'Cat'</span>, <span class="number">26</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 尝试往从表中插入不存在的部门（报错）</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employee (name, age, dep_id) <span class="keyword">values</span> (<span class="string">'KOK'</span>, <span class="number">48</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除employee表的emp_depid_fk外键</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> employee <span class="keyword">drop</span> <span class="keyword">foreign</span> <span class="keyword">key</span> emp_depid_fk;</span><br></pre></td></tr></tbody></table></figure><h3 id="外键的级联"><a href="#外键的级联" class="headerlink" title="外键的级联"></a>外键的级联</h3><p>在修改和删除主表的主键时，同时更新或删除副表的外键值，称为级联操作。</p><table><thead><tr><th>级联操作语法</th><th>描述</th></tr></thead><tbody><tr><td><code>ON UPDATE CASCADE</code></td><td>级联更新，只能是创建表的时候创建级联关系。<br>更新主表中的主键，从表中的外键 列也自动同步更新</td></tr><tr><td><code>ON DELETE CASCADE</code></td><td>级联删除</td></tr></tbody></table><p><strong>代码演示</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除 employee 表</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> employee;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 重新创建 employee 表，添加级联更新和级联删除</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> employee (</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary</span> <span class="keyword">key</span> auto_increment,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    age <span class="type">int</span>,</span><br><span class="line">    dep_id <span class="type">int</span>, <span class="comment">-- 外键对应主表的主键</span></span><br><span class="line">    <span class="keyword">constraint</span> emp_depid_fk <span class="keyword">foreign</span> <span class="keyword">key</span> (dep_id) <span class="keyword">references</span> department (id) </span><br><span class="line">    <span class="keyword">on</span> <span class="keyword">update</span> cascade <span class="keyword">on</span> <span class="keyword">delete</span> cascade <span class="comment">-- 创建外键约束,添加级联更新、级联删除</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 再次添加数据到employee表和department表</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee (NAME, age, dep_id) <span class="keyword">VALUES</span> (<span class="string">'张三'</span>, <span class="number">20</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee (NAME, age, dep_id) <span class="keyword">VALUES</span> (<span class="string">'李四'</span>, <span class="number">21</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee (NAME, age, dep_id) <span class="keyword">VALUES</span> (<span class="string">'王五'</span>, <span class="number">20</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee (NAME, age, dep_id) <span class="keyword">VALUES</span> (<span class="string">'老王'</span>, <span class="number">20</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee (NAME, age, dep_id) <span class="keyword">VALUES</span> (<span class="string">'大王'</span>, <span class="number">22</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee (NAME, age, dep_id) <span class="keyword">VALUES</span> (<span class="string">'小王'</span>, <span class="number">18</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 把部门表中 id 等于 1 的部门改成 id 等于 10</span></span><br><span class="line"><span class="keyword">update</span> department <span class="keyword">set</span> id <span class="operator">=</span> <span class="number">10</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 不能直接删除主表department,必须先删除了从表</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> department;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除部门号是 2 的部门</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> department <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
          <category> 复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL-DQL语句</title>
      <link href="2020/11/18/83_MySQL-DQL%E8%AF%AD%E5%8F%A5/"/>
      <url>2020/11/18/83_MySQL-DQL%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-DQL语句"><a href="#MySQL-DQL语句" class="headerlink" title="MySQL-DQL语句"></a>MySQL-DQL语句</h1><blockquote><p>查询不会对数据库中的数据进行修改.只是一种显示数据的方式</p></blockquote><h2 id="简单查询"><a href="#简单查询" class="headerlink" title="简单查询"></a>简单查询</h2><ol><li><p>查询表所有数据</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></tbody></table></figure></li><li><p>查询指定列的数据</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段名<span class="number">1</span>, 字段名<span class="number">2</span>, 字段名<span class="number">3</span> ... <span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></tbody></table></figure><h2 id="别名查询"><a href="#别名查询" class="headerlink" title="别名查询"></a>别名查询</h2></li><li><p>对列指定别名，然后进行查询</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段名<span class="number">1</span> <span class="keyword">AS</span> 别名, 字段名<span class="number">2</span> <span class="keyword">AS</span> 别名, 字段名<span class="number">3</span> <span class="keyword">AS</span> 别名 ... <span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></tbody></table></figure></li><li><p>对列和表同时指定别名，然后进行查询</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段名<span class="number">1</span> <span class="keyword">AS</span> 别名, 字段名<span class="number">2</span> <span class="keyword">AS</span> 别名, 字段名<span class="number">3</span> <span class="keyword">AS</span> 别名 ... <span class="keyword">FROM</span> 表名 <span class="keyword">AS</span> 表别名;</span><br></pre></td></tr></tbody></table></figure></li></ol><p><strong>代码演示</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 对列指定别名，然后进行查询</span></span><br><span class="line"><span class="keyword">select</span> name <span class="keyword">as</span> <span class="string">'名字'</span>, age <span class="keyword">as</span> <span class="string">'年龄'</span> <span class="keyword">from</span> students;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 对列和表同时指定别名，然后进行查询</span></span><br><span class="line"><span class="keyword">select</span> st.name <span class="keyword">as</span> <span class="string">'姓名'</span>, st.age <span class="keyword">as</span> <span class="string">'年龄'</span> <span class="keyword">from</span> students <span class="keyword">as</span> st;</span><br></pre></td></tr></tbody></table></figure><h2 id="清除重复值"><a href="#清除重复值" class="headerlink" title="清除重复值"></a>清除重复值</h2><p>使用关键字<code>DISTINCT</code>，去除查询结果中的重复数据</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> 字段名 <span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></tbody></table></figure><p><strong>代码演示</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询指定列的所有记录，包括重复结果</span></span><br><span class="line"><span class="keyword">select</span> age <span class="keyword">from</span> human;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询指定列的所有记录，去除重复结果</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> age <span class="keyword">from</span> human;</span><br></pre></td></tr></tbody></table></figure><h2 id="查询结果参与运算"><a href="#查询结果参与运算" class="headerlink" title="查询结果参与运算"></a>查询结果参与运算</h2><ol><li><p>某列数据和固定值运算</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span> <span class="operator">+</span> 固定值 <span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></tbody></table></figure></li><li><p>某列数据和其他列数据参与运算</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span> <span class="operator">+</span> 列名<span class="number">2</span> <span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></tbody></table></figure><blockquote><p> 注意: 参与运算的必须是数值类型</p></blockquote></li></ol><p><strong>代码演示</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 将列age+5，然后再查询出来</span></span><br><span class="line"><span class="keyword">select</span> age <span class="operator">+</span> <span class="number">5</span> <span class="keyword">from</span> human;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 将id列与age列相加，再查询出来</span></span><br><span class="line"><span class="keyword">select</span> id <span class="operator">+</span> age <span class="keyword">from</span> human;</span><br></pre></td></tr></tbody></table></figure><p><strong>数据准备</strong></p><p>创建一个表格，并导入数据，用于一下代码演示使用。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建一个表格</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> students (</span><br><span class="line">id <span class="type">int</span>, <span class="comment">-- 编号</span></span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>), <span class="comment">-- 姓名</span></span><br><span class="line">    age <span class="type">int</span>, <span class="comment">-- 年龄</span></span><br><span class="line">    sex <span class="type">varchar</span>(<span class="number">5</span>), <span class="comment">-- 性别</span></span><br><span class="line">    address <span class="type">varchar</span>(<span class="number">100</span>), <span class="comment">-- 地址</span></span><br><span class="line">    math <span class="type">int</span>, <span class="comment">-- 数学</span></span><br><span class="line">    english <span class="type">int</span> <span class="comment">-- 英语</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 导入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> </span><br><span class="line">students(id,NAME,age,sex,address,math,english) </span><br><span class="line"><span class="keyword">VALUES</span> </span><br><span class="line">(<span class="number">1</span>,<span class="string">'马云'</span>,<span class="number">55</span>,<span class="string">'男'</span>,<span class="string">'杭州'</span>,<span class="number">66</span>,<span class="number">78</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">'马化腾'</span>,<span class="number">45</span>,<span class="string">'女'</span>,<span class="string">'深圳'</span>,<span class="number">98</span>,<span class="number">87</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">'马景涛'</span>,<span class="number">55</span>,<span class="string">'男'</span>,<span class="string">'香港'</span>,<span class="number">56</span>,<span class="number">77</span>),</span><br><span class="line">(<span class="number">4</span>,<span class="string">'柳岩'</span>,<span class="number">20</span>,<span class="string">'女'</span>,<span class="string">'湖南'</span>,<span class="number">76</span>,<span class="number">65</span>),</span><br><span class="line">(<span class="number">5</span>,<span class="string">'柳青'</span>,<span class="number">20</span>,<span class="string">'男'</span>,<span class="string">'湖南'</span>,<span class="number">86</span>,<span class="keyword">NULL</span>),</span><br><span class="line">(<span class="number">6</span>,<span class="string">'刘德华'</span>,<span class="number">57</span>,<span class="string">'男'</span>,<span class="string">'香港'</span>,<span class="number">99</span>,<span class="number">99</span>),</span><br><span class="line">(<span class="number">7</span>,<span class="string">'马德'</span>,<span class="number">22</span>,<span class="string">'女'</span>,<span class="string">'香港'</span>,<span class="number">99</span>,<span class="number">99</span>),</span><br><span class="line">(<span class="number">8</span>,<span class="string">'德玛西亚'</span>,<span class="number">18</span>,<span class="string">'男'</span>,<span class="string">'南京'</span>,<span class="number">56</span>,<span class="number">65</span>);</span><br></pre></td></tr></tbody></table></figure><h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><p>指定查询的条件，对查询记录进行过滤</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段名 <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 条件;</span><br></pre></td></tr></tbody></table></figure><p><strong>代码演示</strong></p><ul><li>运算符</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询 math 分数大于 80 分的学生</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students <span class="keyword">where</span> math <span class="operator">&gt;</span> <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询 english 分数小于或等于 80 分的学生</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students <span class="keyword">where</span> english <span class="operator">&lt;=</span> <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询 age 等于 20 岁的学生</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students <span class="keyword">where</span> age <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询 age 不等于 20 岁的学生，注：不等于有两种写法</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students <span class="keyword">where</span> age <span class="operator">&lt;&gt;</span> <span class="number">20</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students <span class="keyword">where</span> age <span class="operator">!=</span> <span class="number">20</span>;</span><br></pre></td></tr></tbody></table></figure><ul><li>逻辑运算符</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询 age 大于 35 且性别为男的学生(两个条件同时满足)</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students <span class="keyword">where</span> age <span class="operator">&gt;</span> <span class="number">35</span> <span class="keyword">and</span> sex <span class="operator">=</span> <span class="string">'男'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询 age 大于 35 或性别为男的学生(两个条件其中一个满足)</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students <span class="keyword">where</span> age <span class="operator">&gt;</span> <span class="number">35</span> <span class="keyword">or</span> sex <span class="operator">=</span> <span class="string">'男'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询 id 是 1 或 3 或 5 的学生</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">or</span> id <span class="operator">=</span> <span class="number">3</span> <span class="keyword">or</span> id <span class="operator">=</span> <span class="number">5</span>;</span><br></pre></td></tr></tbody></table></figure><ul><li>in 关键字</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询 id 是 1 或 3 或 5 的学生(采用in关键字)</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students <span class="keyword">where</span> id <span class="keyword">in</span>(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询 id 不是 1 或 3 或 5 的学生(采用in关键字)</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students <span class="keyword">where</span> id <span class="keyword">not</span> <span class="keyword">in</span>(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>);</span><br></pre></td></tr></tbody></table></figure><ul><li>范围查询(between…and…)</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询 english 成绩大于等于 75，且小于等于 90 的学生</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students <span class="keyword">where</span> english <span class="keyword">between</span> <span class="number">75</span> <span class="keyword">and</span> <span class="number">90</span>;</span><br></pre></td></tr></tbody></table></figure><ul><li>like 关键字</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询姓马的学生</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">'马%'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓名中包含'德'字的学生</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">'%德%'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓马，且姓名有两个字的学生</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">'马__'</span>; <span class="comment">--因为是中文，所有得用两个_，适配一个汉字</span></span><br></pre></td></tr></tbody></table></figure><ul><li>is 关键字</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询英语成绩为NULL的学生</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students <span class="keyword">where</span> english <span class="keyword">is</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询英语成绩不为NULL的学生</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students <span class="keyword">where</span> english <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br></pre></td></tr></tbody></table></figure><h2 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h2><p>通过<code>ORODER BY</code>子句，可以将查询出的结果进行排序(排序只是显示方式，不会影响数据库中数据的顺序)。</p><ul><li><p>单列排序</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段名 <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 字段<span class="operator">=</span>值 <span class="keyword">ORDER</span> <span class="keyword">BY</span> 字段名 <span class="operator">&lt;</span><span class="keyword">ASC</span> 或 <span class="keyword">DESC</span><span class="operator">&gt;</span>; <span class="comment">-- ASC:升序，默认值; DESC:降序</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>组合排序（如果有多个排序条件，则当前边的条件值一样时，才会判断第二条件）</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段名 <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 字段<span class="operator">=</span>值 <span class="keyword">ORDER</span> <span class="keyword">BY</span> 字段名<span class="number">1</span> <span class="operator">&lt;</span><span class="keyword">ASC</span> 或 <span class="keyword">DESC</span><span class="operator">&gt;</span>, 字段名<span class="number">2</span> <span class="operator">&lt;</span><span class="keyword">ASC</span> 或 <span class="keyword">DESC</span><span class="operator">&gt;</span>;</span><br></pre></td></tr></tbody></table></figure></li></ul><p><strong>代码演示</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询所有数据,使用年龄降序排序</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询所有数据,在年龄降序排序的基础上，如果年龄相同再以数学成绩升序排序</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span>, math <span class="keyword">asc</span>;</span><br></pre></td></tr></tbody></table></figure><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><p>之前我们做的查询都是横向查询，它们都是根据条件一行一行的进行判断，而使用聚合函数查询是纵向查询， 它是对一列的值进行计算，然后返回一个结果值。聚合函数会忽略空值<code> NULL</code>。</p><ul><li><p>关键字</p><table><thead><tr><th>聚合函数关键字</th><th>作用</th></tr></thead><tbody><tr><td>max(列名)</td><td>求这一列的最大值</td></tr><tr><td>min(列名)</td><td>求这一列的最小值</td></tr><tr><td>avg(列名)</td><td>求这一列的平均值</td></tr><tr><td>count(列名)</td><td>统计这一列共有多少条记录</td></tr><tr><td>sum(列名)</td><td>对这一列求总和</td></tr></tbody></table></li><li><p>语法</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 聚合函数(列名) <span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></tbody></table></figure></li><li><p>聚合函数中遇到<code>NULL</code>的解决办法</p><p>使用关键<code>IFNULL</code>，来用默认值取代<code>NULL</code>。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IFNULL(列名,默认值)</span><br></pre></td></tr></tbody></table></figure></li></ul><p><strong>代码演示</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询学生总数</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(id) <span class="string">'总人数'</span> <span class="keyword">from</span> students;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> <span class="string">'总人数'</span> <span class="keyword">from</span> students;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用 id 字段来统计数据总数，如果为 null，则使用 0 代替，这样统计的数据就不会遗漏</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(ifnull(id,<span class="number">0</span>)) <span class="keyword">from</span> students;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询年龄大于 20 的总数</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> students <span class="keyword">where</span> age <span class="operator">&gt;</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询数学成绩总分</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(math) <span class="string">'数学总分'</span> <span class="keyword">from</span> students;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询数学成绩平均分</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(math) <span class="string">'数学均分'</span> <span class="keyword">from</span> students;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询数学成绩最高分</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(math) <span class="string">'数学最高分'</span> <span class="keyword">from</span> students;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询数学成绩最低分</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">min</span>(math) <span class="string">'数学最低分'</span> <span class="keyword">from</span> students;</span><br></pre></td></tr></tbody></table></figure><h2 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h2><p>分组查询是指使用<code>GROUP BY</code>语句对查询信息进行分组，相同数据作为一组。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段<span class="number">1</span>, 字段<span class="number">2</span> ... <span class="keyword">FROM</span> 表名 <span class="keyword">GROUP</span> <span class="keyword">BY</span> 分组字段 [<span class="keyword">HAVING</span> 条件];</span><br></pre></td></tr></tbody></table></figure><p>或结合【聚合函数】一起使用</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名, 聚合函数(列名) <span class="keyword">FROM</span> 表名 <span class="keyword">GROUP</span> <span class="keyword">BY</span> 分组字段 [<span class="keyword">HAVING</span> 条件];</span><br></pre></td></tr></tbody></table></figure><blockquote><p>注意：</p><p>使用分组函数进行查询时，查询的只能是分组字段或聚合函数，查询其他则没有意义。</p></blockquote><p><strong>代码演示</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 按性别进行分组，求男生和女生数学的平均分</span></span><br><span class="line"><span class="keyword">select</span> sex, <span class="built_in">avg</span>(math) <span class="keyword">from</span> students <span class="keyword">group</span> <span class="keyword">by</span> sex;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 统计男女各有多少人</span></span><br><span class="line"><span class="keyword">select</span> sex, <span class="built_in">count</span>(id) <span class="keyword">from</span> students <span class="keyword">group</span> <span class="keyword">by</span> sex;</span><br><span class="line">或</span><br><span class="line"><span class="keyword">select</span> sex, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> students <span class="keyword">group</span> <span class="keyword">by</span> sex;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询年龄大于 25 岁的人,按性别分组,统计每组的人数</span></span><br><span class="line"><span class="keyword">select</span> sex, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> students <span class="keyword">where</span> age <span class="operator">&gt;</span> <span class="number">25</span> <span class="keyword">group</span> <span class="keyword">by</span> sex;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询年龄大于 25 岁的人，按性别分组，统计每组的人数，并只显示性别人数大于 2 的数据</span></span><br><span class="line"><span class="keyword">select</span> sex, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> <span class="string">'人数'</span> <span class="keyword">from</span> students <span class="keyword">where</span> age <span class="operator">&gt;</span> <span class="number">25</span> <span class="keyword">group</span> <span class="keyword">by</span> sex <span class="keyword">having</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">&gt;</span> <span class="number">2</span>;</span><br></pre></td></tr></tbody></table></figure><h2 id="having-与-where-的区别"><a href="#having-与-where-的区别" class="headerlink" title="having 与 where 的区别"></a>having 与 where 的区别</h2><table><thead><tr><th>子句</th><th>作用</th></tr></thead><tbody><tr><td>where子句</td><td>1. 对查询结果进行分组前，将不符合 where 条件的行去掉，即在分组之前过滤数据，即先过滤 再分组。<br> 2. where 后的条件不可以使用聚合函数<br>3. where子句必须出现在group by前面</td></tr><tr><td>having子句</td><td>1. having 子句的作用是筛选满足条件的组，即在分组之后过滤数据，即先分组再过滤。<br>2. having 后的条件可以使用聚合函数<br>3. having子句只能出现在group by后面的</td></tr></tbody></table><p><strong>面试题</strong></p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201119054405.png"></p><p>执行如下 SQL 语句<code>select product,sum(price) from orders group by product where sum(price) &gt; 30;</code>，运行结果是？</p><p><strong>答案</strong></p><p>运行有误，group by 后面不能出现 where，应使用 having</p><p><strong>准备数据</strong></p><p>往之前的students表中继续加入数据，以便下面学习使用。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> students (id, name, age, sex, address, math, english) <span class="keyword">values</span> </span><br><span class="line">(<span class="number">9</span>,<span class="string">'唐僧'</span>,<span class="number">25</span>,<span class="string">'男'</span>,<span class="string">'长安'</span>,<span class="number">87</span>,<span class="number">78</span>), (<span class="number">10</span>,<span class="string">'孙悟空'</span>,<span class="number">18</span>,<span class="string">'男'</span>,<span class="string">'花果山'</span>,<span class="number">100</span>,<span class="number">66</span>), </span><br><span class="line">(<span class="number">11</span>,<span class="string">'猪八戒'</span>,<span class="number">22</span>,<span class="string">'男'</span>,<span class="string">'高老庄'</span>,<span class="number">58</span>,<span class="number">78</span>), (<span class="number">12</span>,<span class="string">'沙僧'</span>,<span class="number">50</span>,<span class="string">'男'</span>,<span class="string">'流沙河'</span>,<span class="number">77</span>,<span class="number">88</span>), </span><br><span class="line">(<span class="number">13</span>,<span class="string">'白骨精'</span>,<span class="number">22</span>,<span class="string">'女'</span>,<span class="string">'白虎岭'</span>,<span class="number">66</span>,<span class="number">66</span>), (<span class="number">14</span>,<span class="string">'蜘蛛精'</span>,<span class="number">23</span>,<span class="string">'女'</span>,<span class="string">'盘丝洞'</span>,<span class="number">88</span>,<span class="number">88</span>);</span><br></pre></td></tr></tbody></table></figure><h2 id="截取查询"><a href="#截取查询" class="headerlink" title="截取查询"></a>截取查询</h2><p><code>LIMIT</code>是限制的意思，所以<code>LIMIT</code>的作用就是限制查询记录的条数。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名 [<span class="keyword">as</span> 别名] <span class="keyword">FROM</span> 表名 [<span class="keyword">WHERE</span>子句] [<span class="keyword">group</span> <span class="keyword">by</span>子句] [<span class="keyword">HAVING</span>子句] [<span class="keyword">ORDER</span> <span class="keyword">BY</span>子句] LIMIT <span class="keyword">offset</span>, length; </span><br><span class="line"><span class="comment">-- offset：起始行数，从 0 开始计数，如果省略，默认就是 0;  length：返回的行数</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>类似百度页面的分页公式：<code>开始的索引</code></p></blockquote><p><strong>代码演示</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询学生表中数据，从第 3 条开始显示，显示 6 条。</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students limit <span class="number">2</span>, <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询学生表中前5条数据</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students limit <span class="number">5</span>;</span><br></pre></td></tr></tbody></table></figure><h2 id="查询顺序"><a href="#查询顺序" class="headerlink" title="查询顺序"></a>查询顺序</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">字段列表</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">表名列表</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">条件列表</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">分组字段</span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">分组后条件</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">排序</span><br><span class="line">LIMIT</span><br><span class="line">分页限定</span><br></pre></td></tr></tbody></table></figure><h2 id="数据库备份和还原"><a href="#数据库备份和还原" class="headerlink" title="数据库备份和还原"></a>数据库备份和还原</h2><h3 id="备份的应用场景"><a href="#备份的应用场景" class="headerlink" title="备份的应用场景"></a>备份的应用场景</h3><p>在服务器进行数据传输、数据存储和数据交换，就有可能产生数据故障。比如发生意外停机或存储介质损坏。 这时，如果没有采取数据备份和数据恢复手段与措施，就会导致数据的丢失，造成的损失是无法弥补与估量的。</p><h3 id="备份与还原的语句"><a href="#备份与还原的语句" class="headerlink" title="备份与还原的语句"></a>备份与还原的语句</h3><ul><li><p>备份格式：（DOS 下，未登录的时候）</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u用户名 -p密码 数据库名 &gt; 文件路径</span><br></pre></td></tr></tbody></table></figure></li><li><p>还原格式：（mysql 中的命令，需要登录后才可以操作）</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">USE 数据库;</span><br><span class="line">SOURCE 导入文件的路径;</span><br></pre></td></tr></tbody></table></figure></li></ul><p><strong>代码演示</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 备份数据库liboshuai中的数据到 d:/one.sql 文件中</span></span><br><span class="line">mysqldump <span class="operator">-</span>uroot <span class="operator">-</span>p密码 liboshuai <span class="operator">&gt;</span> d:<span class="operator">/</span>one.sql</span><br><span class="line"><span class="comment">-- 导出结果：数据库中的所有表和数据都会导出成 SQL 语句</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 还原 liboshuai 数据库中的数据 (还原的时候需要先登录 MySQL,并选中对应的数据库)</span></span><br><span class="line">source d:<span class="operator">/</span>one.sql;</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
          <category> 复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL-DML语句</title>
      <link href="2020/11/18/82_MySQL-DML%E8%AF%AD%E5%8F%A5/"/>
      <url>2020/11/18/82_MySQL-DML%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-DML语句"><a href="#MySQL-DML语句" class="headerlink" title="MySQL-DML语句"></a>MySQL-DML语句</h1><h2 id="DML操作表中的数据"><a href="#DML操作表中的数据" class="headerlink" title="DML操作表中的数据"></a>DML操作表中的数据</h2><h3 id="插入字段"><a href="#插入字段" class="headerlink" title="插入字段"></a>插入字段</h3><ol><li><p>方式一：(这种键值对的方式，适合给所有字段赋值，也适合给部分字段赋值)</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 (字段名<span class="number">1</span>, 字段名<span class="number">2</span>, 字段名<span class="number">3.</span>..) <span class="keyword">VALUES</span> (值<span class="number">1</span>, 值<span class="number">2</span>, 值<span class="number">3.</span>..);</span><br></pre></td></tr></tbody></table></figure></li><li><p>方式二：（这种匿名直接赋值的方式，只能完全给所有的字段进行赋值）</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 <span class="keyword">VALUES</span> (值<span class="number">1</span>, 值<span class="number">2</span>, 值<span class="number">3.</span>..);</span><br></pre></td></tr></tbody></table></figure><blockquote><p>注意事项：</p><ol><li>插入的数据应与字段的数据类型相同</li><li>数据的大小应在列的规定范围内，例如：不能将一个长度为 80 的字符串加入到长度为 40 的列中。</li><li>在 values 中列出的数据位置必须与被加入的列的排列位置相对应。在 mysql 中可以使用 value，但不建议使 用，功能与 values 相同。</li><li>字符和日期型数据应包含在单引号中。MySQL 中也可以使用双引号做为分隔符。</li><li>不指定列或使用 null，表示插入空值。</li></ol></blockquote></li></ol><p><strong>代码演示</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 给所有的字段都赋值</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> students (id, name, age, gender) <span class="keyword">values</span> (<span class="number">1</span>, <span class="string">'Jason'</span>, <span class="number">21</span>, <span class="string">'男'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 给所有的字段匿名直接赋值</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> students <span class="keyword">values</span> (<span class="number">2</span>, <span class="string">'Charlie'</span>, <span class="number">22</span>, <span class="string">'男'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 给部分字段赋值</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> students (id, gender) <span class="keyword">values</span> (<span class="number">3</span>, <span class="string">'女'</span>);</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="蠕虫复制"><a href="#蠕虫复制" class="headerlink" title="蠕虫复制"></a>蠕虫复制</h3><p><strong>概述</strong></p><p>将一张已经存在的表中的数据复制到另一张表中，即为蠕虫复制。</p><p><strong>格式</strong></p><ul><li><p>将【表名1】中的所有的列复制到【表名2】中</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名<span class="number">2</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名<span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure></li><li><p>将【表名1】中的部分的列复制到【表名2】中</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名<span class="number">2</span> (字段名<span class="number">1</span>, 字段名<span class="number">2</span>) <span class="keyword">SELECT</span> 字段名<span class="number">1</span>, 字段名<span class="number">2</span> <span class="keyword">FROM</span> 表名<span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure></li></ul><p><strong>代码演示</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 将students表中所有的数据都添加到human表中（human表结构与students表结构相同）</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> human <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students;</span><br></pre></td></tr></tbody></table></figure><h3 id="更新表记录"><a href="#更新表记录" class="headerlink" title="更新表记录"></a>更新表记录</h3><ol><li><p>直接修改同一字段名下的所有值</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> 表名 <span class="keyword">SET</span> 字段名 <span class="operator">=</span> 字段值;</span><br></pre></td></tr></tbody></table></figure></li><li><p>满足条件时，修改字段值</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> 表名 <span class="keyword">SET</span> 字段名 <span class="operator">=</span> 字段值 <span class="keyword">where</span> 字段名 <span class="operator">=</span> 字段值;</span><br></pre></td></tr></tbody></table></figure></li></ol><p><strong>代码演示</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 将students表字段名为age的值都更新为30</span></span><br><span class="line"><span class="keyword">update</span> students <span class="keyword">set</span> age <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 将students表字段名为name，且满足id=2的值更新为June</span></span><br><span class="line"><span class="keyword">UPDATE</span> students <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">'June'</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></tbody></table></figure><h3 id="删除表记录"><a href="#删除表记录" class="headerlink" title="删除表记录"></a>删除表记录</h3><ol><li><p>直接删除表中的所有记录</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></tbody></table></figure></li><li><p>删除表中满足条件的记录</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> FROME 表名 <span class="keyword">WHERE</span> 字段名 <span class="operator">=</span> 字段值;</span><br></pre></td></tr></tbody></table></figure></li><li><p>使用truncate删除表中所有的记录（当需要删除所有的数据时，推荐使用）</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> 表名;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>注：truncate 相当于删除表的结构，再创建一张表。</p></blockquote></li></ol><p><strong>代码演示</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 直接删除表students中的所有记录</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> students;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除表中id=3的记录</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> students <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用truncate删除表中所有的记录</span></span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> students;</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
          <category> 复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL-DDL语句</title>
      <link href="2020/11/17/81_MySQL-DDL%E8%AF%AD%E5%8F%A5/"/>
      <url>2020/11/17/81_MySQL-DDL%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-DDL语句"><a href="#MySQL-DDL语句" class="headerlink" title="MySQL-DDL语句"></a>MySQL-DDL语句</h1><h2 id="DDL操作数据库"><a href="#DDL操作数据库" class="headerlink" title="DDL操作数据库"></a>DDL操作数据库</h2><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><ol><li><p>创建数据库</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE 数据库名;</span><br></pre></td></tr></tbody></table></figure></li><li><p>判断数据是否存在，不存在则创建数据库</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> 数据库名;</span><br></pre></td></tr></tbody></table></figure></li><li><p>创建数据库并指定其默认字符集</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE 数据库名 <span class="type">CHARACTER</span> <span class="keyword">SET</span> 字符集名;</span><br></pre></td></tr></tbody></table></figure></li></ol><p><strong>代码演示</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 直接创建一个名为dataOne的数据库</span></span><br><span class="line"><span class="keyword">create</span> database dataone;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 判断数据库datatwo是否存在，如果不存在，则创建一个名为dataTwo的数据库</span></span><br><span class="line"><span class="keyword">create</span> database if <span class="keyword">not</span> <span class="keyword">exists</span> datatwo;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建一个名为dataThree、默认字符集为gbk的数据库</span></span><br><span class="line"><span class="keyword">create</span> database datathree <span class="keyword">default</span> <span class="type">character</span> <span class="keyword">set</span> gbk;</span><br></pre></td></tr></tbody></table></figure><h3 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h3><ol><li><p>查看总共有哪些数据库</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> DATABASES;</span><br></pre></td></tr></tbody></table></figure></li><li><p>查看指定数据库的定义信息</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> DATABASE 数据库名;</span><br></pre></td></tr></tbody></table></figure></li></ol><p><strong>代码演示</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看所有的数据库</span></span><br><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看名字为mysql的数据库的定义信息</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> database mysql;</span><br></pre></td></tr></tbody></table></figure><h3 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h3><p>修改数据库的默认字符集</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> DATABASE 数据库名 <span class="keyword">DEFAULT</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> 字符集名;</span><br></pre></td></tr></tbody></table></figure><p><strong>代码演示</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 修改名字为liboshuai的数据库的默认字符集为utf8</span></span><br><span class="line"><span class="keyword">alter</span> database liboshuai <span class="keyword">default</span> <span class="type">character</span> <span class="keyword">set</span> utf8;</span><br></pre></td></tr></tbody></table></figure><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><p>删除指定的数据库。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE 数据库名;</span><br></pre></td></tr></tbody></table></figure><p><strong>代码演示</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除名字为data的数据库</span></span><br><span class="line"><span class="keyword">drop</span> database data;</span><br></pre></td></tr></tbody></table></figure><h3 id="使用数据库"><a href="#使用数据库" class="headerlink" title="使用数据库"></a>使用数据库</h3><ol><li><p>查看正在使用的数据库</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATABASE();</span><br></pre></td></tr></tbody></table></figure></li><li><p>切换到、并使用指定的数据库</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USE 数据库名;</span><br></pre></td></tr></tbody></table></figure></li></ol><p><strong>代码演示</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看正在使用的数据库</span></span><br><span class="line"><span class="keyword">select</span> database();</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 切换到、并使用名为mysql的数据库</span></span><br><span class="line">use mysql;</span><br></pre></td></tr></tbody></table></figure><p><strong>面试题</strong></p><ul><li>题目：在MySQL数据库软件中，有如下三个数据库：<code>test1</code>、<code>test2</code>、<code>test3</code>。登录数据库之后，输入语句：<code>select database test2</code>，运行结果是什么？</li><li>答案：这是一条错误的语句，如果要选中名为<code>test2</code>的数据库，应用使用语句：<code>USE test2</code>。</li></ul><h2 id="DDL操作表结构"><a href="#DDL操作表结构" class="headerlink" title="DDL操作表结构"></a>DDL操作表结构</h2><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><p>创建一个指定名字、并包含指定字段的表</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名 (</span><br><span class="line">字段名<span class="number">1</span> 字段类型<span class="number">1</span>,</span><br><span class="line">字段名<span class="number">2</span> 字段类型<span class="number">2</span></span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><p><strong>代码演示</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建一个名为student、包含id，name，birthday字段的表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student (</span><br><span class="line">id <span class="type">int</span>, <span class="comment">-- 字段名：id，字段类型：整数</span></span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>), <span class="comment">-- 字段名：name，字段类型：可变字符串，容量为20</span></span><br><span class="line">    birthday <span class="type">date</span> <span class="comment">-- 字段名：birthday，字段类型：日期</span></span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><h3 id="查看表"><a href="#查看表" class="headerlink" title="查看表"></a>查看表</h3><ol><li><p>查看正在使用的数据库中所有的表</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> TABLES;</span><br></pre></td></tr></tbody></table></figure></li><li><p>查看指定表的结构</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DESC</span> 表名;</span><br></pre></td></tr></tbody></table></figure></li><li><p>查看指定表的创建SQL语句（也可以当做是详细信息）</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名;</span><br></pre></td></tr></tbody></table></figure></li></ol><p><strong>代码演示</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看正在使用的数据库中所有的表</span></span><br><span class="line"><span class="keyword">show</span> tables;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看名为dept表的结构</span></span><br><span class="line"><span class="keyword">desc</span> dept;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看创建student表的SQL语句</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> student;</span><br></pre></td></tr></tbody></table></figure><h3 id="复制表"><a href="#复制表" class="headerlink" title="复制表"></a>复制表</h3><p>快速创建一个表结构相同的表</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 新表名 <span class="keyword">LIKE</span> 旧表名;</span><br></pre></td></tr></tbody></table></figure><p><strong>代码演示</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 快速创建一个与student表结构相同的human表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> human <span class="keyword">like</span> student;</span><br></pre></td></tr></tbody></table></figure><h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><ol><li><p>直接删除指定名字的表。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> 表名;</span><br></pre></td></tr></tbody></table></figure></li><li><p>判断此表存在与否，如果存在则删除此表。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> 表名;</span><br></pre></td></tr></tbody></table></figure></li></ol><p><strong>代码演示</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 直接删除表human</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> human;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 如果表student存在，则删除表student</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> student;</span><br></pre></td></tr></tbody></table></figure><h3 id="修改表结构"><a href="#修改表结构" class="headerlink" title="修改表结构"></a>修改表结构</h3><ol><li><p>添加新的字段行</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> 字段名 字段类型;</span><br></pre></td></tr></tbody></table></figure></li><li><p>删除字段行</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> 字段名;</span><br></pre></td></tr></tbody></table></figure></li><li><p>同时修改字段名、类型</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 CHANGE 旧字段名 新字段名 新字段类型;</span><br></pre></td></tr></tbody></table></figure></li><li><p>仅修改字段类型</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 MODIFY 字段名 新类型;</span><br></pre></td></tr></tbody></table></figure></li><li><p>修改表名</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RENAME <span class="keyword">TABLE</span> 旧表名 <span class="keyword">TO</span> 新表名;</span><br></pre></td></tr></tbody></table></figure></li><li><p>修改表的字符集</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="type">CHARACTER</span> <span class="keyword">SET</span> 字符集;</span><br></pre></td></tr></tbody></table></figure></li></ol><p><strong>代码演示</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 添加一行新的名为age,类型为int(3)的字段</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">add</span> age <span class="type">int</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除字段名为birthday的这一行</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">drop</span> birthday;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改名为age的字段，新字段名为remark，类型为varchar(5)</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student change age remark <span class="type">varchar</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改名为remark的字段，新类型为int(3)</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student modify remark <span class="type">int</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改名为student的表，新表名为person</span></span><br><span class="line">rename <span class="keyword">table</span> student <span class="keyword">to</span> person;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改person表的字符集为gbk</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> person <span class="type">character</span> <span class="keyword">set</span> gbk;</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
          <category> 复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL基础</title>
      <link href="2020/11/17/80_MySQL%E5%9F%BA%E7%A1%80/"/>
      <url>2020/11/17/80_MySQL%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="MySql基础"><a href="#MySql基础" class="headerlink" title="MySql基础"></a>MySql基础</h1><h2 id="Java中数据储存方式对比"><a href="#Java中数据储存方式对比" class="headerlink" title="Java中数据储存方式对比"></a>Java中数据储存方式对比</h2><table><thead><tr><th align="center">储存方式</th><th align="center">优点</th><th align="center">缺点</th></tr></thead><tbody><tr><td align="center">内存</td><td align="center">速度快</td><td align="center">不能永久保存，数据的储存是临时的</td></tr><tr><td align="center">文件</td><td align="center">数据可永久保存</td><td align="center">操作数据不方便</td></tr><tr><td align="center">数据库</td><td align="center">1. 数据可永久保存<br>2.查询速度快<br>3. 对数据的管理方便</td><td align="center">占用资源，有的数据库需要购买</td></tr></tbody></table><h2 id="什么是数据库"><a href="#什么是数据库" class="headerlink" title="什么是数据库"></a>什么是数据库</h2><ul><li>存储数据的仓库</li><li>本质上是一个文件系统，还是以文件的方式存在在服务器的电脑上的。</li><li>使用通过的【SQL语句】对所有的关系型数据库进行数据管理。</li></ul><h2 id="常见的数据库"><a href="#常见的数据库" class="headerlink" title="常见的数据库"></a>常见的数据库</h2><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201117165517.png"></p><p>上面是市场上前20位的数据库排行榜，下面我对我们工作中可能会接触到的一些数据库进行简单的介绍。</p><ul><li><strong>MySql</strong>：开源免费的数据库，小型的数据库。后来 Sun 公司收购了 MySQL，而 Sun 公司又被 Oracle 收购，现隶属于Oracle公司。MySQL6.x 版本也开始收费。</li><li><strong>Oracle</strong>：付费的大型数据库，价格较高，Oracle公司的产品。</li><li><strong>DB2</strong>：IBM公司的付费数据库产品，常用于银行系统中。</li><li><strong>SQL Server</strong>：MicroSoft公司付费的中型数据库。大学中教科书使用的数据库，C#、net等语言常使用。</li><li><strong>SQLite</strong>：嵌入式的小型数据库，应用在手机端，如：Android。</li></ul><h2 id="MySql的安装与卸载"><a href="#MySql的安装与卸载" class="headerlink" title="MySql的安装与卸载"></a>MySql的安装与卸载</h2><p><a href="https://www.jianshu.com/p/c402c563d81e">MySQL5.7下载、安装和配置 - 简书 (jianshu.com)</a></p><p><a href="https://www.cnblogs.com/suixue/p/4524825.html">卸载mysql时，如何卸载干净！ - 隋雪儿吖 - 博客园 (cnblogs.com)</a></p><h2 id="MySql启动与登录"><a href="#MySql启动与登录" class="headerlink" title="MySql启动与登录"></a>MySql启动与登录</h2><h3 id="启动MySql"><a href="#启动MySql" class="headerlink" title="启动MySql"></a>启动MySql</h3><p>MySQL 服务器启动方式有两种：</p><ul><li><p><strong>通过服务的方式自动启动</strong></p><ol><li><p>通过【windows powerShell】输入命令<code>services.msc</code>，打开【服务】。</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201117170958.png"></p></li><li><p>在【服务】窗口中，输入<code>m</code>找到【MySql】一项，并将【启动类型】设置为【自动】。</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201117171212.png"></p></li></ol></li><li><p><strong>手动启动的方式</strong></p><ol><li><p>以【管理员】的方式打开【windows powerShell】</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201117171459.png"></p></li><li><p>输入命令<code>net start &lt;mysql服务名称&gt;</code>，启动【MySql】服务。如果需要手动关闭，输入<code>net stop &lt;mysql服务名称&gt;</code>既可。</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201117171826.png"></p></li></ol></li></ul><h3 id="登录MySql"><a href="#登录MySql" class="headerlink" title="登录MySql"></a>登录MySql</h3><p>MySQL 是一个需要账户名密码登录的数据库，登陆后使用，它提供了一个默认的 root 账号，使用安装时设置的密码即可登录。</p><ol><li><p><strong>登录格式一</strong>：输入<code>mysql -u用户名 -p密码</code>，直接回车既可（登录失败，可以为用户名或密码加上””）。</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201117174133.png"></p></li><li><p><strong>登录格式二</strong>：输入<code>mysql -u用户名 -p</code>回车，然后更安全的输入密码，最后回车既登录（登录失败，可以为用户名加上””）。</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201117172609.png"></p></li><li><p><strong>登录格式三</strong>：输入<code>mysql -h数据库ip地址 -u用户名 -p密码</code>，然后回车（登录失败，可以为ip地址、用户名或密码加上””）。</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201117173225.png"></p></li><li><p><strong>登录格式四</strong>：输入<code>mysql --host=数据库ip地址 --user=用户名 --password=密码</code>，然后回车（登录失败，可以为ip地址、用户名或密码加上””）。</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201117174305.png"></p></li></ol><h3 id="退出Mysql"><a href="#退出Mysql" class="headerlink" title="退出Mysql"></a>退出Mysql</h3><ol><li><p><strong>退出格式一</strong>：输入<code>exit</code>，然后回车既可</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201117174600.png"></p></li><li><p><strong>退出格式二</strong>：输入<code>quit</code>，然后回车既可</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201117174647.png"></p></li></ol><h2 id="MySql目录结构"><a href="#MySql目录结构" class="headerlink" title="MySql目录结构"></a>MySql目录结构</h2><table><thead><tr><th align="left">MySql下的目录或文件</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">bin</td><td align="left">里面储存着所有MySql可执行的文件，如：mysql.exe</td></tr><tr><td align="left">bin/MySQLInstanceConfig.exe</td><td align="left">数据库的配置向导，在安装时出现的内容</td></tr><tr><td align="left">data</td><td align="left">MySql自带的数据库所在的目录</td></tr><tr><td align="left">my.ini</td><td align="left">mysql 的配置文件，一般不建议去修改。</td></tr><tr><td align="left">C:\ProgramData\MySQL\MySQL Server 5.5\data</td><td align="left">我们自己创建的数据库所在的文件夹</td></tr></tbody></table><h2 id="数据库管理系统、数据库和表的关系"><a href="#数据库管理系统、数据库和表的关系" class="headerlink" title="数据库管理系统、数据库和表的关系"></a>数据库管理系统、数据库和表的关系</h2><ol><li>一个数据库服务器包含多个数据库</li><li>一个数据库包含多张表</li><li>一张表包含多条记录</li></ol><h2 id="MySql数据类型"><a href="#MySql数据类型" class="headerlink" title="MySql数据类型"></a>MySql数据类型</h2><h3 id="常用的数据类型"><a href="#常用的数据类型" class="headerlink" title="常用的数据类型"></a>常用的数据类型</h3><table><thead><tr><th align="center">类型名称</th><th align="center">类型说明</th></tr></thead><tbody><tr><td align="center"><strong>int</strong></td><td align="center">整型</td></tr><tr><td align="center"><strong>double</strong></td><td align="center">浮点型</td></tr><tr><td align="center"><strong>varchar</strong></td><td align="center">字符串型</td></tr><tr><td align="center"><strong>date</strong></td><td align="center">日期类型。<br>格式为<code>yyyy-MM-dd</code>，只有年月日，没有时分秒</td></tr></tbody></table><h3 id="详细的数据类型"><a href="#详细的数据类型" class="headerlink" title="详细的数据类型"></a>详细的数据类型</h3><table><thead><tr><th align="center">类型名称</th><th align="center">类型说明</th></tr></thead><tbody><tr><td align="center"><strong>tinyint</strong></td><td align="center">微整型：很小的整数（占8位二进制）</td></tr><tr><td align="center"><strong>smallint</strong></td><td align="center">小整型：小的整数（占16位二进制）</td></tr><tr><td align="center"><strong>mediumint</strong></td><td align="center">中整型：中等长度的整数（占24位二进制）</td></tr><tr><td align="center"><strong>int（integer）</strong></td><td align="center">整型：整数类型（占32位二进制）</td></tr><tr><td align="center"><strong>float</strong></td><td align="center">单精度浮点数，占4个字节</td></tr><tr><td align="center"><strong>double</strong></td><td align="center">双精度浮点数，占8个字节</td></tr><tr><td align="center"><strong>time</strong></td><td align="center">表示时间类型</td></tr><tr><td align="center"><strong>date</strong></td><td align="center">表示日期类型</td></tr><tr><td align="center"><strong>datetime</strong></td><td align="center">同时可以表示日期和时间类型</td></tr><tr><td align="center"><strong>char（m）</strong></td><td align="center">固定长度的字符串，无论使用几个字符串都占满全部，M为<code>0~255</code>之间的整数</td></tr><tr><td align="center"><strong>varchar（m）</strong></td><td align="center">可变长度的字符串，使用几个字符串就占用几个，M为<code>0~65535</code>之间的整数</td></tr><tr><td align="center"><strong>tinyblob</strong></td><td align="center">允许长度<code>0~255</code>字节</td></tr><tr><td align="center"><strong>blob</strong></td><td align="center">允许长度<code>0~65535</code>字节</td></tr><tr><td align="center"><strong>mediumblob</strong></td><td align="center">允许长度<code>0~167772150</code>字节</td></tr><tr><td align="center"><strong>longblob</strong></td><td align="center">允许长度<code>0~4294967295</code>字节</td></tr><tr><td align="center"><strong>tinytext</strong></td><td align="center">允许长度<code>0~255</code>字节</td></tr><tr><td align="center"><strong>text</strong></td><td align="center">允许长度<code>0~65535</code>字节</td></tr><tr><td align="center"><strong>mediumtext</strong></td><td align="center">允许长度<code>0~167772150</code>字节</td></tr><tr><td align="center"><strong>longtext</strong></td><td align="center">允许长度<code>0~4294967295</code>字节</td></tr></tbody></table><h2 id="MySQL运算符"><a href="#MySQL运算符" class="headerlink" title="MySQL运算符"></a>MySQL运算符</h2><table><thead><tr><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>&gt;、&lt;、&lt;=、&gt;=、=、&lt;&gt;</td><td>&lt;&gt;在 SQL 中表示不等于，在 mysql 中也可以使用!= 没有==</td></tr><tr><td>BETWEEN…AND</td><td>在一个范围之内，如：between 100 and 200 相当于条件在 100 到 200 之间，包头又包尾</td></tr><tr><td>IN(集合)</td><td>集合表示多个值，使用逗号分隔</td></tr><tr><td>LIKE ‘张%</td><td>模糊查询（%匹配任意多个字符串，_匹配一个字符）</td></tr><tr><td>IS NULL</td><td>查询某一列为 NULL 的值，注：不能写=NULL</td></tr><tr><td>and 或 &amp;&amp;</td><td>与，SQL 中建议使用前者，后者并不通用。</td></tr><tr><td>or 或 ||</td><td>或</td></tr><tr><td>not 或 ！</td><td>非</td></tr></tbody></table><h2 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h2><h3 id="SQL概述"><a href="#SQL概述" class="headerlink" title="SQL概述"></a>SQL概述</h3><ol><li>Structured Query Language——结构化查询语言</li><li>通用的数据库操作语言，是一种所有关系型数据库的查询规范，不同的数据库都支持。</li><li>但不同的数据库 SQL 语句有一些区别。</li></ol><h3 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h3><p>SQL语句粗略的可以分为四大类：</p><table><thead><tr><th>分类</th><th>作用</th></tr></thead><tbody><tr><td>数据定义语言<strong>DDL</strong>（Data Definition Language）</td><td>用来创建数据库中的各种对象—–表、视图、索引、同义词、聚簇</td></tr><tr><td>数据操纵语言<strong>DML</strong>（Data Manipulation Language）</td><td>对表中的记录操作——增、删、改。</td></tr><tr><td>数据查询语言<strong>DQL</strong>（Data Query Language）</td><td>对表中信息的进行查询操作</td></tr><tr><td>数据控制语言<strong>DCL</strong>（Data Control Language）</td><td>用来授予或回收访问数据库的某种特权，并控制数据库操纵事务发生的时间及效果，对数据库实行监视等。</td></tr></tbody></table><h3 id="Sql语法"><a href="#Sql语法" class="headerlink" title="Sql语法"></a>Sql语法</h3><ul><li>每条语句以分号结尾，如果在 SQLyog 中不是必须加的。</li><li>SQL 中不区分大小写，关键字中认为大写和小写是一样的</li><li>注释有三种格式：<ol><li><code>-- </code>，这是单行注释，注意<code>--</code>一定要加空格。</li><li><code>#</code>，这也是单行注释，也是MySql特有的。</li><li><code>/* */</code>，这是一个多行注释。</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
          <category> 复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注解</title>
      <link href="2020/11/16/79_%E6%B3%A8%E8%A7%A3/"/>
      <url>2020/11/16/79_%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><strong>注解</strong>（Annotation），也叫元数据。一种代码级别的说明。它是JDK1.5及以后版本引入的一个特性，与类、接口、枚举是在同一个层次。它可以声明在包、类、字段、方法、局部变量、方法参数等的前面，用来对这些元素进行说明，注释。</p><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@注解名称</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br></pre></td></tr></tbody></table></figure><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><h3 id="编写文档"><a href="#编写文档" class="headerlink" title="编写文档"></a>编写文档</h3><p>通过代码里标识的注解生成文档【生成文档】</p><p><strong>使用演示</strong></p><ol><li>编写需要抽取javadoc的代码</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.liboshuai.study;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注释javadoc演示</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 李博帅</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>{</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算两数之和</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a 整数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b 整数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个整数之和</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li><p>使用<code>javadoc java文件</code>命令抽取注解，生成文档。</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201116104800.png"></p></li><li><p>查看生成的注解文档</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201116104914.png"></p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201116104927.png"></p></li></ol><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>通过代码里标识的注解对代码进行分析【使用反射】</p><h3 id="编译检查"><a href="#编译检查" class="headerlink" title="编译检查"></a>编译检查</h3><p>通过代码里标识的注解让编译器能够实现基本的编译检查【例如：Override】</p><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.liboshuai.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//如果下面被注解的方法不是重写的父类/父接口的方法，则编译器会报错</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person{"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="常见的预定义注解"><a href="#常见的预定义注解" class="headerlink" title="常见的预定义注解"></a>常见的预定义注解</h2><ul><li><p><code>@Override</code>：检测被该注解标注的方法是否是继承自父类（父接口）。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.liboshuai.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//如果下面被注解的方法不是重写的父类/父接口的方法，则编译器会报错</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person{"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p><code>@Deprecated</code>：被注解标注的内容，表示为已过时</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.liboshuai.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Deprecated</span><span class="comment">//已经过时的方法，为了兼容低版本</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub01</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//新版本，用来替代上面已经过时的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub02</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (a &gt; b) {</span><br><span class="line">            <span class="keyword">return</span> a - b;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> b - a;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Demo d = <span class="keyword">new</span> Demo();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//调用被@Deprecated注解标注的方法</span></span><br><span class="line">        <span class="keyword">int</span> num01 = d.sub01(<span class="number">1</span>,<span class="number">2</span>);<span class="comment">//在sub01上有一道横线，表示已过时</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//调用新版本的方法</span></span><br><span class="line">        <span class="keyword">int</span> num02 = d.sub02(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p><code>SuppressWarnings</code>：压制警告。（一般都直接在类上，使用<code>@SuppressWarnings("all")</code>来压制类中所有的警告）</p><ul><li><p>使用注解前，编译器会有各种警告提示</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201116112624.png"></p></li><li><p>使用注解后，各种黄色的警告提示就消失了</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201116112605.png"></p></li></ul></li></ul><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><h3 id="格式-1"><a href="#格式-1" class="headerlink" title="格式"></a>格式</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//public @interface 注解名称{}</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyNote {</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h3><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201116171529.png"></p><p>我们先将上面自定义的注解代码进行一下编译，然后再将生成的<code>class</code>文件进行一下反编译。得到了下面的结果：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">top</span>.<span class="title">liboshuai</span>.<span class="title">study</span>.<span class="title">MyNote</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">annotation</span>.<span class="title">Annotation</span> </span>{</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>所以我们可以得出注解的本质就是一个接口，而该接口默认继承<code>java.lang.annotation.Annotation</code>这个父接口。</p><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>在我们自定义的注解接口中的抽象方法，我们也称它们为属性。因为在使用注解时，会像属性一样直接用<code>=</code>给它们赋值。关于注解的属性，有下面几点要求：</p><ol><li><p>方法的返回值只能是下列类型其中之一：</p><ul><li>基本数据</li><li><code>String</code></li><li>枚举</li><li>以上数据类型的数组形式</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.liboshuai.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyNote {</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//返回值为基本数据类型</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">method02</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">long</span> <span class="title">method03</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">float</span> <span class="title">method04</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回值为String类型</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">method01</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//返回值为枚举</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Season <span class="title">method5</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//返回值为基本数据的数组形式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span>[] method06();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">long</span>[] method07();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">float</span>[] method08();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//返回值为String数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> String[] method09();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//返回值为枚举数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Season[] method10();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>在注解接口中定义了哪些属性，使用时就需要给哪些属性赋值。</p><ul><li><p>自定义的注解接口</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.liboshuai.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyNote {</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">age</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function">Season <span class="title">season</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>使用注解</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.liboshuai.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用注解时，需要给定义的属性逐个赋值</span></span><br><span class="line">    <span class="meta">@MyNote(name = "Jason", age = 21, season = Season.Spring)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><p><strong>特殊情况</strong>：</p><ul><li><p>如果定义属性时，使用<code>default</code>关键字给属性默认初始化值。则在使用注解时，可以不进行属性的赋值。</p><p>自定义的注解接口</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.liboshuai.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyNote {</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">age</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用default关键字给属性默认初始化值</span></span><br><span class="line">    <span class="function">Season <span class="title">season</span><span class="params">()</span> <span class="keyword">default</span> Season.Spring</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>使用注解</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.liboshuai.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用注解时，可以不给season赋值，而采用默认值</span></span><br><span class="line">    <span class="meta">@MyNote(name = "Jason", age = 21)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>如果只有一个属性需要赋值，并且属性的名称是<code>value</code>。则属性名可以省略，直接写入值既可。</p><p>自定义的注解接口</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.liboshuai.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyNote {</span><br><span class="line"></span><br><span class="line">    <span class="comment">//只有一个属性，且属性名为value</span></span><br><span class="line">    String[] value();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>使用注解</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.liboshuai.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">//省略属性名，直接写入值</span></span><br><span class="line">    <span class="meta">@MyNote({"one","two","three"})</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>属性为数组，进行赋值时使用<code>{}</code>赋值。但如果只赋予一个值，则<code>{}</code>可以省略</p><p>自定义的注解接口</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.liboshuai.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyNote {</span><br><span class="line">    </span><br><span class="line">    String[] value();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span>[] age();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>使用注解</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.liboshuai.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@MyNote(value = {"one","two","three"},age = 21)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul></li></ol><h2 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>用于描述注解的注解。</p><h3 id="Target：描述注解能够作用的位置"><a href="#Target：描述注解能够作用的位置" class="headerlink" title="@Target：描述注解能够作用的位置"></a>@Target：描述注解能够作用的位置</h3><ul><li><p><code>@Target</code>注解接口的源代码分析</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.ANNOTATION_TYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Target {</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns an array of the kinds of elements an annotation type</span></span><br><span class="line"><span class="comment">     * can be applied to.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> an array of the kinds of elements an annotation type</span></span><br><span class="line"><span class="comment">     * can be applied to</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ElementType[] value();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>从源代码中可以看出，<code>@Target</code>注解是用一个名为<code>value</code>属性来接收<code>ElementType</code>数组的数据类型，从而来规定注解能够作用的位置。</p></li><li><p><code>ElementType</code>源代码分析</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">ElementType</span> </span>{</span><br><span class="line">    <span class="comment">/** Class, interface (including annotation type), or enum declaration */</span></span><br><span class="line">    TYPE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Field declaration (includes enum constants) */</span></span><br><span class="line">    FIELD,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Method declaration */</span></span><br><span class="line">    METHOD,</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>从源代码中可以看出，<code>ElementType</code>数组其实是一个枚举数组。而我们常用到的属性值，就是前三个。下面我分别举例说明前三个属性值的作用：</p><ol><li><code>TYPE</code>：赋予<code>ElementType.Type</code>此值，表示被注解的注解只能作用于——类、接口(包括注释类型)或枚举声明。</li><li><code>FIELD</code>：赋予<code>ElementType.FIELD</code>此值，表示被注解的注解只能作用于——属性声明(包括枚举常量)</li><li><code>METHOD</code>：赋予<code>ElementType.METHOD</code>此值，表示被注解的注解只能作用于——方法声明</li></ol></li><li><p>使用演示</p><p>自定义注解接口</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.liboshuai.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">//规定MyNote这个注解，只能作用于——类、接口(包括注释类型)或枚举声明 and 方法声明</span></span><br><span class="line"><span class="meta">@Target({ElementType.TYPE,ElementType.METHOD})</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyNote {</span><br><span class="line"></span><br><span class="line">    String[] value();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[] age();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>使用注解</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.liboshuai.study;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Class上可以使用注解@MyNote</span></span><br><span class="line"><span class="meta">@MyNote(value = {"one","two"}, age = {21,22})</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Field上不能使用注解@MyNote</span></span><br><span class="line">    <span class="keyword">boolean</span> gender;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Method上也可以使用注解@MyNote</span></span><br><span class="line">    <span class="meta">@MyNote(value = "one", age = 21)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="Retention：描述注解被保留的阶段"><a href="#Retention：描述注解被保留的阶段" class="headerlink" title="Retention：描述注解被保留的阶段"></a>Retention：描述注解被保留的阶段</h3><ul><li><p>注解<code>@Retention</code>的接口源代码分析</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.ANNOTATION_TYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Retention {</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the retention policy.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the retention policy</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">RetentionPolicy <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>从源代码中可以看出，<code>@Retention</code>注解通过属性<code>value</code>接收数据类型为枚举<code>RetentionPolicy</code>来确定被修饰的注解被保留的阶段。</p></li><li><p>属性的类型<code>RetentionPolicy</code>枚举源代码分析</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">RetentionPolicy</span> </span>{</span><br><span class="line"></span><br><span class="line">    SOURCE,</span><br><span class="line"></span><br><span class="line">    CLASS,</span><br><span class="line"></span><br><span class="line">    RUNTIME</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>从源代码中可以看出，此枚举类型中共有三个值。其中我们常用的为<code>RUNTIME</code>，此值表示被描述的注解会保留到class字节码文件中，并被JVM读取到。</p></li><li><p>使用演示</p><p>自定义注解接口</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.liboshuai.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyNote {</span><br><span class="line"></span><br><span class="line">    String[] value();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[] age();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>使用注解</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.liboshuai.study;</span><br><span class="line"></span><br><span class="line"><span class="comment">//此注解会保留到class字节码文件中，并被JVM读取到。</span></span><br><span class="line"><span class="meta">@MyNote(value = {"one","two"}, age = {21,22})</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> gender;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="Documented：描述注解会被抽取到API文档中"><a href="#Documented：描述注解会被抽取到API文档中" class="headerlink" title="@Documented：描述注解会被抽取到API文档中"></a>@Documented：描述注解会被抽取到API文档中</h3><ul><li><p>使用演示</p><p>自定义注解</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.liboshuai.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyNote {</span><br><span class="line"></span><br><span class="line">    String[] value();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[] age();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>使用注解</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.liboshuai.study;</span><br><span class="line"></span><br><span class="line"><span class="comment">//此注解会被抽取到API文档中</span></span><br><span class="line"><span class="meta">@MyNote(value = {"one","two"}, age = {21,22})</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> gender;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201116195846.png"></p></li></ul><h3 id="Inherited：描述注解会被子类自动继承"><a href="#Inherited：描述注解会被子类自动继承" class="headerlink" title="@Inherited：描述注解会被子类自动继承"></a>@Inherited：描述注解会被子类自动继承</h3><ul><li><p>使用演示</p><p>自定义注解接口</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.liboshuai.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Inherited;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注解MyNote修饰的类，其子类也会自动继承MyNote这个注解</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyNote {</span><br><span class="line"></span><br><span class="line">    String[] value();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[] age();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>使用注解</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.liboshuai.study;</span><br><span class="line"></span><br><span class="line"><span class="comment">//被描述注解会被抽取到API文档中</span></span><br><span class="line"><span class="meta">@MyNote(value = {"one","two"}, age = {21,22})</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> gender;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//这个类会自动继承父类Demo的被@Inherited修饰的注解</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">Demo</span> </span>{</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="解析注解"><a href="#解析注解" class="headerlink" title="解析注解"></a>解析注解</h2><p>解析注解即获取注解中定义的属性值。</p><p>我们可以在案例中学习如何解析注解。在前面的反射一节中，最后我们实现了一个自定义的“小框架”。其中我们用到了<code>Properties</code>配置文件，在我们学过注解后，我们可以使用注解来替代配置文件。使用注解办的案例实现如下：</p><ul><li>@Pro注解接口</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.liboshuai.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Pro {</span><br><span class="line">    <span class="comment">//定义属性</span></span><br><span class="line">    <span class="function">String <span class="title">className</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">methodName</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">methodParameter</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><p>Person类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.liboshuai.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">song</span><span class="params">(String songName)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"我想要唱《"</span> +</span><br><span class="line">                songName +</span><br><span class="line">                <span class="string">"》这首歌献给大家~"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>对注解进行解析，实现“小框架”功能</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.liboshuai.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Pro(className = "top.liboshuai.study.Person", methodName = "song", methodParameter = "溯Reverser")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFrame</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InstantiationException, InvocationTargetException </span>{</span><br><span class="line">        <span class="comment">//获取本类的Class对象</span></span><br><span class="line">        Class&lt;MyFrame&gt; myFrameClass = MyFrame.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取本类Class对象中的注解对象（其实就是在内存中生成了一个参数注解接口的子类实现对象）</span></span><br><span class="line">        Pro pro = myFrameClass.getAnnotation(Pro.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        上面获取注解对象的代码，相当于下面的这段代码</span></span><br><span class="line"><span class="comment">        new Pro() {</span></span><br><span class="line"><span class="comment">            public String className() {</span></span><br><span class="line"><span class="comment">              return "top.liboshuai.study.Person";</span></span><br><span class="line"><span class="comment">          }</span></span><br><span class="line"><span class="comment">          public String methodName() {</span></span><br><span class="line"><span class="comment">              return "song";</span></span><br><span class="line"><span class="comment">          }</span></span><br><span class="line"><span class="comment">          public String methodParameter() {</span></span><br><span class="line"><span class="comment">              return "溯Reverser";</span></span><br><span class="line"><span class="comment">          }</span></span><br><span class="line"><span class="comment">          @Override</span></span><br><span class="line"><span class="comment">            public Class&lt;? extends Annotation&gt; annotationType() {</span></span><br><span class="line"><span class="comment">                return null;</span></span><br><span class="line"><span class="comment">            }</span></span><br><span class="line"><span class="comment">        };</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用注解对象中被重写后的方法，获取返回值</span></span><br><span class="line">        String className = pro.className();</span><br><span class="line">        String methodName = pro.methodName();</span><br><span class="line">        String methodParameter = pro.methodParameter();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用获取的className创建Class对象</span></span><br><span class="line">        Class&lt;?&gt; cls = Class.forName(className);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Object man = cls.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取Class对象中的method对象</span></span><br><span class="line">        Method method = cls.getMethod(methodName,String.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        method.invoke(man,methodParameter);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="简单的框架测试"><a href="#简单的框架测试" class="headerlink" title="简单的框架测试"></a>简单的框架测试</h2><h3 id="案例要求"><a href="#案例要求" class="headerlink" title="案例要求"></a>案例要求</h3><p>设计一个配合注解对类中方法进行异常捕获的框架，并将捕获到的异常加载到日志文件中。</p><h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h3><ol><li>定义一个用于对类中方法进行检查的注解接口<code>@Check</code></li><li>定义一个<code>Calculator</code>类，类中定义5个方法，其中4个方法加上<code>@Check</code>注解，形成参照对比。</li><li>定义一个用于保存配置信息的注解接口<code>@PropertiesFile</code></li><li>定义一个方法测试框架<code>TestCheck</code>类，对带有<code>@Check</code>注解进行异常捕获，并写入日志文件</li><li>定义一个日志文件<code>log.txt</code>，用于保存捕获到的异常</li></ol><h3 id="案例实现"><a href="#案例实现" class="headerlink" title="案例实现"></a>案例实现</h3><ul><li><p>定义的<code>@Check</code>注解接口</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.liboshuai.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于对方法进行检查的注解接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Check {</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>定义的<code>Calculator</code>类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.liboshuai.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将要被测试的Calculator类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Check {</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>定义的<code>Properties</code>注解接口</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.liboshuai.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于保存配置信息的注解接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> PropertiesFile {</span><br><span class="line">    <span class="function">String <span class="title">className</span><span class="params">()</span> <span class="keyword">default</span> "top.liboshuai.study.Calculator"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">methodParameterX</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">methodParameterY</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>定义的<code>TestCheck</code>类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.liboshuai.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试框架类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PropertiesFile(methodParameterX = 0, methodParameterY = 1)</span></span><br><span class="line"><span class="meta">@SuppressWarnings("all")</span><span class="comment">//压制警告</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCheck</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="comment">//1.解析注解中的配置信息</span></span><br><span class="line">        <span class="comment">//1.1获取本类的Class对象</span></span><br><span class="line">        Class&lt;TestCheck&gt; testCheckClass = TestCheck.class;</span><br><span class="line">        <span class="comment">//1.2获取Class对象中的注解对象（其实就是在内存中生成了一个参数注解接口的子类实现对象）</span></span><br><span class="line">        PropertiesFile pro = testCheckClass.getAnnotation(PropertiesFile.class);</span><br><span class="line">        <span class="comment">//1.3调用注解接口中被重写的方法，获取配置信息</span></span><br><span class="line">        String className = pro.className();</span><br><span class="line">        <span class="keyword">int</span> x = pro.methodParameterX();</span><br><span class="line">        <span class="keyword">int</span> y = pro.methodParameterY();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取配置文件中的Class对象</span></span><br><span class="line">        Class&lt;?&gt; calcClass = Class.forName(className);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.通过Class对象，创建对象</span></span><br><span class="line">        Object calc = calcClass.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.获取所有方法对象，忽略权限</span></span><br><span class="line">        Method[] methods = calcClass.getDeclaredMethods();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.定义后续所需变量</span></span><br><span class="line">        <span class="comment">//5.1定义异常出现的次数</span></span><br><span class="line">        <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//5.2定义日志文件IO流</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"log.txt"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.捕获带有@Check注解的方法的异常到日志文件中</span></span><br><span class="line">        <span class="comment">//6.1使用循环逐个取出方法对象</span></span><br><span class="line">        <span class="keyword">for</span> (Method method: methods) {</span><br><span class="line">            <span class="comment">//6.2对方法对象设置暴力反射</span></span><br><span class="line">            method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//6.3筛选出带有@Check注解的方法</span></span><br><span class="line">            <span class="keyword">if</span> (method.isAnnotationPresent(Check.class)) {</span><br><span class="line">                <span class="comment">//6.4传入参数，调用方法</span></span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    method.invoke(calc,x,y);</span><br><span class="line">                } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">                    <span class="comment">//6.5增加异常出现的次数</span></span><br><span class="line">                    number++;</span><br><span class="line">                    <span class="comment">//6.6捕获异常，并记录到文件中</span></span><br><span class="line">                    bw.write(method.getName() + <span class="string">"方法出现异常了"</span>);</span><br><span class="line">                    bw.newLine();</span><br><span class="line">                    bw.write(<span class="string">"异常的名称："</span> + e.getCause().getClass().getSimpleName());</span><br><span class="line">                    bw.newLine();</span><br><span class="line">                    bw.write(<span class="string">"异常的原因："</span> + e.getCause().getMessage());</span><br><span class="line">                    bw.newLine();</span><br><span class="line">                    bw.write(<span class="string">"------------------------------------------------------"</span>);</span><br><span class="line">                    bw.newLine();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//6.7记录异常出现的次数到日志文件中</span></span><br><span class="line">        bw.write(<span class="string">"异常总共出现了"</span> + number + <span class="string">"次"</span>);</span><br><span class="line">        <span class="comment">//6.8刷新、并关闭IO流</span></span><br><span class="line">        bw.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>最后生成的<code>log.txt</code>文件</p><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mul方法出现异常了</span><br><span class="line">异常的名称：NullPointerException</span><br><span class="line">异常的原因：我不允许有结果等于0，你懂我意思吗？</span><br><span class="line">------------------------------------------------------</span><br><span class="line">div方法出现异常了</span><br><span class="line">异常的名称：NullPointerException</span><br><span class="line">异常的原因：我不允许有结果等于0，你懂我意思吗？</span><br><span class="line">------------------------------------------------------</span><br><span class="line">异常总共出现了2次</span><br></pre></td></tr></tbody></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射机制</title>
      <link href="2020/11/11/78_%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
      <url>2020/11/11/78_%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>反射是框架设计的灵魂。 框架：半成品软件，我们可以在框架的基础上进行软件开发，简化编码。</p><p><code>Reflection</code><strong>反射</strong>是被视为动态语言的关键，反射机制允许Java程序在执行期借助于Reflection API取得任何类的内部信息，将类的各个组成部分封装为其他对象，供我们直接操作任意对象的内部属性及方法。</p><p><strong>好处就是</strong>：可以在程序运行过程中，操作这些对象。以解耦，提高程序的可扩展性。</p><h2 id="动、静态语言"><a href="#动、静态语言" class="headerlink" title="动、静态语言"></a>动、静态语言</h2><ol><li><p>动态语言</p><p>是一类在运行时可以改变其结构的语言：例如新的函数、对象、甚至代码可以被引进，已有的函数可以被删除或是其他结构上的变化。通俗点说就是在运行时代码可以根据某些条件改变自身结构。</p></li><li><p>静态语言</p><p>与动态语言相对应的，运行时结构不可变的语言就是静态语言。如Java、C、 C++。</p></li></ol><blockquote><p>Java不是动态语言，但Java可以称之为“准动态语言”。即Java有一定的动态性，我们可以利用反射机制、字节码操作获得类似动态语言的特性。 Java的动态性让编程的时候更加灵活！</p></blockquote><h2 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h2><p><code>java.lang.Class</code>类表示运行中的Java应用程序中的类和接口。</p><p>关于Class类，我们需要注意以下几点：</p><ol><li>Class本身也是一个类</li><li>Class 对象只能由系统建立对象</li><li>一个加载的类在 JVM 中只会有一个Class实例</li><li>一个Class对象对应的是一个加载到JVM中的一个.class文件</li><li>每个类的实例都会记得自己是由哪个 Class 实例所生成</li><li>通过Class可以完整地得到一个类中的所有被加载的结构</li><li>Class类是Reflection的根源，针对任何你想动态加载、运行的类，唯有先获得相应的 Class对象</li></ol><h2 id="反射提供的功能"><a href="#反射提供的功能" class="headerlink" title="反射提供的功能"></a>反射提供的功能</h2><ul><li>在运行时判断任意一个对象所属的类</li><li>在运行时构造任意一个类的对象</li><li>在运行时判断任意一个类所具有的成员变量和方法</li><li>在运行时获取泛型信息</li><li>在运行时调用任意一个对象的成员变量和方法</li><li>在运行时处理注解</li><li>生成动态代理</li></ul><h2 id="反射的主要API"><a href="#反射的主要API" class="headerlink" title="反射的主要API"></a>反射的主要API</h2><ul><li><code>java.lang.Class</code>：:代表一个类</li><li><code>java.lang.reflect.Method</code>：代表类的方法</li><li><code>java.lang.reflect.Field</code>：代表类的成员变量</li><li><code>java.lang.reflect.Constructor</code>：代表类的构造器</li></ul><h2 id="反射常用方法"><a href="#反射常用方法" class="headerlink" title="反射常用方法"></a>反射常用方法</h2><h3 id="获取Class对象"><a href="#获取Class对象" class="headerlink" title="获取Class对象"></a>获取Class对象</h3><ol><li><code>Class.forName("全类名")</code>：通过传入字符串形式的全类名，来获取一个Class对象。多用于配置文件，将类名定义在配置文件中。是我们最常用的一种获取Class对象的方式。</li><li><code>类名.class</code>：通过类名调用自身的属性class来获取Class对象。</li><li><code>对象.getClass()</code>：通过对象来调用方法getClass来获取Class对象，getClass方法在父类Object中就已经存在了。</li></ol><h3 id="获取全类名"><a href="#获取全类名" class="headerlink" title="获取全类名"></a>获取全类名</h3><ol><li><code>String getName()</code>：获取全类名。</li></ol><h3 id="获取、操作成员变量"><a href="#获取、操作成员变量" class="headerlink" title="获取、操作成员变量"></a>获取、操作成员变量</h3><ol><li><code>Field[] getFields()</code>：获取所有public修饰的成员变量</li><li><code>Field getField(String name)</code>：获取指定名称的public修饰的成员变量</li><li><code>Field[] getDeclaredFields()</code>：获取所有的成员变量，忽略修饰符限制</li><li><code>Field getDeclaredField(String name)</code>：获取指定名称的成员变量，忽略修饰符限制</li><li><code>void setAccessible(boolean flag)</code>：为true时，忽略访问权限修饰符的安全检查，进行暴力反射</li><li><code>void set(Object obj, Object value)</code>：为指定属性设置新值</li><li><code>Object get(Object obj)</code>：获取指定属性的值</li></ol><h3 id="获取、操作构造方法"><a href="#获取、操作构造方法" class="headerlink" title="获取、操作构造方法"></a>获取、操作构造方法</h3><ol><li><code>Constructor&lt;?&gt;[] getConstructors()</code>：获取所有public修饰的构造函数</li><li><code>Constructor&lt;T&gt; getConstructor(Class&lt;?&gt;... parameterTypes)</code>：获取指定参数形式的public修饰的构造函数</li><li><code>Constructor&lt;?&gt;[] getDeclaredConstructors()</code>：获取所有构造函数，忽略修饰符限制</li><li><code>Constructor&lt;T&gt; getDeclaredConstructor(Class&lt;?&gt;... parameterTypes)</code>：获取指定参数形式的构造函数，忽略修饰符限制</li><li><code>void setAccessible(boolean flag)</code>：为true时，忽略访问权限修饰符的安全检查，进行暴力反射</li><li><code>T newInstance(Object... initargs)</code>：使用指定的参数形式，新建一个实例对象。（如果是空参创建对象，可以直接使用Class对象的newInstance方法进行创建）</li></ol><h3 id="获取、操作成员方法"><a href="#获取、操作成员方法" class="headerlink" title="获取、操作成员方法"></a>获取、操作成员方法</h3><ol><li><code>Method[] getMethods()</code>：获取所有public修饰的方法，包括从父类、父接口继承的方法。</li><li><code>Method[] getMethod(String name, Class&lt;?&gt;... parameterTypes)</code>：获取public修饰的指定方法名、参数形式的方法。</li><li><code>Method[] getDeclaredMethods()</code>：获取所有方法，忽略修饰符限制，但不包括从父类、父接口继承的方法。</li><li><code>Method getDeclaredMethod(String name, Class&lt;?&gt;... parameterTypes)</code>：获取指定方法名、参数形式的方法，忽略修饰符限制。</li><li><code>void setAccessible(boolean flag)</code>：为true时，忽略访问权限修饰符的安全检查，进行暴力反射</li><li><code>Object invoke(Object obj, Object... args)</code>：通过传入指定的对象、参数形式，来调用此方法。</li><li><code>String getName()</code>：获取字符串形式的方法名。</li></ol><p><strong>代码演示</strong></p><ul><li><p>反射的测试类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.liboshuai.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line">    <span class="comment">//公共变量</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="comment">//私有变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//constructor</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//公共的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//setter and getter</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//公共的成员方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printName</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//私有的成员方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printAge</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(age);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>获取Class对象</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.liboshuai.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>{</span><br><span class="line">        <span class="comment">//获取Class对象，方法一</span></span><br><span class="line">        Class&lt;?&gt; class01 = Class.forName(<span class="string">"top.liboshuai.study.Person"</span>);</span><br><span class="line">        System.out.println(class01);<span class="comment">//class top.liboshuai.study.Person</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取Class对象，方法二</span></span><br><span class="line">        Class&lt;?&gt; class02 =  Person.class;</span><br><span class="line">        System.out.println(class02);<span class="comment">//class top.liboshuai.study.Person</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取CLass对象，方法三</span></span><br><span class="line">        Person man = <span class="keyword">new</span> Person();</span><br><span class="line">        Class&lt;?&gt; class03 = man.getClass();</span><br><span class="line">        System.out.println(class03);<span class="comment">//class top.liboshuai.study.Person</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>获取全类名</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.liboshuai.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>{</span><br><span class="line">        <span class="comment">//获取Class对象</span></span><br><span class="line">        Class&lt;?&gt; class01 = Class.forName(<span class="string">"top.liboshuai.study.Person"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取全类名</span></span><br><span class="line">        String name = class01.getName();</span><br><span class="line">        System.out.println(name);<span class="comment">//top.liboshuai.study.Person</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>获取、操作成员变量</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.liboshuai.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, IllegalAccessException </span>{</span><br><span class="line">        <span class="comment">//获取Person类的Class对象</span></span><br><span class="line">        Class&lt;?&gt; class01 = Class.forName(<span class="string">"top.liboshuai.study.Person"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取所有public修饰的成员变量</span></span><br><span class="line">        Field[] fields01 = class01.getFields();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取指定名称的public修饰的成员变量</span></span><br><span class="line">        Field field01 = class01.getField(<span class="string">"name"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取所有的成员变量，忽略修饰符限制</span></span><br><span class="line">        Field[] fields02 = class01.getDeclaredFields();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取指定名称的成员变量，忽略修饰符限制</span></span><br><span class="line">        Field field02 = class01.getDeclaredField(<span class="string">"age"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Person man = <span class="keyword">new</span> Person();</span><br><span class="line">        <span class="comment">//为true时，忽略访问权限修饰符的安全检查，进行暴力反射</span></span><br><span class="line">        field02.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//为指定属性设置新值</span></span><br><span class="line">        field02.set(man,<span class="number">21</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取指定属性的值</span></span><br><span class="line">        Object value = field02.get(man);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>获取、操作构造方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.liboshuai.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>{</span><br><span class="line">        <span class="comment">//获取Person类的Class对象</span></span><br><span class="line">        Person man = <span class="keyword">new</span> Person();</span><br><span class="line">        Class&lt;?&gt; class01 = man.getClass();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取所有public修饰的构造函数</span></span><br><span class="line">        Constructor&lt;?&gt;[] cons01 = class01.getConstructors();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取指定参数形式的public修饰的构造函数</span></span><br><span class="line">        Constructor&lt;?&gt; con01 = class01.getConstructor(String.class, <span class="keyword">int</span>.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取所有构造函数，忽略修饰符限制</span></span><br><span class="line">        Constructor&lt;?&gt;[] cons02 = class01.getDeclaredConstructors();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取指定参数形式的构造函数，忽略修饰符限制</span></span><br><span class="line">        Constructor&lt;?&gt; con02 = class01.getDeclaredConstructor(String.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用指定的参数形式，新建一个实例对象。（如果是空参创建对象，可以直接使用Class对象的newInstance方法进行创建）</span></span><br><span class="line">        Object woman = con01.newInstance(<span class="string">"Jason"</span>,<span class="number">21</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>获取、操作成员方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.liboshuai.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>{</span><br><span class="line">        <span class="comment">//获取Person类的Class的对象</span></span><br><span class="line">        Class&lt;?&gt; class01 = Person.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取所有public修饰的方法，包括从父类、父接口继承的方法。</span></span><br><span class="line">        Method[] methods01 = class01.getMethods();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取public修饰的指定方法名、参数形式的方法。</span></span><br><span class="line">        Method method01 = class01.getMethod(<span class="string">"printName"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取所有方法，忽略修饰符限制，但不包括从父类、父接口继承的方法。</span></span><br><span class="line">        Method[] methods02 = class01.getDeclaredMethods();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取指定方法名、参数形式的方法，忽略修饰符限制。</span></span><br><span class="line">        Method method03 = class01.getDeclaredMethod(<span class="string">"setName"</span>,String.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用暴力反射</span></span><br><span class="line">        method03.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过传入指定的对象、参数形式，来调用此方法。</span></span><br><span class="line">        Person man = <span class="keyword">new</span> Person();</span><br><span class="line">        method03.invoke(man,<span class="string">"Jason"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取字符串形式的方法名。</span></span><br><span class="line">        String methodName = method03.getName();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="反射应用案例"><a href="#反射应用案例" class="headerlink" title="反射应用案例"></a>反射应用案例</h2><h3 id="案例要求"><a href="#案例要求" class="headerlink" title="案例要求"></a>案例要求</h3><p>写一个”框架”，不能改变该类的任何代码的前提下，可以帮我们创建任意类的对象，并且执行其中任意方法</p><h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h3><ol><li>将需要创建的对象的全类名和需要执行的方法定义在配置文件中</li><li>在程序中加载读取配置文件</li><li>使用反射技术来加载类文件进内存</li><li>创建对象</li><li>执行方法</li></ol><h3 id="案例实现"><a href="#案例实现" class="headerlink" title="案例实现"></a>案例实现</h3><ul><li><p>配置文件<code>Human.properties</code></p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">className</span>=<span class="string">top.liboshuai.study.Human</span></span><br><span class="line"><span class="attr">fieldName</span>=<span class="string">name</span></span><br><span class="line"><span class="attr">methodName</span>=<span class="string">song</span></span><br></pre></td></tr></tbody></table></figure></li><li><p><code>Person</code>类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.liboshuai.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Human</span> </span>{</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Human</span><span class="params">()</span></span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Human</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">song</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"我们都一样，一样的坚强！"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>小框架<code>MyFrame</code>类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.liboshuai.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFrame</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="comment">//1加载配置文件</span></span><br><span class="line">        <span class="comment">//1.1创建Properties对象</span></span><br><span class="line">        Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//1.2获取classLoader对象</span></span><br><span class="line">        ClassLoader classLoader = MyFrame.class.getClassLoader();</span><br><span class="line">        <span class="comment">//1.3获取配置文件IO流</span></span><br><span class="line">        InputStream is = classLoader.getResourceAsStream(<span class="string">"Human.properties"</span>);</span><br><span class="line">        <span class="comment">//1.4载入配置文件</span></span><br><span class="line">        pro.load(is);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取配置文件中定义的信息</span></span><br><span class="line">        String className = pro.getProperty(<span class="string">"className"</span>);</span><br><span class="line">        String fieldName = pro.getProperty(<span class="string">"fieldName"</span>);</span><br><span class="line">        String methodName = pro.getProperty(<span class="string">"methodName"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.获取配置文件中定义类的Class对象</span></span><br><span class="line">        Class&lt;?&gt; cls = Class.forName(className);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.获取构造有参构造函数对象</span></span><br><span class="line">        Constructor&lt;?&gt; constructor = cls.getConstructor(String.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.通过有参构造函数对象创建对象</span></span><br><span class="line">        Object man = constructor.newInstance(<span class="string">"Jason"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.获取属性对象</span></span><br><span class="line">        Field field = cls.getField(fieldName);</span><br><span class="line">        System.out.println(field);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//7.获取方法对象</span></span><br><span class="line">        Method method = cls.getMethod(methodName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//8.调用方法</span></span><br><span class="line">        method.invoke(man);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Junit测试</title>
      <link href="2020/11/08/77_Junit%E6%B5%8B%E8%AF%95/"/>
      <url>2020/11/08/77_Junit%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Junit测试"><a href="#Junit测试" class="headerlink" title="Junit测试"></a>Junit测试</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>测试分为两类：</p><ol><li>黑盒测试：不需要写代码，给输入值，看程序是否能够输出期望的值。</li><li>白盒测试：需要写代码的，关注程序具体的执行流程。</li></ol><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>由于黑盒测试不太涉及代码层级的东西，所以我们主要讲解的是白盒测试的使用步骤。如下：</p><ol><li><p>定义一个测试类</p><ul><li>包名建议：xxx.xxx.xxx.test，例：top.liboshuai.person.test</li><li>测试类名建议：被测试的类名 + test，例：methodTest</li></ul></li><li><p>定义一个测试方法</p><ul><li>方法名建议：test + 测试的方法名，例：testMethod()</li><li>返回值建议：建议设置为<code>void</code>，因为这个测试方法只是我们自己使用，不需要别人去调用。</li></ul></li><li><p>给测试方法加注解@Test</p><ul><li>在Java中只有<code>main</code>方法是程序的执行入口，我们的测试方法不是<code>main</code>方法，不能直接执行。所以我们需要给测试方法加上注解@Test，达到是测试方法可以独立运行的目的。</li></ul></li><li><p>导入<code>Junit</code>工程依赖。</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201111184120.png"></p></li></ol><p><strong>代码演示</strong></p><ul><li><p>被测试代码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.liboshuai.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>{</span><br><span class="line">    <span class="comment">//加法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> x + y;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//减法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> x - y;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.liboshuai.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> top.liboshuai.study.Calculator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatorTest</span> </span>{</span><br><span class="line">    <span class="comment">//测试add方法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span> </span>{</span><br><span class="line">        Calculator calc = <span class="keyword">new</span> Calculator();</span><br><span class="line">        <span class="keyword">int</span> result = calc.add(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//断言结果为3，实际结果也为3</span></span><br><span class="line">        Assert.assertEquals(<span class="number">3</span>,result);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//测试sub方法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSub</span><span class="params">()</span> </span>{</span><br><span class="line">        Calculator calc = <span class="keyword">new</span> Calculator();</span><br><span class="line">        <span class="keyword">int</span> result = calc.sub(<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//断言结果为0，实际结果为1</span></span><br><span class="line">        Assert.assertEquals(<span class="number">0</span>,result);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//抛出异常：</span></span><br><span class="line">        <span class="comment">//java.lang.AssertionError:</span></span><br><span class="line">        <span class="comment">//Expected :0</span></span><br><span class="line">        <span class="comment">//Actual   :1</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="判定结果"><a href="#判定结果" class="headerlink" title="判定结果"></a>判定结果</h2></li></ul><p>代码若编译上正确，控制台则会为绿色。若有错误，则会为红色。我们可以通过这点来初步判断被测试程序的正确与否。</p><p>程序的结果正确与否，我们打印出来也是不能人工判断出来的。所以我们可以使用【断言】——<code>Assert.assertEquals(断定结果, 程序得出的结果)</code>，来判定这个结果。</p><p>如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.liboshuai.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> top.liboshuai.study.Calculator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatorTest</span> </span>{</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">//创建一个被测试类对象</span></span><br><span class="line">        Calculator calc = <span class="keyword">new</span> Calculator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用被测试类方法</span></span><br><span class="line">        <span class="keyword">int</span> result = calc.add(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用断言</span></span><br><span class="line">        Assert.assertEquals(<span class="number">3</span>,result);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201111204647.png"></p><h2 id="两个测试常用的注解"><a href="#两个测试常用的注解" class="headerlink" title="两个测试常用的注解"></a>两个测试常用的注解</h2><ol><li><code>@Before</code>： 修饰的方法总会在测试方法之前被自动执行，一般我们会在这里进行一些初始化的操作</li><li><code>@After</code>：修饰的方法总会在测试方法执行之后自动被执行，一般我们可以在这里进行一些关闭资源的操作。以避免测试代码有错误，影响到资源的关闭。</li></ol><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.liboshuai.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> top.liboshuai.study.Calculator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatorTest</span> </span>{</span><br><span class="line">    <span class="comment">//一般我们会在这里做一些初始化的操作</span></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"开始进行初始化..."</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//测试sub()</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSub</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">//手动制造一个错误，测试注解@Before @After</span></span><br><span class="line">        <span class="keyword">int</span> x =<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> i = x / <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        Calculator calc = <span class="keyword">new</span> Calculator();</span><br><span class="line">        <span class="keyword">int</span> result = calc.sub(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//断言结果为-1，实际结果也为-1</span></span><br><span class="line">        Assert.assertEquals(-<span class="number">1</span>,result);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//我们可以在这里关闭测试用到的一些资源</span></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"关闭资源中..."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201111204805.png"></p><p>可以看到，即使测试代码中有出错的，也不影响后面注释代码的执行。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>方法引用</title>
      <link href="2020/11/08/76_%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8/"/>
      <url>2020/11/08/76_%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h1><p>在使用Lambda表达式的时候，我们实际上传递进去的代码就是一种解决方案：拿什么参数做什么操作。那么考虑 一种情况：如果我们在Lambda中所指定的操作方案，已经有地方存在相同方案，那是否还有必要再写重复逻辑 ?</p><h2 id="冗余的Lambda场景"><a href="#冗余的Lambda场景" class="headerlink" title="冗余的Lambda场景"></a>冗余的Lambda场景</h2><p>来看一个简单的函数式接口以应用Lambda表达式：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Printable</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(String str)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在<code>Printable</code>接口当中唯一的抽象方法<code>print</code>接收一个字符串参数，目的就是为了打印显示它。那么通过Lambda来使用它的代码很简单：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Printable</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(String str)</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printString</span><span class="params">(Printable data)</span> </span>{</span><br><span class="line">        data.print(<span class="string">"Hello,World"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        printString(s -&gt; System.out.println(s));<span class="comment">//Hello,World</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>其中<code>printString()</code>方法只管调用<code>Printable</code>接口的<code>print()</code>方法，而并不管<code>print()</code>方法的具体实现逻辑会将字符串打印到什么地方去。而<code>main</code>方法通过Lambda表达式指定了函数式接口<code>Printable</code>的具体操作方案为：拿到<code>String</code>（类型可推导，所以可省略）数据后，在控制台中输出它。</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>这段代码的问题在于，对字符串进行控制台打印输出的操作方案，明明已经有了现成的实现，那就是<code>System.out</code>对象中的<code>println(String)</code>方法。既然Lambda希望做的事情就是调用<code>println(String)</code>方法，那何必自己手动调用呢？</p><h3 id="用方法引用改进代码"><a href="#用方法引用改进代码" class="headerlink" title="用方法引用改进代码"></a>用方法引用改进代码</h3><p>能否省去Lambda的语法格式（尽管它已经相当简洁）呢？只要“引用”过去就好了：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Printable</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(String str)</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printString</span><span class="params">(Printable lambda)</span> </span>{</span><br><span class="line">        lambda.print(<span class="string">"JavaSpring"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//版本一</span></span><br><span class="line">        <span class="comment">/*printString(new Printable() {</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public void print(String str) {</span></span><br><span class="line"><span class="comment">                System.out.println(str);</span></span><br><span class="line"><span class="comment">            }</span></span><br><span class="line"><span class="comment">        });*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//版本二</span></span><br><span class="line">        <span class="comment">/*printString(s -&gt; System.out.println(s));*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//版本三</span></span><br><span class="line">        printString(System.out::println);</span><br><span class="line">    }</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure><p>请注意其中的双冒号 :: 写法，这被称为“方法引用”，而双冒号是一种新的语法。</p><h2 id="方法引用符"><a href="#方法引用符" class="headerlink" title="方法引用符"></a>方法引用符</h2><p>双冒号<code>::</code>为引用运算符，而它所在的表达式被称为方法引用。如果Lambda要表达的函数方案已经存在于某个方法的实现中，那么则可以通过双冒号来引用该方法作为Lambda的替代者。</p><h3 id="语法分析"><a href="#语法分析" class="headerlink" title="语法分析"></a>语法分析</h3><p>例如上例中， <code>System.out</code>对象中有一个重载的<code>println(String)</code>方法恰好就是我们所需要的。那么对于 printString 方法的函数式接口参数，对比下面两种写法，完全等效：</p><ul><li>Lambda表达式写法：<code>s -&gt; System.out.println(s);</code></li><li>方法引用写法：<code>System.out::println；</code></li></ul><p>第一种语义是指：拿到参数之后经Lambda之手，继而传递给<code>System.out.println()</code>方法去处理。</p><p>第二种等效写法的语义是指：直接让<code>System.out</code>中的<code>println</code>方法来取代Lambda。两种写法的执行效果完全一样，而第二种方法引用的写法复用了已有方案，更加简洁。</p><blockquote><p>Lambda中传递的参数一定是方法引用中的那个方法可以接收的类型，否则会抛出异常。</p></blockquote><h3 id="推导与省略"><a href="#推导与省略" class="headerlink" title="推导与省略"></a>推导与省略</h3><p>如果使用Lambda，那么根据<code>可推导就是可省略</code>的原则，无需指定参数类型，也无需指定的重载形式——它们都将自动推导。而如果使用方法引用，也是同样可以根据上下文进行推导。</p><p>函数式接口是Lambda的基础，而方法引用是Lambda的孪生兄弟。</p><p>下面这段代码将会调用<code>println()</code>方法的不同重载形式，将函数式接口改为int类型的参数：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">PrintableInteger</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>由于上下文变了之后可以自动推导出唯一对应的匹配重载，所以方法引用没有任何变化：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">PrintableInteger</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(PrintableInteger p)</span> </span>{</span><br><span class="line">        p.print(<span class="number">100</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        method(System.out::println);<span class="comment">//100</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="通过对象名引用成员方法"><a href="#通过对象名引用成员方法" class="headerlink" title="通过对象名引用成员方法"></a>通过对象名引用成员方法</h3><p>这是常用的一种语法，与上例相同。如果一个类中已经存在一个成员方法：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printUpperCase</span><span class="params">(String str)</span> </span>{</span><br><span class="line">        System.out.println(str.toUpperCase());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>函数式接口仍然定义为：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Printable</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(String str)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>那么当需要使用这个<code>printUpperCase()</code>成员方法来替代<code>Printable</code>接口的Lambda的时候，已经具有了<code>Test</code>类的对象实例，则可以通过对象名引用成员方法，代码为：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Printable</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(String str)</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printUpperCase</span><span class="params">(String str)</span> </span>{</span><br><span class="line">        System.out.println(str.toUpperCase());</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printString</span><span class="params">(Printable lambda)</span> </span>{</span><br><span class="line">        lambda.print(<span class="string">"JavaSpring"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Person man = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//版本一</span></span><br><span class="line">        <span class="comment">/*printString(new Printable() {</span></span><br><span class="line"><span class="comment">           @Override</span></span><br><span class="line"><span class="comment">           public void print(String str) {</span></span><br><span class="line"><span class="comment">               man.printUpperCase(str);</span></span><br><span class="line"><span class="comment">           }</span></span><br><span class="line"><span class="comment">        });*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//版本二</span></span><br><span class="line">        <span class="comment">/*printString(s -&gt; man.printUpperCase(s));*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//版本三</span></span><br><span class="line">        printString(man::printUpperCase);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="通过类名称引用静态方法"><a href="#通过类名称引用静态方法" class="headerlink" title="通过类名称引用静态方法"></a>通过类名称引用静态方法</h3><p>由于在<code>java.lang.Math</code>类中已经存在了静态方法<code>abs()</code>，所以当我们需要通过Lambda来调用该方法时，有两种写法。首先是函数式接口：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Calculator</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> num)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>方法引用的写法：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Calculator</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> num)</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(<span class="keyword">int</span> num, Calculator lambda)</span> </span>{</span><br><span class="line">        System.out.println(lambda.calc(num));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span><br><span class="line">        <span class="comment">//版本一</span></span><br><span class="line">        <span class="comment">/*method(</span></span><br><span class="line"><span class="comment">                -10,</span></span><br><span class="line"><span class="comment">               new Calculator() {</span></span><br><span class="line"><span class="comment">                    @Override</span></span><br><span class="line"><span class="comment">                   public int calc(int num) {</span></span><br><span class="line"><span class="comment">                        return Math.abs(num);</span></span><br><span class="line"><span class="comment">                    }</span></span><br><span class="line"><span class="comment">               }</span></span><br><span class="line"><span class="comment">        );*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//版本二</span></span><br><span class="line">        <span class="comment">/*method(</span></span><br><span class="line"><span class="comment">                -10,</span></span><br><span class="line"><span class="comment">                s -&gt; Math.abs(s)</span></span><br><span class="line"><span class="comment">        );*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//版本三</span></span><br><span class="line">        method(</span><br><span class="line">                -<span class="number">10</span>,</span><br><span class="line">                Math::abs</span><br><span class="line">        );</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在这个例子中，下面两种写法是等效的：</p><ul><li>Lambda表达式：<code>n -&gt; Math.abs(n);</code></li><li>方法引用：<code>Math::abs</code></li></ul><h3 id="通过super引用成员方法"><a href="#通过super引用成员方法" class="headerlink" title="通过super引用成员方法"></a>通过super引用成员方法</h3><p>如果存在继承关系，当Lambda中需要出现super调用时，也开始使用方法引用进行代替。首先是函数式接口：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">GreetAble</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">greet</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>然后是父类<code>Human</code>的内容：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"Hello"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>最后是子类<code>Man</code>的内容，其中使用了Lambda的写法：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">GreetAble</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">greet</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"Hello"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">extends</span> <span class="title">Human</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"你不要再叫了，我可以把你的头给打烂，你知道吗？"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义方法method,参数传递GreetAble接口</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(GreetAble g)</span> </span>{</span><br><span class="line">        g.greet();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">//不使用匿名函数</span></span><br><span class="line">        method(<span class="keyword">new</span> GreetAble() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greet</span><span class="params">()</span> </span>{</span><br><span class="line">                <span class="keyword">new</span> Human().sayHello();</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">        <span class="comment">//调用method方法，使用Lambda表达式</span></span><br><span class="line">        method(() -&gt; {</span><br><span class="line">            <span class="comment">//创建Human对象，调用sayHello合法</span></span><br><span class="line">            <span class="keyword">new</span> Human().sayHello();</span><br><span class="line">        });</span><br><span class="line">        <span class="comment">//使用简化Lambda</span></span><br><span class="line">        method(() -&gt; <span class="keyword">new</span> Human().sayHello());</span><br><span class="line">        <span class="comment">//使用super关键字代替父类对象</span></span><br><span class="line">        method(() -&gt; <span class="keyword">super</span>.sayHello());</span><br><span class="line">        <span class="comment">//使用方法引用</span></span><br><span class="line">        method(<span class="keyword">super</span>::sayHello);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="通过this引用成员方法"><a href="#通过this引用成员方法" class="headerlink" title="通过this引用成员方法"></a>通过this引用成员方法</h3><p><code>this</code>代表当前对象，如果需要引用的方法就是当前类中的成员方法，那么可以用<code>this::成员方法</code>的格式来使用方法引用。首先是简单的函数式接口：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">RichAble</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>下面是一个<code>Husband</code>类：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Husband</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">marry</span><span class="params">(RichAble lambda)</span> </span>{</span><br><span class="line">        lambda.buy();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beHappy</span><span class="params">()</span> </span>{</span><br><span class="line">        marry(() -&gt; System.out.println(<span class="string">"买套房子"</span>));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>方法<code>beHappy()</code>调用了结婚方法<code>marry()</code>，后者的参数为函数式接口<code>RichAble</code>，所以需要一个Lambda表达式。但是如果这个Lambda表达式的内容已经在本类当中存在了，则可以对<code>Husband</code>类进行如下修改：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Husband</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">buyHouse</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"买套房子"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">marry</span><span class="params">(RichAble lambda)</span> </span>{</span><br><span class="line">        lambda.buy();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beHappy</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">//版本一</span></span><br><span class="line">        marry(() -&gt; <span class="keyword">this</span>.buyHouse());</span><br><span class="line">        <span class="comment">//版本二</span></span><br><span class="line">        marry(<span class="keyword">this</span>::buyHouse);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在这个例子中，下面两种写法是等效的：</p><ul><li>Lambda表达式：<code>() -&gt; this.buyHouse()；</code></li><li>方法引用：<code>this::buyHouse；</code></li></ul><h3 id="类的构造器引用"><a href="#类的构造器引用" class="headerlink" title="类的构造器引用"></a>类的构造器引用</h3><p>由于构造器的名称与类名完全一样，并不固定。所以构造器引用使用<code>类名称::new</code>的格式表示。首先是一个简单的<code>Person</code>类：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//constructor</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>{}</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//setter and getter</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>然后是用来创建<code>Person</code>对象的函数式接口：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">PersonBuilder</span> </span>{</span><br><span class="line">    <span class="function">Person <span class="title">buildPerson</span><span class="params">(String name)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>要使用这个函数式接口，可以通过Lambda表达式：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printName</span><span class="params">(String name, PersonBuilder builder)</span> </span>{</span><br><span class="line">        System.out.println(builder.buildPerson(name).getName());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//版本一，Lambda</span></span><br><span class="line">        printName(<span class="string">"赵丽颖"</span>, name -&gt; <span class="keyword">new</span> Person(name));</span><br><span class="line">        <span class="comment">//版本二，方法引用</span></span><br><span class="line">        printName(<span class="string">"Jason"</span>,Person::<span class="keyword">new</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在这个例子中，下面两种写法是等效的：</p><ul><li>Lambda表达式：<code>name -&gt; new Person(name);</code></li><li>方法引用：<code>Person::new;</code></li></ul><h3 id="数组的构造器引用"><a href="#数组的构造器引用" class="headerlink" title="数组的构造器引用"></a>数组的构造器引用</h3><p>数组也是<code>Object</code>的子类对象，所有同样具有构造器，只是语法稍有不同。如果队友到Lambda的使用场景中时，需要一个函数式接口：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ArrayBuilder</span> </span>{</span><br><span class="line">    <span class="keyword">int</span>[] builderArray(<span class="keyword">int</span> length);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在应用该接口的时候，可以通过Lambda表达式：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] intArray(<span class="keyword">int</span> length, ArrayBuilder builder) {</span><br><span class="line">        <span class="keyword">return</span> builder.builderArray(length);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] ags)</span> </span>{</span><br><span class="line">        intArray(</span><br><span class="line">                <span class="number">10</span>,</span><br><span class="line">                i -&gt; <span class="keyword">new</span> <span class="keyword">int</span>[i]</span><br><span class="line">        );</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>但是更好的写法是使用数组的构造器引用：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] intArray(<span class="keyword">int</span> length, ArrayBuilder builder) {</span><br><span class="line">        <span class="keyword">return</span> builder.builderArray(length);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] ags)</span> </span>{</span><br><span class="line">        intArray(</span><br><span class="line">                <span class="number">10</span>,</span><br><span class="line">                <span class="keyword">int</span>[]::<span class="keyword">new</span></span><br><span class="line">        );</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
            <tag> Lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stream流</title>
      <link href="2020/11/07/75_Stream%E6%B5%81/"/>
      <url>2020/11/07/75_Stream%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h1 id="Stream流"><a href="#Stream流" class="headerlink" title="Stream流"></a>Stream流</h1><p>说到Stream便容易想到I/O Stream，而实际上，谁规定“流”就一定是“IO流”呢？在Java 8中，得益于Lambda所带 来的函数式编程，引入了一个全新的Stream概念，用于解决已有集合类库既有的弊端。</p><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><h3 id="传统集合的多步遍历代码"><a href="#传统集合的多步遍历代码" class="headerlink" title="传统集合的多步遍历代码"></a>传统集合的多步遍历代码</h3><p>几乎所有的集合（如 Collection 接口或 Map 接口等）都支持直接或间接的遍历操作。而当我们需要对集合中的元 素进行操作的时候，除了必需的添加、删除、获取外，最典型的就是集合遍历。例如：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"Jason"</span>);</span><br><span class="line">        list.add(<span class="string">"Charlie"</span>);</span><br><span class="line">        list.add(<span class="string">"June"</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s: list) {</span><br><span class="line">            System.out.print(s + <span class="string">"; "</span>);<span class="comment">//Jason; Charlie; June; </span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这是一段非常简单的集合遍历操作：对集合中的每一个字符串都进行打印输出操作。</p><h3 id="循环遍历的弊端"><a href="#循环遍历的弊端" class="headerlink" title="循环遍历的弊端"></a>循环遍历的弊端</h3><p>Java 8的Lambda让我们可以更加专注于做什么（What），而不是怎么做（How），这点此前已经结合内部类进行了对比说明。现在我们仔细体会一下上例代码，可以发现：</p><ul><li>for循环的语法就是“怎么做”</li><li>for循环的循环体才是“做什么”</li></ul><p>为什么使用循环？因为要进行遍历。但循环是遍历的唯一方式吗？遍历是指每一个元素逐一进行处理，而并不是从 第一个到最后一个顺次处理的循环。前者是目的，后者是方式。</p><p>试想一下，如果希望对集合中的元素进行筛选过滤：</p><ol><li>将集合A根据条件一过滤为子集B；</li><li>. 然后再根据条件二过滤为子集C。</li></ol><p>那怎么办？在Java 8之前的做法可能为：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"Jason"</span>);</span><br><span class="line">        list.add(<span class="string">"Charlie"</span>);</span><br><span class="line">        list.add(<span class="string">"June"</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; list1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将集合A根据条件一过滤为子集B；</span></span><br><span class="line">        <span class="keyword">for</span> (String name: list) {</span><br><span class="line">            <span class="keyword">if</span> (name.startsWith(<span class="string">"J"</span>)) {</span><br><span class="line">                list1.add(name);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; list2 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 然后再根据条件二过滤为子集C。</span></span><br><span class="line">        <span class="keyword">for</span> (String name: list1) {</span><br><span class="line">            <span class="keyword">if</span>(name.length() == <span class="number">5</span>) {</span><br><span class="line">                list2.add(name);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历最后得到的集合C</span></span><br><span class="line">        <span class="keyword">for</span> (String name: list2) {</span><br><span class="line">            System.out.println(name);<span class="comment">//Jason</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这段代码中含有三个循环，每一个作用不同：</p><ol><li>首先筛选所有姓名中有J的人； </li><li> 然后筛选名字长度为5的人；</li><li>最后进行对结果进行打印输出。</li></ol><p>每当我们需要对集合中的元素进行操作的时候，总是需要进行循环、循环、再循环。这是理所当然的么？不是。循环是做事情的方式，而不是目的。另一方面，使用线性循环就意味着只能遍历一次。如果希望再次遍历，只能再使用另一个循环从头开始。</p><p>那，Lambda的衍生物Stream流能给我们带来怎样更加优雅的写法呢？</p><h3 id="Stream的更优写法"><a href="#Stream的更优写法" class="headerlink" title="Stream的更优写法"></a>Stream的更优写法</h3><p>下面来看一下借助Java 8的Stream API，什么才叫优雅：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"Jason"</span>);</span><br><span class="line">        list.add(<span class="string">"Charlie"</span>);</span><br><span class="line">        list.add(<span class="string">"June"</span>);</span><br><span class="line"></span><br><span class="line">        list.stream()</span><br><span class="line">                .filter( s -&gt; s.startsWith(<span class="string">"J"</span>))</span><br><span class="line">                .filter(s -&gt; s.length() == <span class="number">5</span>)</span><br><span class="line">                .forEach(System.out::println);<span class="comment">//Jason</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>直接阅读代码的字面意思即可完美展示无关逻辑方式的语义：获取流、过滤姓张、过滤长度为3、逐一打印。代码 中并没有体现使用线性循环或是其他任何算法进行遍历，我们真正要做的事情内容被更好地体现在代码中。</p><h2 id="流式思想概述"><a href="#流式思想概述" class="headerlink" title="流式思想概述"></a>流式思想概述</h2><blockquote><p>注意：请暂时忘记对传统IO流的固有印象！</p></blockquote><p>整体来看，流式思想类似于工厂车间的“生产流水线”。</p><p>当需要对多个元素进行操作（特别是多步操作）的时候，考虑到性能及便利性，我们应该首先拼好一个“模型”步骤 方案，然后再按照方案去执行它。</p><p>这张图（图丢了）中展示了过滤、映射、跳过、计数等多步操作，这是一种集合元素的处理方案，而方案就是一种“函数模 型”。图中的每一个方框都是一个“流”，调用指定的方法，可以从一个流模型转换为另一个流模型。而最右侧的数字 3是最终结果。 这里的 filter 、 map 、 skip 都是在对函数模型进行操作，集合元素并没有真正被处理。只有当终结方法 count 执行的时候，整个模型才会按照指定策略执行操作。而这得益于Lambda的延迟执行特性。</p><blockquote><p>备注：“Stream流”其实是一个集合元素的函数模型，它并不是集合，也不是数据结构，其本身并不存储任何 元素（或其地址值）。</p></blockquote><p>Stream（流）是一个来自数据源的元素队列.</p><ol><li>元素是特定类型的对象，形成一个队列。 Java中的Stream并不会存储元素，而是按需计算。</li><li>数据源 流的来源。 可以是集合，数组 等。</li></ol><p>和以前的Collection操作不同， Stream操作还有两个基础的特征：</p><ol><li><strong>Pipelining</strong>: 中间操作都会返回流对象本身。 这样多个操作可以串联成一个管道， 如同流式风格（fluent style）。 这样做可以对操作进行优化， 比如延迟执行(laziness)和短路( short-circuiting)。</li><li><strong>内部迭代</strong>： 以前对集合遍历都是通过Iterator或者增强for的方式, 显式的在集合外部进行迭代， 这叫做外部迭代。 Stream提供了内部迭代的方式，流可以直接调用遍历方法。</li></ol><p>当使用一个流的时候，通常包含三个基本步骤：获取一个数据源（source）——&gt; 数据转换——&gt; 执行操作获取想要的结果。每次转换原有 Stream 对象不改变，返回一个新的 Stream 对象（可以有多次转换），这就允许对其操作可以 像链条一样排列，变成一个管道。</p><h2 id="获取流"><a href="#获取流" class="headerlink" title="获取流"></a>获取流</h2><p><code>java.util.stream.Stream&lt;T&gt;</code>是Java 8新加入的最常用的流接口（这并不是一个函数式接口）。</p><p>获取一个流非常简单，有以下几种常用的方式：</p><ol><li>所有的<code>Collection</code>集合都可以通过其默认方法<code>stream()</code>获取流；</li><li><code>Stream</code>接口的静态方法<code>of()</code>可以获取数组对应的流。</li></ol><h3 id="根据Collection获取流"><a href="#根据Collection获取流" class="headerlink" title="根据Collection获取流"></a>根据Collection获取流</h3><p>首先，<code>java.util.Collection</code>接口中加入了默认方法<code>stream</code>用来获取流，所以其所有实现类均可通过这个方法获取流。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//创建List集合</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//向集合中添加元素</span></span><br><span class="line">        Collections.addAll(list,<span class="string">"First"</span>,<span class="string">"Second"</span>,<span class="string">"Third"</span>);</span><br><span class="line">        <span class="comment">//获取流</span></span><br><span class="line">        Stream&lt;String&gt; stream1 = list.stream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建set集合</span></span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="comment">//向集合中添加元素</span></span><br><span class="line">        Collections.addAll(set,<span class="string">"First"</span>,<span class="string">"Second"</span>,<span class="string">"Third"</span>);</span><br><span class="line">        <span class="comment">//获取流</span></span><br><span class="line">        Stream&lt;String&gt; stream2 = set.stream();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="根据Map获取流"><a href="#根据Map获取流" class="headerlink" title="根据Map获取流"></a>根据Map获取流</h3><p><code>java.util.Map</code>接口不是<code>Collection</code>的子接口，且其K-V数据结构不符合流元素的单一特征，所以获取对应的流需要分key、value或entry等情况：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//创建Map集合</span></span><br><span class="line">        Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//向集合中添加元素</span></span><br><span class="line">        map.put(<span class="string">"First"</span>,<span class="string">"Jason"</span>);</span><br><span class="line">        map.put(<span class="string">"Second"</span>,<span class="string">"Charlie"</span>);</span><br><span class="line">        map.put(<span class="string">"Third"</span>,<span class="string">"June"</span>);</span><br><span class="line">        <span class="comment">//获取keySet集合的流</span></span><br><span class="line">        Stream&lt;String&gt; stream1 = map.keySet().stream();</span><br><span class="line">        <span class="comment">//获取valueSet集合的流</span></span><br><span class="line">        Stream&lt;String&gt; stream2 = map.values().stream();</span><br><span class="line">        <span class="comment">//获取entrySet集合中的流</span></span><br><span class="line">        Stream&lt;Map.Entry&lt;String, String&gt;&gt; stream3 = map.entrySet().stream();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="根据数组获取流"><a href="#根据数组获取流" class="headerlink" title="根据数组获取流"></a>根据数组获取流</h3><p>如果使用的不是集合或映射而是数组，由于数组对象不可能添加默认方法，所以<code>Stream</code>接口中提供了静态方法<code>of()</code>来获取流：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//创建一个字符串数组</span></span><br><span class="line">        String[] array = { <span class="string">"Jason"</span>, <span class="string">"Charlie"</span>, <span class="string">"June"</span>};</span><br><span class="line">        <span class="comment">//获取数组的流</span></span><br><span class="line">        Stream&lt;String&gt; stream = Stream.of(array);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>备注： of 方法的参数其实是一个可变参数，所以支持数组。</p></blockquote><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><p>流模型的操作很丰富，这里介绍一些常用的API。这些方法可以被分成两种：</p><ol><li>延迟方法：返回值类型仍然是<code>Stream</code>接口自身类型的方法，因此支持链式调用。</li><li>终结方法：返回值类型不再是<code>Stream</code>接口自身类型的方法，因此不再支持类似<code>StringBuilder</code>那样的链式调用。本小节中，终结方法包含<code>count()</code>和<code>forEach()</code>方法。</li></ol><blockquote><p>备注：本小节之外的更多方法，请自行参考API文档。</p></blockquote><h3 id="逐一处理：forEach"><a href="#逐一处理：forEach" class="headerlink" title="逐一处理：forEach"></a>逐一处理：forEach</h3><p>虽然方法名字为<code>forEach</code>，但是与for循环中的<code>for-each</code>不同。JDK源代码为：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; action)</span></span>;</span><br></pre></td></tr></tbody></table></figure><p>该方法接收一个<code>Consumer</code>接口函数，会将每一个流元素交给该函数进行处理。</p><h3 id="过滤：filter"><a href="#过滤：filter" class="headerlink" title="过滤：filter"></a>过滤：filter</h3><p>可以通过<code>filter</code>方法将一个流转换成另一个子集流。方法签名：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Stream&lt;T&gt; <span class="title">filter</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> T&gt; predicate)</span></span>;</span><br></pre></td></tr></tbody></table></figure><p>该接口接收一个<code>Predicate</code>函数式接口参数（可以是一个Lambda或方法引用）作为筛选条件。</p><p><strong>基本使用</strong></p><p><code>Stream</code>流中的<code>filter()</code>方法基本使用的代码如：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//传入多个参数，相当于获取字符串数组的流</span></span><br><span class="line">        Stream&lt;String&gt; original = Stream.of(<span class="string">"德玛西亚"</span>,<span class="string">"德高望重"</span>,<span class="string">"得意洋洋"</span>);</span><br><span class="line">        <span class="comment">//对刚获取的字符串数组的流进行过滤</span></span><br><span class="line">        Stream&lt;String&gt; result = original.filter(s -&gt; s.startsWith(<span class="string">"德"</span>));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在这里通过Lambda表达式来指定了筛选的条件：必须含有“德”字。</p><h3 id="映射：map"><a href="#映射：map" class="headerlink" title="映射：map"></a>映射：map</h3><p>如果需要将流中的元素映射到另一个流中，可是使用<code>map</code>方法。方法签名：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;R&gt; <span class="function">Stream&lt;R&gt; <span class="title">map</span><span class="params">(Function&lt;? <span class="keyword">super</span> T, ? extends R&gt; mapper)</span></span>;</span><br></pre></td></tr></tbody></table></figure><p>该接口需要一个<code>Function</code>函数式接口参数，可以将当前流中T类型数据转换为另一种R类型的流。</p><p><strong>基本使用</strong></p><p><code>Stream</code>流中的<code>map()</code>方法基本使用的代码如：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//创建一个字符串数组</span></span><br><span class="line">        String[] strArr = { <span class="string">"10"</span>, <span class="string">"20"</span>, <span class="string">"30"</span>};</span><br><span class="line">        <span class="comment">//获取字符串数组的流</span></span><br><span class="line">        Stream&lt;String&gt; original = Stream.of(strArr);</span><br><span class="line">        <span class="comment">//使用map()将String类型的数据映射为Integer类型的数据</span></span><br><span class="line">        Stream&lt;Integer&gt; result = original.map(s -&gt; Integer.parseInt(s));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这段代码中， map 方法的参数通过方法引用，将字符串类型转换成为了int类型（并自动装箱为 Integer 类对 象）。</p><h3 id="统计个数：count"><a href="#统计个数：count" class="headerlink" title="统计个数：count"></a>统计个数：count</h3><p>正如旧集合<code>Collection</code>当中的<code>size()</code>方法一样，Stream流提供了<code>count()</code>方法来计算流元素的个数：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">count</span><span class="params">()</span></span>;</span><br></pre></td></tr></tbody></table></figure><p>该方法返回一个<code>long</code>值代表元素个数（集合的size返回是int值）。</p><p><strong>基本使用</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//获取字符串数组的流</span></span><br><span class="line">        Stream&lt;String&gt; original = Stream.of(<span class="string">"First"</span>,<span class="string">"Second"</span>,<span class="string">"Threes"</span>);</span><br><span class="line">        <span class="comment">//计算流中元素的个数</span></span><br><span class="line">        <span class="keyword">long</span> num = original.count();</span><br><span class="line">        System.out.println(num);<span class="comment">//3</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="取用前几个：limit"><a href="#取用前几个：limit" class="headerlink" title="取用前几个：limit"></a>取用前几个：limit</h3><p><code>limit()</code>方法可以对流进行截取，只取用前n个。方法签名：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Stream&lt;T&gt; <span class="title">limit</span><span class="params">(<span class="keyword">long</span> maxSize)</span></span>;</span><br></pre></td></tr></tbody></table></figure><p>参数是一个long型，如果集合当前长度大于参数则进行截取；否则不进行操作。基本使用：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//获取字符串数组的流</span></span><br><span class="line">        Stream&lt;String&gt; original = Stream.of(<span class="string">"Jason"</span>,<span class="string">"Charlie"</span>,<span class="string">"count"</span>,<span class="string">"fuck"</span>,<span class="string">"refactor"</span>);</span><br><span class="line">        <span class="comment">//对流进行截取</span></span><br><span class="line">        Stream&lt;String&gt; result = original.limit(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//获取流中元素的个数</span></span><br><span class="line">        <span class="keyword">long</span> num = result.count();</span><br><span class="line">        System.out.println(num);<span class="comment">//3</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="跳过前几个：skip"><a href="#跳过前几个：skip" class="headerlink" title="跳过前几个：skip"></a>跳过前几个：skip</h3><p>如果希望跳过前几个元素，可以使用<code>skip</code>方法获取一个截取之后的新流：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Stream&lt;T&gt; <span class="title">skip</span><span class="params">(<span class="keyword">long</span> n)</span></span>;</span><br></pre></td></tr></tbody></table></figure><p>如果流的当前长度大于n，则跳过前n个；否则将会得到一个长度为0的空流。基本使用：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//获取字符串数组的流</span></span><br><span class="line">        Stream&lt;String&gt; original = Stream.of(<span class="string">"Jason"</span>,<span class="string">"Stream"</span>,<span class="string">"English"</span>,<span class="string">"America"</span>,<span class="string">"Charlie"</span>);</span><br><span class="line">        <span class="comment">//使用skip()跳到前几个</span></span><br><span class="line">        Stream&lt;String&gt; result = original.skip(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//计算流中的元素个数</span></span><br><span class="line">        <span class="keyword">long</span> num = result.count();</span><br><span class="line">        System.out.println(num);<span class="comment">//2</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="组合：concat"><a href="#组合：concat" class="headerlink" title="组合：concat"></a>组合：concat</h3><p>如果有两个流，希望合并成为一个流，那么可以使用<code>Stream</code>接口的静态方法<code>concat</code>：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;T&gt; <span class="function">Stream&lt;T&gt; <span class="title">concat</span><span class="params">(Stream&lt;? extends T&gt; a, Stream&lt;? extends T&gt; b)</span></span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>这是一个静态方法，与<code>java.lang.String</code>当中的<code>concat()</code>方法不同。</p></blockquote><p>该方法的基本使用代码如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//获取字符串数组流A</span></span><br><span class="line">        Stream&lt;String&gt; streamA = Stream.of(<span class="string">"Jason"</span>,<span class="string">"Charlie"</span>,<span class="string">"June"</span>);</span><br><span class="line">        <span class="comment">//获取字符串数组流B</span></span><br><span class="line">        Stream&lt;String&gt; streamB = Stream.of(<span class="string">"America"</span>,<span class="string">"English"</span>,<span class="string">"France"</span>);</span><br><span class="line">        <span class="comment">//使用静态方法concat()合并两个流</span></span><br><span class="line">        Stream&lt;String&gt; streamC = Stream.concat(streamA, streamB);</span><br><span class="line">        <span class="comment">//计算合并后得到的流的元素个数</span></span><br><span class="line">        <span class="keyword">long</span> num = streamC.count();</span><br><span class="line">        System.out.println(num);<span class="comment">//6</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="练习一：集合元素处理（传统方法）"><a href="#练习一：集合元素处理（传统方法）" class="headerlink" title="练习一：集合元素处理（传统方法）"></a>练习一：集合元素处理（传统方法）</h3><p><strong>题目</strong></p><p>现在有两个<code>ArrayList</code>集合存储队伍当中的多个成员姓名，要求使用传统的for循环（或增强for循环）依次进行以下若干操作步骤：</p><ol><li>第一个队伍只要名字为3个字的成员姓名；存储到一个新集合中。</li><li>第一个队伍筛选之后只要前3个人；存储到一个新集合中。</li><li>第二个队伍只要姓张的成员姓名；存储到一个新集合中。</li><li>第二个队伍筛选之后不要前2个人；存储到一个新集合中。</li><li>将两个队伍合并为一个新队伍；存储到一个新集合中。</li><li>根据姓名创建<code>Person</code>对象；存储到一个新集合中。</li><li>打印整个队伍的<code>Person</code>对象信息。</li></ol><p>两支队伍：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//第一支队伍</span></span><br><span class="line">        ArrayList&lt;String&gt; firstTeam = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Collections.addAll(firstTeam,<span class="string">"迪丽热巴"</span>,<span class="string">"宋远桥"</span>,</span><br><span class="line">                <span class="string">"苏星河"</span>, <span class="string">"石破天"</span>,<span class="string">"石中玉"</span>,<span class="string">"老子"</span>,<span class="string">"庄子"</span>,<span class="string">"洪七公"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第二支队伍</span></span><br><span class="line">        ArrayList&lt;String&gt; secondTeam = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Collections.addAll(secondTeam,<span class="string">"古力娜扎"</span>,<span class="string">"张无忌"</span>,</span><br><span class="line">                <span class="string">"赵丽颖"</span>,<span class="string">"张三丰"</span>,<span class="string">"尼古拉斯赵四"</span>,<span class="string">"张天爱"</span>,<span class="string">"张二狗"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>Person</code>类：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//constructor</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>{}</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person{"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//setter and getter</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">       <span class="keyword">return</span> name; </span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>解答</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//constructor</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>{}</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person{"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//setter and getter</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//第一支队伍</span></span><br><span class="line">        ArrayList&lt;String&gt; firstTeam = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Collections.addAll(firstTeam,<span class="string">"迪丽热巴"</span>,<span class="string">"宋远桥"</span>,</span><br><span class="line">                <span class="string">"苏星河"</span>, <span class="string">"石破天"</span>,<span class="string">"石中玉"</span>,<span class="string">"老子"</span>,<span class="string">"庄子"</span>,<span class="string">"洪七公"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第二支队伍</span></span><br><span class="line">        ArrayList&lt;String&gt; secondTeam = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Collections.addAll(secondTeam,<span class="string">"古力娜扎"</span>,<span class="string">"张无忌"</span>,</span><br><span class="line">                <span class="string">"赵丽颖"</span>,<span class="string">"张三丰"</span>,<span class="string">"尼古拉斯赵四"</span>,<span class="string">"张天爱"</span>,<span class="string">"张二狗"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第一个队伍只要名字为3个字的</span></span><br><span class="line">        ArrayList&lt;String&gt; firstTeam02 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String s: firstTeam) {</span><br><span class="line">            <span class="keyword">if</span> (s.length() == <span class="number">3</span>) {</span><br><span class="line">                firstTeam02.add(s);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//第一支队伍只要筛选后的前三个人</span></span><br><span class="line">        ArrayList&lt;String &gt; firstTeam03 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) {</span><br><span class="line">            firstTeam03.add(firstTeam02.get(i));</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第二支队伍只要姓张的人</span></span><br><span class="line">        ArrayList&lt;String&gt; secondTeam02 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String name: secondTeam) {</span><br><span class="line">            <span class="keyword">if</span> (name.contains(<span class="string">"张"</span>)) {</span><br><span class="line">                secondTeam02.add(name);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//第二支队伍不要筛选后的前两个人</span></span><br><span class="line">        ArrayList&lt;String&gt; secondTeam03 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; secondTeam02.size(); i++) {</span><br><span class="line">            secondTeam03.add(secondTeam02.get(i));</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//合并筛选后的两支队伍</span></span><br><span class="line">        ArrayList&lt;String&gt; team = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String name: firstTeam03) {</span><br><span class="line">            team.add(name);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (String name: secondTeam03) {</span><br><span class="line">            team.add(name);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据姓名创建Person对象，并添加到新的集合中</span></span><br><span class="line">        ArrayList&lt;Person&gt; perList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String name: team) {</span><br><span class="line">            perList.add(<span class="keyword">new</span> Person(name));</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印整个队伍的Person对象信息</span></span><br><span class="line">        <span class="keyword">for</span> (Person p: perList) {</span><br><span class="line">            System.out.println(p);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">//结果：</span></span><br><span class="line"><span class="comment">//Person{name='宋远桥'}</span></span><br><span class="line"><span class="comment">//Person{name='苏星河'}</span></span><br><span class="line"><span class="comment">//Person{name='石破天'}</span></span><br><span class="line"><span class="comment">//Person{name='张天爱'}</span></span><br><span class="line"><span class="comment">//Person{name='张二狗'}</span></span><br></pre></td></tr></tbody></table></figure><h3 id="练习二：集合元素处理（Stream方式）"><a href="#练习二：集合元素处理（Stream方式）" class="headerlink" title="练习二：集合元素处理（Stream方式）"></a>练习二：集合元素处理（Stream方式）</h3><p><strong>题目</strong></p><p>将上一题当中的传统for循环写法更换为Stream流式处理方式。两个集合的初始内容不变，<code>Person</code>类的定义也不变。</p><p><strong>解答</strong></p><p>等效的<code>Stream</code>流式处理代码为：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//constructor</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>{}</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person{"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//setter and getter</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//第一支队伍</span></span><br><span class="line">        ArrayList&lt;String&gt; one = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Collections.addAll(one,<span class="string">"迪丽热巴"</span>,<span class="string">"宋远桥"</span>,</span><br><span class="line">                <span class="string">"苏星河"</span>, <span class="string">"石破天"</span>,<span class="string">"石中玉"</span>,<span class="string">"老子"</span>,<span class="string">"庄子"</span>,<span class="string">"洪七公"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第二支队伍</span></span><br><span class="line">        ArrayList&lt;String&gt; two = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Collections.addAll(two,<span class="string">"古力娜扎"</span>,<span class="string">"张无忌"</span>,</span><br><span class="line">                <span class="string">"赵丽颖"</span>,<span class="string">"张三丰"</span>,<span class="string">"尼古拉斯赵四"</span>,<span class="string">"张天爱"</span>,<span class="string">"张二狗"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第一个队伍只要名字为3个字的成员姓名；</span></span><br><span class="line">        <span class="comment">// 第一个队伍筛选之后只要前3个人；</span></span><br><span class="line">        Stream&lt;String&gt; streamOne = one.stream().filter(s -&gt; s.length() == <span class="number">3</span>).limit(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二个队伍只要姓张的成员姓名；</span></span><br><span class="line">        <span class="comment">// 第二个队伍筛选之后不要前2个人；</span></span><br><span class="line">        Stream&lt;String&gt; streamTwo = two.stream().filter(s -&gt; s.startsWith(<span class="string">"张"</span>)).skip(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将两个队伍合并为一个队伍；</span></span><br><span class="line">        <span class="comment">// 根据姓名创建Person对象；</span></span><br><span class="line">        <span class="comment">// 打印整个队伍的Person对象信息。</span></span><br><span class="line">        Stream.concat(streamOne,streamTwo).map(Person::<span class="keyword">new</span>).forEach(System.out::println);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">//结果：</span></span><br><span class="line"><span class="comment">//Person{name='宋远桥'}</span></span><br><span class="line"><span class="comment">//Person{name='苏星河'}</span></span><br><span class="line"><span class="comment">//Person{name='石破天'}</span></span><br><span class="line"><span class="comment">//Person{name='张天爱'}</span></span><br><span class="line"><span class="comment">//Person{name='张二狗'}</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
            <tag> Lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用函数式接口</title>
      <link href="2020/11/06/74_%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/"/>
      <url>2020/11/06/74_%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="常用函数式接口"><a href="#常用函数式接口" class="headerlink" title="常用函数式接口"></a>常用函数式接口</h1><p>JDK提供了大量常用的函数式接口以丰富Lambda的典型使用场景，它们主要在<code>java.util.function</code>包中被提供。 下面是最简单的几个接口及使用示例。</p><h2 id="Supplier接口"><a href="#Supplier接口" class="headerlink" title="Supplier接口"></a>Supplier接口</h2><p><code>java.util.function.Supplier&lt;T&gt;</code>接口仅包含一个无参的方法：<code>T get()</code>。用来获取一个泛型参数指定类型的对 象数据。由于这是一个函数式接口，这也就意味着对应的Lambda表达式需要“对外提供”一个符合泛型类型的对象 数据。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.Supplier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getString</span><span class="params">(Supplier&lt;String&gt; sup)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> sup.get();</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        String s1 = <span class="string">"Jason"</span>;</span><br><span class="line">        String s2 = <span class="string">"Spring"</span>;</span><br><span class="line">        String s3 = getString(() -&gt; s1 + s2);</span><br><span class="line">        System.out.println(s3);<span class="comment">//JasonSpring</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="练习：求数组元素最大值"><a href="#练习：求数组元素最大值" class="headerlink" title="练习：求数组元素最大值"></a>练习：求数组元素最大值</h3><p><strong>案例要求</strong></p><p>使用<code>Supplier</code>接口作为方法参数类型，通过Lambda表达式求出int数组中的最大值。提示：接口的泛型请使用<code>java.lang.Integer</code>类。</p><p><strong>案例实现</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.Supplier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Integer <span class="title">calc</span><span class="params">(Supplier&lt;Integer&gt; sup)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> sup.get();</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span>[] arr = {<span class="number">23</span>,<span class="number">12</span>,<span class="number">43</span>,<span class="number">11</span>};</span><br><span class="line">        <span class="keyword">int</span> maxNum = calc(() -&gt; {</span><br><span class="line">            <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i: arr) {</span><br><span class="line">                <span class="keyword">if</span> (i &gt; max) {</span><br><span class="line">                    max = i;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> max;</span><br><span class="line">        });</span><br><span class="line">        System.out.println(maxNum);<span class="comment">//43</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Consumer接口"><a href="#Consumer接口" class="headerlink" title="Consumer接口"></a>Consumer接口</h2><p><code>java.util.function.Consumer&lt;T&gt;</code>接口则正好与Supplier接口相反，它不是生产一个数据，而是消费一个数据， 其数据类型由泛型决定。</p><h3 id="抽象方法：accept"><a href="#抽象方法：accept" class="headerlink" title="抽象方法：accept"></a>抽象方法：accept</h3><p><code>Consumer</code>接口中包含抽象方法<code>void accept(T t)</code>，意为消费一个指定泛型的数据。基本使用如：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">consumeString</span><span class="params">(Consumer&lt;String&gt; function)</span> </span>{</span><br><span class="line">        function.accept(<span class="string">"Jason"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        consumeString(s -&gt; System.out.println(s));<span class="comment">//Jason</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="默认方法：andThen"><a href="#默认方法：andThen" class="headerlink" title="默认方法：andThen"></a>默认方法：andThen</h3><p>如果一个方法的参数和返回值全都是 Consumer 类型，那么就可以实现效果：消费数据的时候，首先做一个操作， 然后再做一个操作，实现组合。而这个方法就是 Consumer 接口中的default方法 andThen 。下面是JDK的源代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">default</span> Consumer&lt;T&gt; <span class="title">andThen</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; after)</span> </span>{</span><br><span class="line">    Object.requireNonNull(after);</span><br><span class="line">    <span class="keyword">return</span> (T t) -&gt; { accept(t); after.accept(t); };</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>备注：<code>java.util.Object</code> 的 <code>requireNonNull</code> 静态方法将会在参数为null时主动抛出 <code>NullPointException</code>异常。这省去了重复编写if语句和抛出空指针异常的麻烦。</p></blockquote><p>要想实现组合，需要两个或多个Lambda表达式即可，而 andThen 的语义正是“一步接一步”操作。例如两个步骤组 合的情况：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">consumeString</span><span class="params">(Consumer&lt;String&gt; one, Consumer&lt;String&gt; two)</span> </span>{</span><br><span class="line">        one.andThen(two).accept(<span class="string">"Jason"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        consumeString(</span><br><span class="line">                s -&gt; System.out.println(s.toUpperCase()),<span class="comment">//JASON</span></span><br><span class="line">                s -&gt; System.out.println(s.toLowerCase())<span class="comment">//jason</span></span><br><span class="line">        );</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>运行结果将会首先打印完全大写的Jason，然后打印完全小写的jason。当然，通过链式写法可以实现更多步骤的 组合。</p><h3 id="练习：格式化打印信息"><a href="#练习：格式化打印信息" class="headerlink" title="练习：格式化打印信息"></a>练习：格式化打印信息</h3><p><strong>题目</strong></p><p>下面的字符串数组当中存有多条信息，请按照格式“ 姓名：XX。性别：XX。 ”的格式将信息打印出来。要求将打印姓 名的动作作为第一个 Consumer 接口的Lambda实例，将打印性别的动作作为第二个 Consumer 接口的Lambda实 例，将两个 Consumer 接口按照顺序“拼接”到一起。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    String[] array = { <span class="string">"迪丽热巴,女"</span>, <span class="string">"古力娜扎,女"</span>, <span class="string">"马尔扎哈,男"</span> };</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>解答</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printInfo</span><span class="params">(Consumer&lt;String&gt; one, Consumer&lt;String&gt; two, String[] array)</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (String info: array) {</span><br><span class="line">            one.andThen(two).accept(info);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        String[] array = {<span class="string">"Jason,man"</span>,<span class="string">"Bob,man"</span>,<span class="string">"June,woman"</span>};</span><br><span class="line">        printInfo(</span><br><span class="line">                s -&gt; System.out.print(<span class="string">"姓名："</span> + s.split(<span class="string">","</span>)[<span class="number">0</span>]),</span><br><span class="line">                s -&gt; System.out.println(<span class="string">"; 性别："</span> + s.split(<span class="string">","</span>)[<span class="number">1</span>]),</span><br><span class="line">                array</span><br><span class="line">        );</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">//结果：</span></span><br><span class="line"><span class="comment">//姓名：Jason; 性别：man</span></span><br><span class="line"><span class="comment">//姓名：Bob; 性别：man</span></span><br><span class="line"><span class="comment">//姓名：June; 性别：woman</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Predicate"><a href="#Predicate" class="headerlink" title="Predicate"></a>Predicate</h2><p>有时候我们需要对某种类型的数据进行判断，从而得到一个boolean值结果。这时可以使用<code>java.util.fucntion.Predicate&lt;T&gt;</code>接口。</p><h3 id="抽象方法：test"><a href="#抽象方法：test" class="headerlink" title="抽象方法：test"></a>抽象方法：test</h3><p><code>Predicate</code>接口中包含一个抽象方法：<code>boolean test(T t)</code>。用于条件判断的场景：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(Predicate&lt;String&gt; function)</span> </span>{</span><br><span class="line">        <span class="keyword">boolean</span> veryLong = function.test(<span class="string">"你到底在干嘛呀，你给我说说"</span>);</span><br><span class="line">        System.out.println(<span class="string">"我写的这个字符串是不是很长："</span> + veryLong);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        method( s -&gt; s.length() &gt; <span class="number">5</span>);<span class="comment">//我写的这个字符串是不是很长：true</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>条件判断的标准是传入的Lambda表达式逻辑，只要字符串长度大于5则认为很长。</p><h3 id="默认方法：and"><a href="#默认方法：and" class="headerlink" title="默认方法：and"></a>默认方法：and</h3><p>既然是条件判断，就会存在与、或、非三种常见的逻辑关系。其中将两个<code>Predicate</code>条件使用<code>与</code>逻辑连接起来实现<code>并且</code>的效果时，可以使用默认的<code>and()</code>方法。其JDK源码为：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">and</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> T&gt; other)</span> </span>{</span><br><span class="line">    Object.requireNonNull(other);</span><br><span class="line">    <span class="keyword">return</span> (t) -&gt; test(t) &amp;&amp; other.test(t);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果要判断一个字符串既要包含大写“H”，又要包含大写“W”，那么：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(Predicate&lt;String&gt; one, Predicate&lt;String&gt; two, String s)</span> </span>{</span><br><span class="line">        <span class="keyword">boolean</span> isValid = one.and(two).test(s);</span><br><span class="line">        System.out.println(<span class="string">"字符串符合要求："</span> + isValid);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        method(</span><br><span class="line">                s -&gt; s.contains(<span class="string">"H"</span>),</span><br><span class="line">                s -&gt; s.contains(<span class="string">"W"</span>),</span><br><span class="line">                <span class="string">"HelloWorld"</span></span><br><span class="line">        );<span class="comment">//字符串符合要求：true</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="默认方法：or"><a href="#默认方法：or" class="headerlink" title="默认方法：or"></a>默认方法：or</h3><p>与 and 的“与”类似，默认方法 or 实现逻辑关系中的“或”。JDK源码为：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">default</span> Prdicate&lt;T&gt; <span class="title">or</span> <span class="params">(Predicate&lt;? <span class="keyword">super</span> T&gt; other)</span> </span>{</span><br><span class="line">    Objects.requireNonNull(other);</span><br><span class="line">    <span class="keyword">return</span> (t) -&gt; test(t) || other.test(t);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果希望实现逻辑“字符串包含大写H或者包含大写W”，那么代码只需要将“and”修改为“or”名称即可，其他都不 变：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(Predicate&lt;String&gt; one, Predicate&lt;String&gt; two, String s)</span> </span>{</span><br><span class="line">        <span class="keyword">boolean</span> isValid = one.or(two).test(s);</span><br><span class="line">        System.out.println(<span class="string">"字符串是否符合要求："</span> + isValid);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        method(</span><br><span class="line">                s -&gt; s.contains(<span class="string">"H"</span>),</span><br><span class="line">                s -&gt; s.contains(<span class="string">"W"</span>),</span><br><span class="line">                <span class="string">"helloWorld"</span></span><br><span class="line">        );<span class="comment">//字符串是否符合要求：true</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="默认方法：negate"><a href="#默认方法：negate" class="headerlink" title="默认方法：negate"></a>默认方法：negate</h3><p>与”、“或”已经了解了，剩下的“非”（取反）也会简单。默认方法 negate 的JDK源代码为：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">negate</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> (t) -&gt; !test(t);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>从实现中很容易看出，它是执行了test方法之后，对结果boolean值进行“!”取反而已。一定要在 test 方法调用之前 调用 negate 方法，正如 and 和 or 方法一样：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(Predicate&lt;String&gt; function, String s)</span> </span>{</span><br><span class="line">        <span class="keyword">boolean</span> isValid = function.negate().test(s);</span><br><span class="line">        System.out.println(<span class="string">"字符串的长度是否大于18："</span> + isValid);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        method(</span><br><span class="line">                s -&gt; s.length() &lt; <span class="number">5</span>,</span><br><span class="line">                <span class="string">"我的长度明显大于18啊，你这都看不出来啊？猪鼻啊，怎么这么菜呢！"</span></span><br><span class="line">        );<span class="comment">//字符串的长度是否大于18：true</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="练习：集合信息筛选"><a href="#练习：集合信息筛选" class="headerlink" title="练习：集合信息筛选"></a>练习：集合信息筛选</h3><p><strong>题目</strong></p><p>数组当中有多条“姓名+性别”的信息如下，请通过 Predicate 接口的拼装将符合要求的字符串筛选到集合 ArrayList 中，需要同时满足两个条件：</p><ol><li>必须为女生；</li><li> 姓名为4个字。</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String[] array = { <span class="string">"迪丽热巴,女"</span>, <span class="string">"古力娜扎,女"</span>, <span class="string">"马尔扎哈,男"</span>, <span class="string">"赵丽颖,女"</span> };</span><br></pre></td></tr></tbody></table></figure><p><strong>解答</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">method</span><span class="params">(Predicate&lt;String&gt; one, Predicate&lt;String&gt; two, String[] array)</span> </span>{</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String s : array) {</span><br><span class="line">            <span class="keyword">if</span> (one.and(two).test(s)) {</span><br><span class="line">                list.add(s);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        String[] array = {<span class="string">"迪丽热巴,女"</span>, <span class="string">"古力娜扎,女"</span>, <span class="string">"马尔扎哈,男"</span>, <span class="string">"赵丽颖,女"</span>};</span><br><span class="line">        List&lt;String&gt; list = method(</span><br><span class="line">                s -&gt; <span class="string">"女"</span>.equals(s.split(<span class="string">","</span>)[<span class="number">1</span>]),</span><br><span class="line">                s -&gt; s.split(<span class="string">","</span>)[<span class="number">0</span>].length() == <span class="number">4</span>,</span><br><span class="line">                array</span><br><span class="line">                );</span><br><span class="line">        System.out.println(list);<span class="comment">//[迪丽热巴,女, 古力娜扎,女]</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Function接口"><a href="#Function接口" class="headerlink" title="Function接口"></a>Function接口</h2><p><code>java.util.function.Function&lt;T,R&gt;</code>接口用来根据一个类型的数据得到另一个类型的数据，前者称为前置条件，后者称为后置条件。</p><h3 id="抽象方法：apply"><a href="#抽象方法：apply" class="headerlink" title="抽象方法：apply"></a>抽象方法：apply</h3><p><code>Function</code>接口中最主要的抽象方法为：<code>R apply(T t)</code>，根据类型T的参数获取类型R的返回值。</p><p><strong>代码演示</strong></p><p>将 String 类型转换为 Integer 类型。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(Function&lt;String, Integer&gt; function)</span> </span>{</span><br><span class="line">        Integer num = function.apply(<span class="string">"10"</span>);</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        method(s -&gt; Integer.parseInt(s));<span class="comment">//10</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>当然，最好是通过方法引用的写法。</p><h3 id="默认方法：andThen-1"><a href="#默认方法：andThen-1" class="headerlink" title="默认方法：andThen"></a>默认方法：andThen</h3><p><code>Function</code>接口中有一个默认的<code>andThen</code>方法，用来进行组合操作。JDK源代码如：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">default</span> &lt;V&gt; <span class="function">Function&lt;T,V&gt; <span class="title">andThen</span><span class="params">(Function&lt;? <span class="keyword">super</span> R, ? extends V&gt; after)</span> </span>{</span><br><span class="line">    Objects.requireNonNull(after);</span><br><span class="line">    <span class="keyword">return</span> (T t) -&gt; after.apply(apply(t));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>该方法同样用于“先做什么，再做什么”的场景，和 Consumer 中的 andThen 差不多：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(Function&lt;String,Integer&gt; one, Function&lt;Integer,Integer&gt; two, String s)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> num = one.andThen(two).apply(s);</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        method(</span><br><span class="line">                s -&gt; Integer.parseInt(s),</span><br><span class="line">                s -&gt; s *= <span class="number">10</span>,</span><br><span class="line">                <span class="string">"10"</span></span><br><span class="line">        );</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>第一个操作是将字符串解析成为int数字，第二个操作是乘以10。两个操作通过 andThen 按照前后顺序组合到了一 起。</p><blockquote><p>请注意，Function的前置条件泛型和后置条件泛型可以相同。</p></blockquote><h3 id="练习：自定义函数模型拼接"><a href="#练习：自定义函数模型拼接" class="headerlink" title="练习：自定义函数模型拼接"></a>练习：自定义函数模型拼接</h3><p><strong>题目</strong></p><p>请使用<code>Function</code>进行函数模式的拼接，按照顺序需要执行的多个函数操作为：</p><p><code>String str = "赵丽颖,20"</code></p><ol><li>将字符串截取数字年龄部分，得到字符串；</li><li>将上一步的字符串转换成为int类型的数字；</li><li> 将上一步的int数字累加100，得到结果int数字。</li></ol><p><strong>解答</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">method</span><span class="params">(Function&lt;String, Integer&gt; one, Function&lt;Integer, Integer&gt; two, String s)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> one.andThen(two).apply(s);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        String str = <span class="string">"赵丽颖,20"</span>;</span><br><span class="line">        <span class="keyword">int</span> num = method(</span><br><span class="line">                s -&gt; Integer.parseInt(s.split(<span class="string">","</span>)[<span class="number">1</span>]),</span><br><span class="line">                i -&gt; i += <span class="number">100</span>,</span><br><span class="line">                str</span><br><span class="line">        );</span><br><span class="line">        System.out.println(num);<span class="comment">//120</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
            <tag> Lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数式编程</title>
      <link href="2020/11/06/73_%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
      <url>2020/11/06/73_%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h1><p>在兼顾面向对象特性的基础上，Java语言通过Lambda表达式与方法引用等，为开发者打开了函数式编程的大门。 下面我们做一个初探。</p><h2 id="Lambda的延迟执行"><a href="#Lambda的延迟执行" class="headerlink" title="Lambda的延迟执行"></a>Lambda的延迟执行</h2><p>有些场景的代码执行后，结果不一定会被使用，从而造成性能浪费。而Lambda表达式是延迟执行的，这正好可以 作为解决方案，提升性能。</p><h3 id="性能浪费的日志案例"><a href="#性能浪费的日志案例" class="headerlink" title="性能浪费的日志案例"></a>性能浪费的日志案例</h3><p>日志可以帮助我们快速的定位问题，记录程序运行过程中的情况，以便项目的监控和优化。 一种典型的场景就是对参数进行有条件使用，例如对日志消息进行拼接后，在满足条件的情况下进行打印输出：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="comment">//自定义的日志方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(<span class="keyword">int</span> level, String msg)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (level == <span class="number">1</span>) {</span><br><span class="line">            System.out.println(msg);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        String s1 = <span class="string">"Error"</span>;</span><br><span class="line">        String s2 = <span class="string">" Message"</span>;</span><br><span class="line">        String s3 = <span class="string">" Found"</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//调用日志方法</span></span><br><span class="line">        log(<span class="number">1</span>, s1 + s2 + s3);<span class="comment">//Error Message Found</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这段代码存在问题：无论级别是否满足要求，作为 log 方法的第二个参数，三个字符串一定会首先被拼接并传入方 法内，然后才会进行级别判断。如果级别不符合要求，那么字符串的拼接操作就白做了，存在性能浪费。</p><blockquote><p>备注：SLF4J是应用非常广泛的日志框架，它在记录日志时为了解决这种性能浪费的问题，并不推荐首先进行字符串的拼接，而是将字符串的若干部分作为可变参数传入方法中，仅在日志级别满足要求的情况下才会进 行字符串拼接。例如： LOGGER.debug(“变量{}的取值为{}。”, “os”, “macOS”) ，其中的大括号 {} 为占位 符。如果满足日志级别要求，则会将“os”和“macOS”两个字符串依次拼接到大括号的位置；否则不会进行字 符串拼接。这也是一种可行解决方案，但Lambda可以做到更好。</p></blockquote><h3 id="体验Lambda的更优写法"><a href="#体验Lambda的更优写法" class="headerlink" title="体验Lambda的更优写法"></a>体验Lambda的更优写法</h3><p>使用Lambda必然需要一个函数式接口：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MessageBuilder</span> </span>{</span><br><span class="line">    <span class="function">String <span class="title">buildMessage</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>然后对<code>log</code>方法进行改造：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(<span class="keyword">int</span> level, MessageBuilder builder)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(level == <span class="number">1</span>) {</span><br><span class="line">            System.out.println(builder.buildMessage());</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        String s1 = <span class="string">"Error"</span>;</span><br><span class="line">        String s2 = <span class="string">" Message"</span>;</span><br><span class="line">        String s3 = <span class="string">" Found"</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//使用Lambda表达调用函数式接口</span></span><br><span class="line">        log(<span class="number">1</span>,() -&gt; s1 + s2 +s3);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这样一来，只有当级别满足要求的时候，才会进行三个字符串的拼接；否则三个字符串将不会进行拼接。</p><h2 id="证明Lambda的延迟"><a href="#证明Lambda的延迟" class="headerlink" title="证明Lambda的延迟"></a>证明Lambda的延迟</h2><p>下面的代码可以通过结果进行验证：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(<span class="keyword">int</span> level, MessageBuilder builder)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (level == <span class="number">1</span>) {</span><br><span class="line">            System.out.println(builder.buildMessage());</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        String s1 = <span class="string">"Error"</span>;</span><br><span class="line">        String s2 = <span class="string">" Message"</span>;</span><br><span class="line">        String s3 = <span class="string">" Found"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//检查当前面条件不满足时，后面的Lambda接口的中字符串是否拼接</span></span><br><span class="line">        log(<span class="number">2</span>, () -&gt; {</span><br><span class="line">            System.out.println(<span class="string">"Lambda执行"</span>);</span><br><span class="line">            <span class="keyword">return</span> s1 + s2 + s3;</span><br><span class="line">        });</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>从结果中可以看出，在不符合级别要求的情况下，Lambda将不会执行。从而达到节省性能的效果。</p><blockquote><p>扩展：实际上使用内部类也可以达到同样的效果，只是将代码操作延迟到了另外一个对象当中通过调用方法 来完成。而是否调用其所在方法是在条件判断之后才执行的。</p></blockquote><h2 id="使用Lambda作为参数和返回值"><a href="#使用Lambda作为参数和返回值" class="headerlink" title="使用Lambda作为参数和返回值"></a>使用Lambda作为参数和返回值</h2><p>如果抛开实现原理不说，Java中的Lambda表达式可以被当作是匿名内部类的替代品。如果方法的参数是一个函数式接口类型，那么就可以使用Lambda表达式进行替代。使用Lambda表达式作为方法参数，其实就是使用函数式接口作为方法参数。</p><p>例如<code>java.lang.Runnable</code>接口就是一个函数式接口，假设有一个<code>startThread()</code>方法使用该接口作为参数，那么就 可以使用Lambda进行传参。这种情况其实和 Thread 类的构造方法参数为 Runnable 没有本质区别。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">startThread</span><span class="params">(Runnable task)</span> </span>{</span><br><span class="line">        <span class="keyword">new</span> Thread(task).start();</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        startThread(() -&gt; System.out.println(Thread.currentThread().getName()+<span class="string">"正在运行"</span>));<span class="comment">//Thread-0正在运行</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>类似地，如果一个方法的返回值类型是一个函数式接口，那么就可以直接返回一个Lambda表达式。当需要通过一个方法来获取一个<code>java.util.Comparator</code>接口类型的对象作为排序器时,就可以调该方法获取。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Comparator&lt;String&gt; <span class="title">newComparator</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> (a,b) -&gt; b.length() - a.length();<span class="comment">//按字符串长度降序排序</span></span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//创建一个字符数组</span></span><br><span class="line">        String[] strArr = {<span class="string">"four"</span>,<span class="string">"one"</span>,<span class="string">"three"</span>};</span><br><span class="line">        <span class="comment">//打印字符数组</span></span><br><span class="line">        System.out.println(Arrays.toString(strArr));</span><br><span class="line">        <span class="comment">//对字符数组进行排序</span></span><br><span class="line">        Arrays.sort(strArr,newComparator());<span class="comment">//[four, one, three]</span></span><br><span class="line">        <span class="comment">//打印排序后的字符数组</span></span><br><span class="line">        System.out.println(Arrays.toString(strArr));<span class="comment">//[three, four, one]</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>其中直接return一个Lambda表达式即可。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
            <tag> Lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数式接口</title>
      <link href="2020/11/06/72_%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/"/>
      <url>2020/11/06/72_%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>函数式接口在Java中是指：<strong>有且仅有一个抽象方法的接口。</strong></p><p>函数式接口，即适用于函数式编程场景的接口。而Java中的函数式编程体现就是<strong>Lambda</strong>，所以函数式接口就是可以适用于Lambda使用的接口。只有确保接口中有且仅有一个抽象方法，Java中的Lambda才能顺利地进行推导。</p><blockquote><p><strong>“语法糖”</strong>是指使用更加方便，但是原理不变的代码语法。例如在遍历集合时使用的for-each语法，其实 底层的实现原理仍然是迭代器，这便是“语法糖”。从应用层面来讲，Java中的Lambda可以被当做是匿名内部类的“语法糖”，但是二者在原理上是不同的。</p></blockquote><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><p>只要确保接口中有且仅有一个抽象方法即可：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="class"><span class="keyword">interface</span> 接口名称 </span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> 返回值类型 方法名称(参数列表);</span><br><span class="line">    <span class="comment">//其他非抽象方法</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Person</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Say</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>与<code>@Overried</code>注解的作用类似，Java 8中专门为函数式接口引入了一个新的注解： <code>@FunctionalInterface</code>。该注解可用于一个接口的定义上.</p><p>一旦使用该注解来定义接口，编译器将会强制检查该接口是否确实有且仅有一个抽象方法，否则将会报错。需要注 意的是，即使不使用该注解，只要满足函数式接口的定义，这仍然是一个函数式接口，使用起来都一样。</p><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyfunctionalInterface</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">myMethod</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="练习：自定义函数式接口"><a href="#练习：自定义函数式接口" class="headerlink" title="练习：自定义函数式接口"></a>练习：自定义函数式接口</h2><p>对于刚刚定义好的 MyFunctionalInterface 函数式接口，典型使用场景就是作为方法的参数：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义函数接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyFunctionalInterface</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">myMethod</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="comment">//使用自定义的函数接口作为方法参数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(MyFunctionalInterface inter)</span> </span>{</span><br><span class="line">        <span class="comment">//调用自定义的函数接口的方法</span></span><br><span class="line">        inter.myMethod();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//调用上面的方法</span></span><br><span class="line">        doSomething(() -&gt; System.out.println(<span class="string">"Lambda执行啦！"</span>));<span class="comment">//Lambda执行啦！</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
            <tag> Lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP通信程序</title>
      <link href="2020/10/30/71_TCP%E9%80%9A%E4%BF%A1%E7%A8%8B%E5%BA%8F/"/>
      <url>2020/10/30/71_TCP%E9%80%9A%E4%BF%A1%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="TCP通信程序"><a href="#TCP通信程序" class="headerlink" title="TCP通信程序"></a>TCP通信程序</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>TCP通信能实现两台计算机之间的数据交互，通信的两端，要严格区分为客户端（Client）与服务端（Server）。</p><p><strong>两端通信时步骤：</strong></p><ol><li>服务端程序，需要事先启动，等待客户端的连接。</li><li>客户端主动连接服务器端，连接成功才能通信。服务端不可以主动连接客户端。</li></ol><p><strong>在Java中，提供了两个类用于实现TCP通信程序：</strong></p><ol><li><strong>客户端：</strong><code>java.net.Socket</code>类。创建<code>Socket</code>对象，向服务器发出连接请求，服务端响应请求，两者建立连接开始通信。</li><li><strong>服务端：</strong><code>java.net.ServerSocket</code>类。创建<code>ServerSocket</code>对象，相当于开启一个服务，并等待客户端的连接。</li></ol><h2 id="Socket类"><a href="#Socket类" class="headerlink" title="Socket类"></a>Socket类</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p><code>java.net.Socket</code>该类实现客户端套接字，套接字指的是两台设备之间通讯的端点。</p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><p><code>Socket(String host, int port)</code>：创建一个流套接字，并将其连接到指定主机上的指定端口号。如果指定的host是null ，则相当于指定地址为回送地址。  </p><blockquote><p>小贴士：回送地址(127.x.x.x) 是本机回送地址（Loopback Address），主要用于网络软件测试以及本地机进程间通信，无论什么程序，一旦使用回送地址发送数据，立即返回，不进行任何网络传输。</p></blockquote></li></ul><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            Socket client = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>, <span class="number">6666</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><ol><li><code>InputStream getInputStream()</code>：返回此套接字的输入流。<ul><li>如果此Scoket具有相关联的通道，则生成的InputStream 的所有操作也关联该通道。</li><li>关闭生成的InputStream也将关闭相关的Socket。</li></ul></li><li><code>OutputStream getOutputStream()</code>：返回此套接字的输出流。<ul><li>如果此Scoket具有相关联的通道，则生成的OutputStream 的所有操作也关联该通道。</li><li>关闭生成的OutputStream也将关闭相关的Socket。</li></ul></li><li><code>void close()</code>：关闭套接字。<ul><li>一旦一个socket被关闭，它不可再使用。</li><li>关闭此socket也将关闭相关的InputStream和OutputStream 。 </li></ul></li><li><code>void shutdownOutput()</code>：禁用此套接字的输出流。<ul><li>任何先前写出的数据将被发送，随后终止输出流。 </li></ul></li></ol><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">//通过传入主机名称和端口号，创建一个Socket对象</span></span><br><span class="line">            Socket client = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>, <span class="number">6666</span>);</span><br><span class="line">            <span class="comment">//获取此套接字的输入流</span></span><br><span class="line">            InputStream is = client.getInputStream();</span><br><span class="line">            <span class="comment">//获取此套接字的输出流</span></span><br><span class="line">            OutputStream os = client.getOutputStream();</span><br><span class="line">            <span class="comment">//禁用此套接字的输出流</span></span><br><span class="line">            client.shutdownOutput();</span><br><span class="line">            <span class="comment">//关闭此套接字</span></span><br><span class="line">            client.close();</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="ServerSocket类"><a href="#ServerSocket类" class="headerlink" title="ServerSocket类"></a>ServerSocket类</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><p><code>java.net.ServerSocket</code>这个类实现了服务器套接字，该对象等待通过网络的请求。</p><h3 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>ServerSocket(int port)</code>：创建一个服务器套接字，绑定到指定的端口。</li></ul><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">//创建一个服务器套接字，绑定到指定的端口。</span></span><br><span class="line">            ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h3><ul><li><code>Socket accept()</code>：侦听并接受连接，返回一个新的Socket对象，用于和客户端实现通信。该方法会一直阻塞直到建立连接。 </li></ul><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">//创建一个ServerSocket对象，并绑定到指定的端口上</span></span><br><span class="line">            ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line">            <span class="comment">//监听与此套接字建立的连接，并接受它</span></span><br><span class="line">            Socket client = server.accept();</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="简单的TCP网络程序"><a href="#简单的TCP网络程序" class="headerlink" title="简单的TCP网络程序"></a>简单的TCP网络程序</h2><h3 id="案例要求"><a href="#案例要求" class="headerlink" title="案例要求"></a>案例要求</h3><p>运用前面所学的<code>ServerSocket</code>类和<code>Socket</code>类及他们的常用方法，来实现一个<code>客户端</code>与<code>服务端</code>进行数据交互的程序。</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201030150315.jpg"></p><h3 id="案例实现"><a href="#案例实现" class="headerlink" title="案例实现"></a>案例实现</h3><p><strong>服务端</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerTCP</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        System.out.println(<span class="string">"服务端启动，等待连接..."</span>);</span><br><span class="line">        <span class="comment">// 1.创建ServerSocket对象，绑定端口，开始等待连接</span></span><br><span class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line">        <span class="comment">// 2.获取socket对象</span></span><br><span class="line">        Socket server = ss.accept();</span><br><span class="line">        <span class="comment">// 3.获取InputStream对象</span></span><br><span class="line">        InputStream is = server.getInputStream();</span><br><span class="line">        <span class="comment">// 4.读取客户端发送来的数据</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = is.read(bytes);</span><br><span class="line">        <span class="comment">// 5.打印读取到的数据</span></span><br><span class="line">        String mgs = <span class="keyword">new</span> String(bytes, <span class="number">0</span>, len);</span><br><span class="line">        System.out.println(mgs);</span><br><span class="line">        <span class="comment">// 6.获取OutputStream对象</span></span><br><span class="line">        OutputStream os = server.getOutputStream();</span><br><span class="line">        <span class="comment">// 7.给客户端回写数据</span></span><br><span class="line">        os.write(<span class="string">"我已经收到了您发送的数据，多些您呢~"</span>.getBytes());</span><br><span class="line">        <span class="comment">// 8.关闭资源</span></span><br><span class="line">        os.close();</span><br><span class="line">        is.close();</span><br><span class="line">        server.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">//结果：</span></span><br><span class="line"><span class="comment">//服务端启动，等待连接...</span></span><br><span class="line"><span class="comment">//服务器你在干什么呢？</span></span><br></pre></td></tr></tbody></table></figure><p><strong>客户端</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientTCP</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        System.out.println(<span class="string">"客户端开始发送数据了...."</span>);</span><br><span class="line">        <span class="comment">// 1.创建一个Socket对象，并绑定主机名和端口号</span></span><br><span class="line">        Socket client = <span class="keyword">new</span> Socket(<span class="string">"localhost"</span>,<span class="number">6666</span>);</span><br><span class="line">        <span class="comment">// 2.获取OutputStream对象</span></span><br><span class="line">        OutputStream os = client.getOutputStream();</span><br><span class="line">        <span class="comment">// 3.向服务端发送数据</span></span><br><span class="line">        os.write(<span class="string">"服务器你在干什么呢？"</span>.getBytes());</span><br><span class="line">        <span class="comment">// 4.获取InputStream对象</span></span><br><span class="line">        InputStream is = client.getInputStream();</span><br><span class="line">        <span class="comment">// 5.读取服务器回写来的数据</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = is.read(bytes);</span><br><span class="line">        <span class="comment">// 6.打印读取到的数据</span></span><br><span class="line">        String mgs = <span class="keyword">new</span> String(bytes,<span class="number">0</span>,len);</span><br><span class="line">        System.out.println(mgs);</span><br><span class="line">        <span class="comment">// 7.关闭资源</span></span><br><span class="line">        is.close();</span><br><span class="line">        os.close();</span><br><span class="line">        client.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">//结果：</span></span><br><span class="line"><span class="comment">//客户端开始发送数据了....</span></span><br><span class="line"><span class="comment">//我已经收到了您发送的数据，多些您呢~</span></span><br></pre></td></tr></tbody></table></figure><h2 id="课后练习一：文件上传"><a href="#课后练习一：文件上传" class="headerlink" title="课后练习一：文件上传"></a>课后练习一：文件上传</h2><h3 id="案例要求-1"><a href="#案例要求-1" class="headerlink" title="案例要求"></a>案例要求</h3><p>将文件从客户端上传到服务端。</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201030181159.jpg"></p><h3 id="案例实现-1"><a href="#案例实现-1" class="headerlink" title="案例实现"></a>案例实现</h3><ul><li>服务器端</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUpload_Server</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        System.out.println(<span class="string">"服务端启动，等待连接..."</span>);</span><br><span class="line">        <span class="comment">// 1.创建ServerSocket对象，绑定端口号</span></span><br><span class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line">        <span class="comment">// 循环，确保能一直连接到客户端</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) {</span><br><span class="line">            <span class="comment">// 2.获取Socket对象</span></span><br><span class="line">            Socket server = ss.accept();</span><br><span class="line">            <span class="comment">// 采用多线程，提高效率</span></span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; {</span><br><span class="line">                <span class="keyword">try</span> (</span><br><span class="line">                        <span class="comment">// 3.创建输入流，用于接收客户端发送的数据</span></span><br><span class="line">                        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(server.getInputStream());</span><br><span class="line">                        <span class="comment">// 4.创建输出流，用于将接收到数据写入硬盘</span></span><br><span class="line">                        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"D:\\pictures\\压缩后"</span>, <span class="string">"top.liboshuai"</span>+System.currentTimeMillis()+<span class="string">".jpg"</span>)))</span><br><span class="line">                ) {</span><br><span class="line">                    <span class="comment">// 5.进行数据的读写</span></span><br><span class="line">                    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                    <span class="keyword">while</span> ((len = bis.read(bytes)) != -<span class="number">1</span>) {</span><br><span class="line">                        bos.write(bytes);</span><br><span class="line">                    }</span><br><span class="line">                    System.out.println(<span class="string">"上传成功，等待下一次文件长传"</span>);</span><br><span class="line">                    <span class="comment">// 6.创建输出流，用于给客户端回写数据</span></span><br><span class="line">                    OutputStream os = server.getOutputStream();</span><br><span class="line">                    os.write(<span class="string">"服务端已经接受到文件了"</span>.getBytes());</span><br><span class="line">                    os.close();</span><br><span class="line">                } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                } <span class="keyword">finally</span> {</span><br><span class="line">                    <span class="keyword">try</span> {</span><br><span class="line">                        <span class="keyword">if</span> (server != <span class="keyword">null</span>) {</span><br><span class="line">                            server.close();</span><br><span class="line">                        }</span><br><span class="line">                    } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }).start();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>客户端</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUpload_Client</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        System.out.println(<span class="string">"客户端启动，开始上传文件..."</span>);</span><br><span class="line">        <span class="comment">// 1.创建Socket对象</span></span><br><span class="line">        Socket client = <span class="keyword">new</span> Socket(<span class="string">"localhost"</span>,<span class="number">6666</span>);</span><br><span class="line">        <span class="comment">// 2.获取输入流，将本地文件写入流</span></span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"D:\\pictures\\压缩后\\one.jpg"</span>));</span><br><span class="line">        <span class="comment">// 3.获取输出流，将文件数据发给服务端</span></span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(client.getOutputStream());</span><br><span class="line">        <span class="comment">// 4.获取输出流，接收服务端回写来的数据</span></span><br><span class="line">        InputStream is = client.getInputStream();</span><br><span class="line">        <span class="comment">// 5.进行数据读写</span></span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span> ((len = bis.read(bytes)) != -<span class="number">1</span>) {</span><br><span class="line">            bos.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">        }</span><br><span class="line">        client.shutdownOutput();</span><br><span class="line">        <span class="comment">// 6.接收服务端回写的数据</span></span><br><span class="line">        <span class="keyword">byte</span>[] back = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">50</span>];</span><br><span class="line">        is.read(back);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(back));;</span><br><span class="line"></span><br><span class="line">        is.close();</span><br><span class="line">        client.close();</span><br><span class="line">        bis.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="课后练习二：模拟B-S服务器"><a href="#课后练习二：模拟B-S服务器" class="headerlink" title="课后练习二：模拟B\S服务器"></a>课后练习二：模拟B\S服务器</h2><h3 id="案例要求-2"><a href="#案例要求-2" class="headerlink" title="案例要求"></a>案例要求</h3><p>模拟网站服务器，使用浏览器访问自己编写的服务端程序，查看网页效果。</p><h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h3><ol><li><p>准备页面数据，web文件夹，复制到我们<code>Module</code>中。</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201106011931.png"></p></li><li><p>编写代码</p></li><li><p>使用浏览器访问<code>localhost:8888/web/index.html</code>。</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201106040517.png"></p></li></ol><h3 id="案例实现-2"><a href="#案例实现-2" class="headerlink" title="案例实现"></a>案例实现</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        System.out.println(<span class="string">"服务端启动，等待连接..."</span>);</span><br><span class="line">        <span class="comment">// 1.创建ServerSocket对象，绑定端口号</span></span><br><span class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">        <span class="comment">// 2.创建多线程使浏览器可以访问所有的图片</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) {</span><br><span class="line">            Socket socket = ss.accept();</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> Web(socket)).start();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Web</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line">        <span class="keyword">private</span> Socket socket;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Web</span><span class="params">(Socket socket)</span> </span>{</span><br><span class="line">            <span class="keyword">this</span>.socket = socket;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="comment">// 3.读取浏览器请求的资源路径</span></span><br><span class="line">                BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class="line">                <span class="comment">// 3.1读取资源路径所在文本的第一行</span></span><br><span class="line">                String request = br.readLine();</span><br><span class="line">                <span class="comment">// 3.2用空格分隔文本</span></span><br><span class="line">                String[] strArr = request.split(<span class="string">" "</span>);</span><br><span class="line">                <span class="comment">// 3.3去除/，得到资源路径</span></span><br><span class="line">                String path = strArr[<span class="number">1</span>].substring(<span class="number">1</span>);</span><br><span class="line">                <span class="comment">// 4.读取资源文件到流中</span></span><br><span class="line">                BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(path));</span><br><span class="line">                <span class="comment">// 5.将资源文件发送给浏览器</span></span><br><span class="line">                BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(socket.getOutputStream());</span><br><span class="line">                <span class="comment">// 6.进行文件读写</span></span><br><span class="line">                bos.write(<span class="string">"HTTP/1.1 200 OK\r\n"</span>.getBytes());</span><br><span class="line">                bos.write(<span class="string">"Content-Type:text/html\r\n"</span>.getBytes());</span><br><span class="line">                bos.write(<span class="string">"\r\n"</span>.getBytes());</span><br><span class="line">                <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="keyword">while</span> ((len = bis.read(bytes)) != -<span class="number">1</span>) {</span><br><span class="line">                    bos.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">                }</span><br><span class="line">                <span class="comment">// 7.关闭资源</span></span><br><span class="line">                bos.close();</span><br><span class="line">                bis.close();</span><br><span class="line">                br.close();</span><br><span class="line">                socket.close();</span><br><span class="line">            } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络编程入门</title>
      <link href="2020/10/29/70_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/"/>
      <url>2020/10/29/70_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="网络编程入门"><a href="#网络编程入门" class="headerlink" title="网络编程入门"></a>网络编程入门</h1><h2 id="软件结构"><a href="#软件结构" class="headerlink" title="软件结构"></a>软件结构</h2><ol><li><p><strong>C/S结构：</strong>全称为<code>Client/Server</code>结构，是指客户端和服务器结构。常见程序有ＱＱ、迅雷等软件。</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201029211718.jpg"></p></li><li><p><strong>B/S结构：</strong>全称<code>Browser/Server</code>结构，是指浏览器和服务器结构。常见浏览器有谷歌、火狐等。</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201029211739.jpg"></p></li></ol><p>两种架构各有优势，但是无论哪种架构，都离不开网络的支持。<strong>网络编程</strong>，就是在一定的协议下，实现两台计算机通信的程序。</p><h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><h3 id="常用的协议"><a href="#常用的协议" class="headerlink" title="常用的协议"></a>常用的协议</h3><ol><li><p><strong>网络通信协议</strong></p><p>通过计算机网络可以使多台计算机实现连接，位于同一个网络中的计算机在进行连接和通信时需要遵守一定的规则，这就好比在道路中行驶的汽车一定要遵守交通规则一样。在计算机网络中，这些连接和通信的规则被称为网络通信协议，它对数据的传输格式、传输速率、传输步骤等做了统一规定，通信双方必须同时遵守才能完成数据交换。</p></li><li><p><strong>TCP/IP协议</strong></p><p>传输控制协议/因特网互联协议( Transmission Control Protocol/Internet Protocol)，是Internet最基本、最广泛的协议。它定义了计算机如何连入因特网，以及数据如何在它们之间传输的标准。它的内部包含一系列的用于处理数据通信的协议，并采用了4层的分层模型，每一层都呼叫它的下一层所提供的协议来完成自己的需求。</p></li></ol><h3 id="五层结构"><a href="#五层结构" class="headerlink" title="五层结构"></a>五层结构</h3><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201029220543.jpg"></p><ol><li><strong>物理层与链路层：</strong>链路层是用于定义物理传输通道，通常是对某些网络连接设备的驱动协议，例如针对光纤、网线提供的驱动。</li><li><strong>网络层：</strong>网络层是整个TCP/IP协议的核心，它主要用于将传输的数据进行分组，将分组数据发送到目标计算机或者网络。</li><li><strong>运输层：</strong>主要使网络程序进行通信，在进行网络通信时，可以采用TCP协议，也可以采用UDP协议。</li><li><strong>应用层：</strong>主要负责应用程序的协议，例如HTTP协议、FTP协议等。</li></ol><h3 id="协议分类"><a href="#协议分类" class="headerlink" title="协议分类"></a>协议分类</h3><p>通信的协议还是比较复杂的，<code>java.net</code> 包中包含的类和接口，它们提供低层次的通信细节。我们可以直接使用这些类和接口，来专注于网络程序开发，而不用考虑通信的细节。</p><p><code>java.net</code>包中提供了两种常见的网络协议的支持：</p><ol><li><p><strong>UDP</strong></p><ul><li><p>用户数据报协议(User Datagram Protocol)。UDP是无连接通信协议，即在数据传输时，数据的发送端和接收端不建立逻辑连接。简单来说，当一台计算机向另外一台计算机发送数据时，发送端不会确认接收端是否存在，就会发出数据，同样接收端在收到数据时，也不会向发送端反馈是否收到数据。</p></li><li><p>由于使用UDP协议消耗资源小，通信效率高，所以通常都会用于音频、视频和普通数据的传输例如视频会议都使用UDP协议，因为这种情况即使偶尔丢失一两个数据包，也不会对接收结果产生太大影响。</p></li><li><p>特点:数据被限制在64kb以内，超出这个范围就不能发送了。</p></li><li><p>但是在使用UDP协议传送数据时，由于UDP的面向无连接性，不能保证数据的完整性，因此在传输重要数据时不建议使用UDP协议。UDP的交换过程如下图所示。</p></li></ul><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201029220949.bmp"></p></li><li><p><strong>TCP</strong></p><ul><li><p>传输控制协议 (Transmission Control Protocol)。TCP协议是<strong>面向连接</strong>的通信协议，即传输数据之前，在发送端和接收端建立逻辑连接，然后再传输数据，它提供了两台计算机之间可靠无差错的数据传输。</p></li><li><p>在TCP连接中必须要明确客户端与服务器端，由客户端向服务端发出连接请求，每次连接的创建都需要经过“三次握手”。</p><ol><li><p>第一次握手，客户端向服务器端发出连接请求，等待服务器确认。</p></li><li><p>第二次握手，服务器端向客户端回送一个响应，通知客户端收到了连接请求。</p></li><li><p>第三次握手，客户端再次向服务器端发送确认信息，确认连接。整个交互过程如下图所示。</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201029221452.jpg"></p></li></ol></li><li><p>​    完成三次握手，连接建立后，客户端和服务器就可以开始进行数据传输了。由于这种面向连接的特性，TCP协议可以保证传输数据的安全，所以应用十分广泛，例如下载文件、浏览网页等。</p></li></ul></li></ol><h2 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>指互联网协议地址（Internet Protocol Address），俗称IP。IP地址用来给一个网络中的计算机设备做唯一的编号。假如我们把“个人电脑”比作“一台电话”的话，那么“IP地址”就相当于“电话号码”。</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li><p><strong>IPV4：</strong>是一个32位的二进制数，通常被分为4个字节，表示成<code>a.b.c.d</code> 的形式，例如<code>192.168.65.100</code> 。其中a、b、c、d都是0~255之间的十进制整数，那么最多可以表示42亿个。</p></li><li><p><strong>IPV6：</strong>由于互联网的蓬勃发展，IP地址的需求量愈来愈大，但是网络地址资源有限，使得IP的分配越发紧张。</p><p>为了扩大地址空间，拟通过IPv6重新定义地址空间，采用128位地址长度，每16个字节一组，分成8组十六进制数，表示成<code>ABCD:EF01:2345:6789:ABCD:EF01:2345:6789</code>，号称可以为全世界的每一粒沙子编上一个网址，这样就解决了网络地址资源数量不够的问题。</p></li></ul><h2 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h2><p>网络的通信，本质上是两个进程（应用程序）的通信。每台计算机都有很多的进程，那么在网络通信时，如何区分这些进程呢？</p><p>如果说<strong>IP地址</strong>可以唯一标识网络中的设备，那么<strong>端口号</strong>就可以唯一标识设备中的进程（应用程序）了。</p><p><strong>端口号：用两个字节表示的整数，它的取值范围是0~65535</strong>。其中，0~1023之间的端口号用于一些知名的网络服务和应用，普通的应用程序需要使用1024以上的端口号。如果端口号被另外一个服务或应用所占用，会导致当前程序启动失败。</p><p>利用<code>协议</code>+<code>IP地址</code>+<code>端口号</code> 三元组合，就可以标识网络中的进程了，那么进程间的通信就可以利用这个标识与其它进程进行交互。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO-打印流</title>
      <link href="2020/10/29/69_IO-%E6%89%93%E5%8D%B0%E6%B5%81/"/>
      <url>2020/10/29/69_IO-%E6%89%93%E5%8D%B0%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h1 id="IO-打印流"><a href="#IO-打印流" class="headerlink" title="IO-打印流"></a>IO-打印流</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>平时我们在控制台打印输出，是调用<code>print</code>方法和<code>println</code>方法完成的，这两个方法都来自于<code>java.io.PrintStream</code>类，该类能够方便地打印各种数据类型的值，是一种便捷的输出方式。</p><h2 id="PrintStream类"><a href="#PrintStream类" class="headerlink" title="PrintStream类"></a>PrintStream类</h2><h3 id="继承图"><a href="#继承图" class="headerlink" title="继承图"></a>继承图</h3><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201029205833.png"></p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>PrintStream(String fileName)</code>：使用指定的文件名创建新的打印流(不自动刷新行)。</li></ul><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                <span class="comment">//使用指定的文件名创建一个打印流</span></span><br><span class="line">                PrintStream ps = <span class="keyword">new</span> PrintStream(<span class="string">"a.txt"</span>)</span><br><span class="line">        ) {</span><br><span class="line">            </span><br><span class="line">        } <span class="keyword">catch</span> (FileNotFoundException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="改变打印流向"><a href="#改变打印流向" class="headerlink" title="改变打印流向"></a>改变打印流向</h3><p><code>System.out</code>就是<code>PrintStream</code>类型的，只不过它的流向是系统规定的，打印在控制台上。不过，既然是流对象，我们就可以玩一个”小把戏”，改变它的流向。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//改变打印流向之前，直接打印在控制台上</span></span><br><span class="line">        System.out.println(<span class="string">"Jason"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//改变打印流向，使打印的数据流向指定的文件</span></span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                PrintStream ps = <span class="keyword">new</span> PrintStream(<span class="string">"a.txt"</span>)</span><br><span class="line">        ) {</span><br><span class="line">            <span class="comment">//设置系统的打印流流向</span></span><br><span class="line">            System.setOut(ps);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//再次进行打印</span></span><br><span class="line">            System.out.println(<span class="string">"Jason"</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (FileNotFoundException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
            <tag> IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO-序列化</title>
      <link href="2020/10/29/68_IO-%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>2020/10/29/68_IO-%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="IO-序列化"><a href="#IO-序列化" class="headerlink" title="IO-序列化"></a>IO-序列化</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Java 提供了一种对象<strong>序列化</strong>的机制。用一个字节序列可以表示一个对象，该字节序列包含该<code>对象的数据</code>、<code>对象的类型</code>和<code>对象中存储的属性</code>等信息。字节序列写出到文件之后，相当于文件中<strong>持久保存</strong>了一个对象的信息。 </p><p>反之，该字节序列还可以从文件中读取回来，重构对象，对它进行<strong>反序列化</strong>。<code>对象的数据</code>、<code>对象的类型</code>和<code>对象中存储的数据</code>信息，都可以用来在内存中创建对象。看图理解序列化： </p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201029160308.jpg"></p><h2 id="ObjectOutputStream类"><a href="#ObjectOutputStream类" class="headerlink" title="ObjectOutputStream类"></a>ObjectOutputStream类</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p><code>java.io.ObjectOutputStream</code>类，将Java对象的原始数据类型写出到文件,实现对象的持久存储。</p><h3 id="继承图"><a href="#继承图" class="headerlink" title="继承图"></a>继承图</h3><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201029174941.png"></p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>ObjectOutputStream(OutputStream out)</code>：创建一个ObjectOutputStream，用于写入指定的OutputStream。</li></ul><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                <span class="comment">//创建一个ObjectOutputStream，用于写入指定的OutputStream。</span></span><br><span class="line">                ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"a.txt"</span>))</span><br><span class="line">        ) {</span><br><span class="line"></span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="序列化操作"><a href="#序列化操作" class="headerlink" title="序列化操作"></a>序列化操作</h3><ol><li><p>一个对象要想序列化，必须满足两个条件：</p><ul><li>该类必须实现<code>java.io.Serializable</code>接口，<code>Serializable</code>是一个标记接口，不实现此接口的类将不会使任何状态序列化或反序列化，会抛出<code>NotSerializableException</code>。</li><li>该类的所有属性必须是可序列化的。如果有一个属性不需要可序列化的，则该属性必须注明是瞬态的，使用<code>transient</code>关键字修饰。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">//使用瞬态transient关键字修饰的变量，不会被序列化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">long</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//constructor</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">long</span> id)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"hello~"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>写出对象方法</p><ul><li><code>final void writeObject(Object obj)</code>：将指定的对象写出。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//创建一个将要序列化的对象</span></span><br><span class="line">        Person man = <span class="keyword">new</span> Person(<span class="string">"Jason"</span>, <span class="number">21</span>, <span class="number">17613013712L</span>);</span><br><span class="line">        <span class="comment">//将对象序列化到一个文件中</span></span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"a.txt"</span>))</span><br><span class="line">        ) {</span><br><span class="line">            oos.writeObject(man);</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="ObjectInputStream类"><a href="#ObjectInputStream类" class="headerlink" title="ObjectInputStream类"></a>ObjectInputStream类</h2></li></ol><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><p><code>ObjectInputStream</code>反序列化流，将之前使用<code>ObjectOutputStream</code>序列化的原始数据恢复为对象。</p><h3 id="继承图-1"><a href="#继承图-1" class="headerlink" title="继承图"></a>继承图</h3><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201029175014.png"></p><h3 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>ObjectInputStream(InputStream in)</code>：创建一个从指定的InputStream读取的ObjectInputStream。</li></ul><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//定义一个存储有序列化对象的文件的路径</span></span><br><span class="line">        String path = <span class="string">"a.txt"</span>;</span><br><span class="line">        <span class="comment">//创建一个从指定的InputStream读取的ObjectInputStream</span></span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(path))</span><br><span class="line">        ) {</span><br><span class="line">            <span class="comment">//序列化操作</span></span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="反序列化操作"><a href="#反序列化操作" class="headerlink" title="反序列化操作"></a>反序列化操作</h3><p>如果能找到一个对象的class文件，我们可以进行反序列化操作，调用<code>ObjectInputStream</code>读取对象的方法：</p><ul><li><code>final Object readObject()</code>：读取一个对象</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//接受反序列化后的对象</span></span><br><span class="line">        Person man = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//反序列对象</span></span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"a.txt"</span>))</span><br><span class="line">        ) {</span><br><span class="line">            <span class="comment">//通过readObject读取对象，并进行强制转型</span></span><br><span class="line">            man = (Person) ois.readObject();</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        } <span class="keyword">catch</span> (ClassNotFoundException c) {</span><br><span class="line">            c.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//打印反序列化得到的对象</span></span><br><span class="line">        System.out.println(man);<span class="comment">//Person{name='Jason', age=21, id=0}</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="反序列化异常"><a href="#反序列化异常" class="headerlink" title="反序列化异常"></a>反序列化异常</h3><p>在反序列化异常中，通常会出现以下这两种异常：</p><ol><li><p><code>ClassNotFoundException</code>异常</p><ul><li>如果找不到反序列化对象的类的class文件，则会抛出一个<code>ClassNotFoundException</code>异常。</li></ul></li><li><p><code>InvalidClassException</code>异常</p><ul><li>该类的序列版本号与从流中读取的类描述符的版本号不匹配 </li><li>该类包含未知数据类型 </li><li>该类没有可访问的无参数构造方法 </li></ul><p><strong>解决方法</strong>：在将要序列号的类中，手动加入一个序列版本号<code>serialVersionUID</code>。下面代码演示。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">long</span> Id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//手动加入序列版本号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//constructor</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">long</span> id)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.Id = id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person{"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", id="</span> + Id +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"hello~"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="课后练习：序列化集合"><a href="#课后练习：序列化集合" class="headerlink" title="课后练习：序列化集合"></a>课后练习：序列化集合</h3></li></ol><p><strong>案例要求：</strong></p><ol><li>将存有多个自定义对象的集合序列化操作，保存到<code>a.txt</code>文件中。</li><li>反序列化<code>a.txt</code> ，并遍历集合，打印对象信息。</li></ol><p><strong>案例分析：</strong></p><ol><li>把若干学生对象 ，保存到集合中。</li><li>把集合序列化。</li><li>反序列化读取时，只需要读取一次，转换为集合类型。</li><li>遍历集合，可以打印所有的学生信息</li></ol><p><strong>案例实现：</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是将要被序列化的对象的类</span></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//被transient修饰的变量不会被序列化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//手动加入序列版本号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//constructor</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student{"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//序列化和反序列号代码操作</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//定义一个用于存储序列化对象的文件路径</span></span><br><span class="line">        String path = <span class="string">"a.txt"</span>;</span><br><span class="line">        <span class="comment">//创建一个ArrayList集合</span></span><br><span class="line">        List&lt;Student&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//往集合中添加Student对象</span></span><br><span class="line">        Collections.addAll(list,</span><br><span class="line">                <span class="keyword">new</span> Student(<span class="string">"Jason"</span>, <span class="number">21</span>),</span><br><span class="line">                <span class="keyword">new</span> Student(<span class="string">"Bob"</span>,<span class="number">22</span>),</span><br><span class="line">                <span class="keyword">new</span> Student(<span class="string">"Charlie"</span>,<span class="number">23</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">//调用自定义的用于序列化的方法</span></span><br><span class="line">            serialized(list,path);</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">//调用自定义的用反序列化的方法</span></span><br><span class="line">            List&lt;Student&gt; list1 = deserialized(path);</span><br><span class="line">            <span class="comment">//打印反序列化后得到的集合</span></span><br><span class="line">            System.out.println(list1);</span><br><span class="line">            <span class="comment">//[Student{name='Jason', age=0}, Student{name='Bob', age=0}, Student{name='Charlie', age=0}]</span></span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        } <span class="keyword">catch</span> (ClassNotFoundException c) {</span><br><span class="line">            c.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//自定义序列化方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">serialized</span><span class="params">(List&lt;Student&gt; list, String path)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        <span class="comment">//创建序列化输出流</span></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(path));</span><br><span class="line">        <span class="comment">//将传入的参数序列化到流中</span></span><br><span class="line">        oos.writeObject(list);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//自定义反序列化方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Student&gt; <span class="title">deserialized</span><span class="params">(String path)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>{</span><br><span class="line">        <span class="comment">//用于接收反序列化后的集合</span></span><br><span class="line">        List&lt;Student&gt; list = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//创建序列化输入流</span></span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(path));</span><br><span class="line">        <span class="comment">//读取序列化对象</span></span><br><span class="line">        list = (List&lt;Student&gt;) ois.readObject();</span><br><span class="line">        <span class="comment">//返回反序列化得到的集合</span></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
            <tag> IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO-转换流</title>
      <link href="2020/10/29/67_IO-%E8%BD%AC%E6%8D%A2%E6%B5%81/"/>
      <url>2020/10/29/67_IO-%E8%BD%AC%E6%8D%A2%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h1 id="IO-转换流"><a href="#IO-转换流" class="headerlink" title="IO-转换流"></a>IO-转换流</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>计算机中储存的信息都是用二进制数表示的，而我们在屏幕上看到的数字、英文、标点符号、汉字等字符是二进制数转换之后的结果。按照某种规则，将字符存储到计算机中，称为<strong>编码</strong> 。反之，将存储在计算机中的二进制数按照某种规则解析显示出来，称为<strong>解码</strong> 。</p><p><strong>字符编码</strong>：就是一套自然语言的字符与二进制数之间的对应规则。</p><p><strong>字符集：</strong>也叫编码表。是一个系统支持的所有字符的集合，包括各国家文字、标点符号、图形符号、数字等。</p><p>下面是常用的字符集简述：</p><ol><li><p><strong>ASCII字符集</strong> </p><ul><li><p>ASCII（American Standard Code for Information Interchange，美国信息交换标准代码）是基于拉丁字母的一套电脑编码系统，用于显示现代英语，主要包括控制字符（回车键、退格、换行键等）和可显示字符（英文大小写字符、阿拉伯数字和西文符号）。</p></li><li><p>基本的ASCII字符集，使用7位（bits）表示一个字符，共128字符。ASCII的扩展字符集使用8位（bits）表示一个字符，共256字符，方便支持欧洲常用字符。</p></li></ul></li><li><p><strong>ISO-8859-1字符集</strong></p><ul><li><p>拉丁码表，别名Latin-1，用于显示欧洲使用的语言，包括荷兰、丹麦、德语、意大利语、西班牙语等。</p></li><li><p>ISO-8859-1使用单字节编码，兼容ASCII编码。</p></li></ul></li><li><p><strong>GBxxx字符集</strong></p><ul><li>GB就是国标的意思，是为了显示中文而设计的一套字符集。</li><li><strong>GB2312：</strong>简体中文码表。一个小于127的字符的意义与原来相同。但两个大于127的字符连在一起时，就表示一个汉字，这样大约可以组合了包含7000多个简体汉字，此外数学符号、罗马希腊的字母、日文的假名们都编进去了，连在ASCII里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的”全角”字符，而原来在127号以下的那些就叫”半角”字符了。</li><li>GBK：最常用的中文码表。是在GB2312标准基础上的扩展规范，使用了双字节编码方案，共收录了21003个汉字，完全兼容GB2312标准，同时支持繁体汉字以及日韩汉字等。</li><li><strong>GB18030：</strong>最新的中文码表。收录汉字70244个，采用多字节编码，每个字可以由1个、2个或4个字节组成。支持中国国内少数民族的文字，同时支持繁体汉字以及日韩汉字等。</li></ul></li><li><p><strong>Unicode字符集</strong></p><ul><li>Unicode编码系统为表达任意语言的任意字符而设计，是业界的一种标准，也称为统一码、标准万国码。</li><li>它最多使用4个字节的数字来表达每个字母、符号，或者文字。有三种编码方案，UTF-8、UTF-16和UTF-32。最为常用的UTF-8编码。</li><li><strong>UTF-8编码：</strong>可以用来表示Unicode标准中任何字符，它是电子邮件、网页及其他存储或传送文字的应用中，优先采用的编码。互联网工程工作小组（IETF）要求所有互联网协议都必须支持UTF-8编码。所以，我们开发Web应用，也要使用UTF-8编码。它使用一至四个字节为每个字符编码，编码规则：<ol><li>128个US-ASCII字符，只需一个字节编码。</li><li>拉丁文等字符，需要二个字节编码。 </li><li>大部分常用字（含中文），使用三个字节编码。</li><li>其他极少使用的Unicode辅助字符，使用四字节编码。</li></ol></li></ul></li></ol><p><strong>乱码的问题</strong>：按照A规则存储，同样按照A规则解析，那么就能显示正确的文本符号。反之，按照A规则存储，再按照B规则解析，就会导致乱码现象。</p><h2 id="InputStreamReader类"><a href="#InputStreamReader类" class="headerlink" title="InputStreamReader类"></a>InputStreamReader类</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>转换流<code>java.io.InputStreamReader</code>，是<code>Reader</code>的子类，是从字节流到字符流的桥梁。它读取字节，并使用指定的字符集将其解码为字符。它的字符集可以由名称指定，也可以接受平台的默认字符集。 </p><h3 id="继承图"><a href="#继承图" class="headerlink" title="继承图"></a>继承图</h3><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201029143105.png"></p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>InputStreamReader(InputStream in)</code>：创建一个使用默认字符集的转化输入流。</li><li><code>InputStreamReader(InputStream in, String charsetName)</code>：创建一个使用给定字符集的转化输入流。</li></ul><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                <span class="comment">//创建一个使用默认字符集的转化输入流。</span></span><br><span class="line">                InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">"a.txt"</span>));</span><br><span class="line">                <span class="comment">//创建一个使用给定字符集的转化输入流。</span></span><br><span class="line">                InputStreamReader isr2 = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">"b.txt"</span>), <span class="string">"GBK"</span>)</span><br><span class="line">        ) {</span><br><span class="line">            <span class="comment">//文件的读写</span></span><br><span class="line"></span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="指定编码读取"><a href="#指定编码读取" class="headerlink" title="指定编码读取"></a>指定编码读取</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//定义一个文件路径，此文件的格式为GBK</span></span><br><span class="line">        String path = <span class="string">"a.txt"</span>;</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                <span class="comment">//使用默认字符集UTF-8创建一个转化输入流</span></span><br><span class="line">                InputStreamReader isr1 = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(path));</span><br><span class="line">                <span class="comment">//使用指定的字符集GBK创建一个转化输入流</span></span><br><span class="line">                InputStreamReader isr2 = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(path), <span class="string">"GBK"</span>)</span><br><span class="line">        ) {</span><br><span class="line">            <span class="comment">//使用默认字符集UTF-8读取格式为GBK的文件</span></span><br><span class="line">            <span class="keyword">int</span> value1 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((value1 = isr1.read()) != -<span class="number">1</span>) {</span><br><span class="line">                System.out.print((<span class="keyword">char</span>) value1);<span class="comment">//һ�����������ӵı�־����Ը��Ϊĳ����ҵӢ�µ���ȥ��һ���������ӵı�־����Ը��Ϊĳ����ҵ�����ػ��š�</span></span><br><span class="line">            }</span><br><span class="line">            System.out.println();</span><br><span class="line">            <span class="comment">//使用指定的字符集GBK读取格式为GBK的文件</span></span><br><span class="line">            <span class="keyword">int</span> value2 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((value2 = isr2.read()) != -<span class="number">1</span>) {</span><br><span class="line">                System.out.print((<span class="keyword">char</span>) value2);<span class="comment">//一个不成熟男子的标志是他愿意为某种事业英勇地死去，一个成熟男子的标志是他愿意为某种事业卑贱地活着。</span></span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="OutStreamWriter类"><a href="#OutStreamWriter类" class="headerlink" title="OutStreamWriter类"></a>OutStreamWriter类</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><p>转换流<code>java.io.OutputStreamWriter</code>，是<code>Writer</code>的子类，是从字符流到字节流的桥梁。使用指定的字符集将字符编码为字节。它的字符集可以由名称指定，也可以接受平台的默认字符集。</p><h3 id="继承图-1"><a href="#继承图-1" class="headerlink" title="继承图"></a>继承图</h3><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201029150427.png"></p><h3 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>OutputStreamWriter(OutputStream out)</code>：创建一个使用默认字符编码的转换输出流。</li><li><code>OutputStreamWriter(OutputStream out, String charsetName)</code>：创建一个使用指定字符集的转换输出流。</li></ul><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                <span class="comment">//使用平台默认字符集创建一个转换输出流</span></span><br><span class="line">                OutputStreamWriter osw1 = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">"a.txt"</span>));</span><br><span class="line">                <span class="comment">//使用指定的字符集名称创建一个转换输出流</span></span><br><span class="line">                OutputStreamWriter osw2 = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">"a.txt"</span>), <span class="string">"GBK"</span>)</span><br><span class="line">        ) {</span><br><span class="line">            <span class="comment">//文件的读写</span></span><br><span class="line">            </span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="指定编码写出"><a href="#指定编码写出" class="headerlink" title="指定编码写出"></a>指定编码写出</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//定义一个文件路径，此文件格式为GBK</span></span><br><span class="line">        String path = <span class="string">"a.txt"</span>;</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                <span class="comment">//创建一个使用默认字符集的转换输出流</span></span><br><span class="line">                OutputStreamWriter osw1 = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(path, <span class="keyword">true</span>));</span><br><span class="line">                <span class="comment">//创建一个使用指定字符集的转换输出流</span></span><br><span class="line">                OutputStreamWriter osw2 = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(path, <span class="keyword">true</span>), <span class="string">"GBK"</span>)</span><br><span class="line">        ) {</span><br><span class="line">            <span class="comment">//使用默认字符集UTF-8往文件中写入数据</span></span><br><span class="line">            osw1.write(<span class="string">"我在干什么？"</span>);</span><br><span class="line">            <span class="comment">//使用指定字符集GBK往文件中写入数据</span></span><br><span class="line">            osw2.write(<span class="string">"你在干什么？"</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="转换流理解图解"><a href="#转换流理解图解" class="headerlink" title="转换流理解图解"></a>转换流理解图解</h2><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201029152643.jpg"></p><h2 id="课后练习：转换文件编码"><a href="#课后练习：转换文件编码" class="headerlink" title="课后练习：转换文件编码"></a>课后练习：转换文件编码</h2><p><strong>案例要求：</strong>将GBK编码的文本文件，转换为UTF-8编码的文本文件。</p><p><strong>案例分析：</strong></p><ol><li>指定GBK编码的转换流，读取文本文件。</li><li>使用UTF-8编码的转换流，写出文本文件。</li></ol><p><strong>案例实现：</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//定义一个文件路径，此文件编码格式为GBK</span></span><br><span class="line">        String path = <span class="string">"a.txt"</span>;</span><br><span class="line">        <span class="comment">//定义一个文件路径，此文件编码格式为UTF-8</span></span><br><span class="line">        String path2= <span class="string">"b.txt"</span>;</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                <span class="comment">//创建一个指定字符集GBK的转换输入流</span></span><br><span class="line">                InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(path), <span class="string">"GBK"</span>);</span><br><span class="line">                <span class="comment">//创建一个默认字符集UTF-8的转换输出流</span></span><br><span class="line">                OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(path2))</span><br><span class="line">        ) {</span><br><span class="line">            <span class="comment">//使用指定字符集GBK的转换输入流读取文件</span></span><br><span class="line">            <span class="keyword">int</span> value = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((value = isr.read()) != -<span class="number">1</span>) {</span><br><span class="line">                <span class="comment">//使用默认字符集UTF-8的转换输出流将读取的数据写入文件</span></span><br><span class="line">                osw.write(value);</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
            <tag> IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO-缓冲流</title>
      <link href="2020/10/23/66_IO-%E7%BC%93%E5%86%B2%E6%B5%81/"/>
      <url>2020/10/23/66_IO-%E7%BC%93%E5%86%B2%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h1 id="IO-缓冲流"><a href="#IO-缓冲流" class="headerlink" title="IO-缓冲流"></a>IO-缓冲流</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>缓冲流,也叫高效流，是对4个基本的字节流和字符流的增强。</p><ul><li><strong>字节缓冲流：</strong><code>BufferedInputStream</code> 、<code>BufferedOutputStream</code></li><li><strong>字符缓冲流：</strong><code>BufferedReader</code>、<code>BufferedWriter</code></li></ul><p>缓冲流的基本原理，是在创建流对象时，会创建一个内置的默认大小的缓冲区数组，通过缓冲区读写，减少系统IO次数，从而提高读写的效率。</p><h2 id="字节缓冲流"><a href="#字节缓冲流" class="headerlink" title="字节缓冲流"></a>字节缓冲流</h2><h3 id="继承图"><a href="#继承图" class="headerlink" title="继承图"></a>继承图</h3><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201023223352.png"></p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201023223422.png"></p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>BufferedInputStream(InputStream in)</code>：传入<code>InputStream</code>对象，创建一个新的<code>BufferedInputStream</code>对象。</li><li><code>BufferedOutputStream(OutputStream out)</code>：传入<code>OutputStream</code>对象，创建一个新的<code>BufferedOutputStream</code>对象。</li></ul><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">null</span>;</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(<span class="string">"a.txt"</span>);</span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"b.txt"</span>);</span><br><span class="line">            <span class="comment">//创建BufferedInputStream对象</span></span><br><span class="line">            bis = <span class="keyword">new</span> BufferedInputStream(fis);</span><br><span class="line">            <span class="comment">//创建BufferedOutputStream对象</span></span><br><span class="line">            bos = <span class="keyword">new</span> BufferedOutputStream(fos);</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="keyword">if</span> (fis != <span class="keyword">null</span>) {</span><br><span class="line">                    fis.close();</span><br><span class="line">                }</span><br><span class="line">            } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="keyword">if</span> (fos != <span class="keyword">null</span>) {</span><br><span class="line">                    fos.close();</span><br><span class="line">                }</span><br><span class="line">            } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><p>由于<code>字节缓冲流</code>和<code>普通字节流</code>读写文件的几乎一致，所以我就不在这里演示，具体使用可以参考<code>普通字节流</code>读取文件的方法。</p><h3 id="缓冲流与基本流的效率测试"><a href="#缓冲流与基本流的效率测试" class="headerlink" title="缓冲流与基本流的效率测试"></a>缓冲流与基本流的效率测试</h3><p>查询API，缓冲流读写方法与基本的流是一致的，我们通过复制大文件测试它的效率。</p><h4 id="对比一：采用单字节读取、写入文件"><a href="#对比一：采用单字节读取、写入文件" class="headerlink" title="对比一：采用单字节读取、写入文件"></a>对比一：采用单字节读取、写入文件</h4><p><strong>基本流</strong>，代码如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 普通流，采用单字节的读写方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//记录开始的时间</span></span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//创建流对象</span></span><br><span class="line">        <span class="keyword">try</span> (FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"C:\\Users\\j2662\\Pictures\\壁纸\\wallhaven-zm1dzy.jpg"</span>);</span><br><span class="line">             FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"C:\\Users\\j2662\\Pictures\\壁纸\\wallhaven-zm1dzy_copy.jpg"</span>)) {</span><br><span class="line">            <span class="comment">//读写数据</span></span><br><span class="line">            <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((len = fis.read()) != -<span class="number">1</span>) {</span><br><span class="line">                fos.write(len);</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//记录结束的时间</span></span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//计算程序运行的完整时间</span></span><br><span class="line">        <span class="keyword">long</span> time = endTime - startTime;</span><br><span class="line">        System.out.println(time + <span class="string">"ms"</span>);<span class="comment">//21556ms</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>缓冲流</strong>，代码如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 缓冲流，采用单字节的方式进行文件读写</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//记录开始时间</span></span><br><span class="line">        <span class="keyword">long</span> startTimes = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//创建流对象</span></span><br><span class="line">        <span class="keyword">try</span> (BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"C:\\Users\\j2662\\Pictures\\壁纸\\wallhaven-zm1dzy.jpg"</span>));</span><br><span class="line">            BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"C:\\Users\\j2662\\Pictures\\壁纸\\wallhaven-zm1dzy_copy.jpg"</span>))) {</span><br><span class="line">            <span class="comment">//文件的读写</span></span><br><span class="line">            <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((len = bis.read()) != -<span class="number">1</span>) {</span><br><span class="line">                bos.write(len);</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//记录结束时间</span></span><br><span class="line">        <span class="keyword">long</span> endTimes = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//计算代码运行时间</span></span><br><span class="line">        <span class="keyword">long</span> times = endTimes - startTimes;</span><br><span class="line">        System.out.println(times + <span class="string">"ms"</span>);<span class="comment">//77ms</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="对比二：采用字节数组读、写文件"><a href="#对比二：采用字节数组读、写文件" class="headerlink" title="对比二：采用字节数组读、写文件"></a>对比二：采用字节数组读、写文件</h4><p><strong>基本流</strong>，代码如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基本流，采用字节数组的读写方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//记录开始时间</span></span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//创建流对象</span></span><br><span class="line">        <span class="keyword">try</span> (FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"C:\\Users\\j2662\\Pictures\\壁纸\\wallhaven-zm1dzy.jpg"</span>);</span><br><span class="line">             FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"C:\\Users\\j2662\\Pictures\\壁纸\\wallhaven-zm1dzy_copy.jpg"</span>)) {</span><br><span class="line">            <span class="comment">//文件的读写</span></span><br><span class="line">            <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">while</span> ((len = fis.read(bytes)) != -<span class="number">1</span>) {</span><br><span class="line">                fos.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//记录结束时间</span></span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//计算代码运行时间</span></span><br><span class="line">        <span class="keyword">long</span> times = endTime - startTime;</span><br><span class="line">        System.out.println(times + <span class="string">"ms"</span>); <span class="comment">//36ms</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>缓冲流</strong>，代码如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 缓冲流，采用字节数组的方式进行文件读写</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//记录开始时间</span></span><br><span class="line">        <span class="keyword">long</span> startTimes = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//创建流对象</span></span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"C:\\Users\\j2662\\Pictures\\壁纸\\wallhaven-zm1dzy.jpg"</span>));</span><br><span class="line">                BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"C:\\Users\\j2662\\Pictures\\壁纸\\wallhaven-zm1dzy_copy.jpg"</span>))</span><br><span class="line">        ) {</span><br><span class="line">            <span class="comment">//文件的读写</span></span><br><span class="line">            <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">while</span> ((len = bis.read(bytes)) != -<span class="number">1</span>) {</span><br><span class="line">                bos.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//记录结束时间</span></span><br><span class="line">        <span class="keyword">long</span> endTimes = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//计算代码运行时间</span></span><br><span class="line">        <span class="keyword">long</span> times = endTimes - startTimes;</span><br><span class="line">        System.out.println(times + <span class="string">"ms"</span>);<span class="comment">//10ms</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>综合对比：</strong></p><p>缓冲流-字节数组读写（10ms）&lt; 普通流-字节数组读写（36ms）&lt; 缓冲流-单字节读写（77ms） &lt; 普通流-单字节读写（21556ms）</p><p><strong>最终结论</strong>：</p><p><strong>无论是采用单字节读取还是多字节读取，缓冲流的读写效率都是远大于普通流。</strong></p><hr><h2 id="字符缓冲流"><a href="#字符缓冲流" class="headerlink" title="字符缓冲流"></a>字符缓冲流</h2><h3 id="继承图-1"><a href="#继承图-1" class="headerlink" title="继承图"></a>继承图</h3><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201024154111.png"></p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201024154200.png"></p><h3 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>BufferedReader(Reader in)</code>：创建使用默认大小的输入缓冲区的缓冲字符输入流。</li><li><code>BufferedWriter(Writer out)</code>：创建使用默认大小的输出缓冲区的缓冲字符输出流。</li></ul><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                <span class="comment">//创建字符缓冲输入流</span></span><br><span class="line">                BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"a.txt"</span>));</span><br><span class="line">                <span class="comment">//创建字符缓冲输出流</span></span><br><span class="line">                BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"b.txt"</span>))</span><br><span class="line">        ) {</span><br><span class="line">            </span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h3><p><code>字符缓冲流</code>与<code>普通字符流</code>读写方法几乎一致，我在这里只讲述一下<code>字符缓冲流</code>特有的两个方法。其他方法，可以参考<code>普通字符流</code>常用方法。</p><p><strong>字符缓冲输入流：</strong></p><ul><li><code>String readLine()</code>：读取一行文本。</li></ul><p><strong>字符缓冲输出流：</strong></p><ul><li><code>void newLine()</code>：写一个行分隔符。</li></ul><p><strong>代码演示</strong></p><p><code>String readLine()</code>：读取一行文本。读取到最后返回<code>null</code>.</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//创建流对象</span></span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"a.txt"</span>));</span><br><span class="line">        ) {</span><br><span class="line">            <span class="comment">//读一行文字</span></span><br><span class="line">            String line = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) {</span><br><span class="line">                System.out.println(line);</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>void newLine()</code>：写一个行分隔符。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"a.txt"</span>,<span class="keyword">true</span>))</span><br><span class="line">        ) {</span><br><span class="line">            <span class="comment">//换行</span></span><br><span class="line">            bw.newLine();</span><br><span class="line">            <span class="comment">//写入数据</span></span><br><span class="line">            bw.write(<span class="string">"Jason=liboshuai"</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="课后练习：文本排序"><a href="#课后练习：文本排序" class="headerlink" title="课后练习：文本排序"></a>课后练习：文本排序</h3><p><strong>要求：</strong>请将文本信息恢复顺序。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4.</span> 人类的悲欢并不相通，我只觉得他们吵闹。</span><br><span class="line"><span class="number">2.</span> 对面是弄孩子。楼上有两人狂笑；还有打牌声。</span><br><span class="line"><span class="number">3.</span> 河中的船上有女人哭着她死去的母亲。</span><br><span class="line"><span class="number">1.</span> 楼下一个男人病得要死，那间壁的一家唱着留声机；</span><br></pre></td></tr></tbody></table></figure><p><strong>案例实现</strong>：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//将顺序混乱的文本写入一个文本文件中</span></span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"b.txt"</span>))</span><br><span class="line">        ) {</span><br><span class="line">            bw.write(<span class="string">"4. 人类的悲欢并不相通，我只觉得他们吵闹。"</span>);</span><br><span class="line">            bw.newLine();</span><br><span class="line">            bw.write(<span class="string">"2. 对面是弄孩子。楼上有两人狂笑；还有打牌声。"</span>);</span><br><span class="line">            bw.newLine();</span><br><span class="line">            bw.write(<span class="string">"3. 河中的船上有女人哭着她死去的母亲。"</span>);</span><br><span class="line">            bw.newLine();</span><br><span class="line">            bw.write(<span class="string">"1. 楼下一个男人病得要死，那间壁的一家唱着留声机；"</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//创建一个用于保存文本的Map集合，key为序号，value为内容</span></span><br><span class="line">        Map&lt;String, String&gt; textMap = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        <span class="comment">//读取刚才保存的文本文件</span></span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"b.txt"</span>))</span><br><span class="line">        ) {</span><br><span class="line">            String line = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="comment">//分割句子的序号和内容部分</span></span><br><span class="line">                String[] split = line.split(<span class="string">"\\."</span>);</span><br><span class="line">                <span class="comment">//将序号和内容，分别放入map集合的key和value</span></span><br><span class="line">                textMap.put(split[<span class="number">0</span>], split[<span class="number">1</span>]);</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//准备将排序好的句子，重新写入到文件中</span></span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"a.txt"</span>))</span><br><span class="line">        ) {</span><br><span class="line">            <span class="comment">//遍历HashMap集合，同时对文本句子进行排序</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= textMap.size(); i++) {</span><br><span class="line">                <span class="comment">//从1~4依次获取key值</span></span><br><span class="line">                String key = String.valueOf(i);</span><br><span class="line">                <span class="comment">//依次获取文本内容</span></span><br><span class="line">                String value = textMap.get(key);</span><br><span class="line">                <span class="comment">//将依次获取到的文本内容写入文件中</span></span><br><span class="line">                bw.write(key + <span class="string">"."</span> + value);</span><br><span class="line">                <span class="keyword">if</span> (i != textMap.size()) {</span><br><span class="line">                    bw.newLine();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
            <tag> IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>属性集-Properties类</title>
      <link href="2020/10/23/65_%E5%B1%9E%E6%80%A7%E9%9B%86-Properties/"/>
      <url>2020/10/23/65_%E5%B1%9E%E6%80%A7%E9%9B%86-Properties/</url>
      
        <content type="html"><![CDATA[<h1 id="属性集-Properties类"><a href="#属性集-Properties类" class="headerlink" title="属性集-Properties类"></a>属性集-Properties类</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>java.util.Properties</code>继承于<code>Hashtable</code>，来表示一个持久的属性集。它使用键值结构存储数据，每个键及其对应值都是一个字符串。该类也被许多Java类使用，比如获取系统属性时，<code>System.getProperties</code> 方法就是返回一个<code>Properties</code>对象。</p><p><strong>继承图</strong></p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201023211136.png"></p><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><ul><li><code>Properties()</code>：创建一个没有默认值的空属性列表。</li></ul><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//创建一个没有属性值的空属性列表</span></span><br><span class="line">        Properties pro1 = <span class="keyword">new</span> Properties();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><h3 id="存储的方法"><a href="#存储的方法" class="headerlink" title="存储的方法"></a>存储的方法</h3><ul><li><code>Object setProperty(String key, String value)</code>：调用Hashtable方法put，强制将字符串作为属性键和值保存，返回结果为调用Hashtable方法put的结果。</li><li><code>String getProperty(String key)</code>：在此属性列表中搜索具有指定键的属性。如果在此属性列表中没有找到该键，则递归检查默认属性列表及其默认值。如果找不到属性值，则返回<code>null</code>。</li><li><code>Set&lt;String&gt; stringPropertyNames()</code>：所有键的名称的集合。</li></ul><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//创建属性集对象</span></span><br><span class="line">        Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加键值对到属性集中</span></span><br><span class="line">        pro.setProperty(<span class="string">"fileName"</span>, <span class="string">"a.txt"</span>);</span><br><span class="line">        pro.setProperty(<span class="string">"length"</span>, <span class="string">"125"</span>);</span><br><span class="line">        pro.setProperty(<span class="string">"location"</span>, <span class="string">"D:\\D:\\study\\html_css_javaScipt\\untitled\\a.txt"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印属性集对象，验证键值对是否加入到属性集中</span></span><br><span class="line">        System.out.println(pro);</span><br><span class="line">        System.out.println(<span class="string">"--------------------------------------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过键，获取属性值</span></span><br><span class="line">        String key1 = pro.getProperty(<span class="string">"fileName"</span>);</span><br><span class="line">        String key2 = pro.getProperty(<span class="string">"length"</span>);</span><br><span class="line">        String key3 = pro.getProperty(<span class="string">"location"</span>);</span><br><span class="line">        System.out.println(key1);</span><br><span class="line">        System.out.println(key2);</span><br><span class="line">        System.out.println(key3);</span><br><span class="line">        System.out.println(<span class="string">"--------------------------------------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取所有键的Set集合</span></span><br><span class="line">        Set&lt;String&gt; keySet = pro.stringPropertyNames();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过遍历键的Set集合，来获取遍历属性值</span></span><br><span class="line">        <span class="keyword">for</span> (String key: keySet) {</span><br><span class="line">            String value = pro.getProperty(key);</span><br><span class="line">            System.out.println(value);</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"--------------------------------------"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="与IO流相关的方法"><a href="#与IO流相关的方法" class="headerlink" title="与IO流相关的方法"></a>与IO流相关的方法</h3><ul><li><p><code>void load(InputStream inStream)</code>：从输入字节流中读取属性列表(键和元素对)。</p><p>参数中使用了字节输入流，通过流对象关联到某文件上，这样就能够加载文本中的数据到属性集中了。</p><p><strong>文本数据格式:</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//key=value</span></span><br><span class="line">fileName=a.txt</span><br><span class="line">length=<span class="number">124</span></span><br><span class="line">location=D:\\D:\\study\\html_css_javaScipt\\untitled\\a.txt</span><br></pre></td></tr></tbody></table></figure><blockquote><p>文本中的数据，必须是键值对形式，可以使用空格、等号、冒号等符号分隔。</p></blockquote></li></ul><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//创建一个属性集对象</span></span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加载文本文件中的数据到属性集中</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(<span class="string">"a.txt"</span>);</span><br><span class="line">            properties.load(fis);</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="keyword">if</span> (fis != <span class="keyword">null</span>) {</span><br><span class="line">                    fis.close();</span><br><span class="line">                }</span><br><span class="line">            } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取属性集的键的Set集合</span></span><br><span class="line">        Set&lt;String&gt; keySet = properties.stringPropertyNames();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历属性集的键，来获取属性集的值</span></span><br><span class="line">        <span class="keyword">for</span> (String key: keySet) {</span><br><span class="line">            String value = properties.getProperty(key);</span><br><span class="line">            System.out.println(value);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
            <tag> 集合 </tag>
            
            <tag> IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO异常处理</title>
      <link href="2020/10/23/64_IO%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
      <url>2020/10/23/64_IO%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="IO异常处理"><a href="#IO异常处理" class="headerlink" title="IO异常处理"></a>IO异常处理</h1><h2 id="JDK7前处理方法"><a href="#JDK7前处理方法" class="headerlink" title="JDK7前处理方法"></a>JDK7前处理方法</h2><p>之前的入门练习，我们一直把异常抛出，而实际开发中并不能这样处理，在<code>JDK 7</code>之前我们都是建议使用<code>try...catch...finally</code> 代码块处理异常部分。</p><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 完成图片的copy，</span></span><br><span class="line"><span class="comment"> * 同时使用try...catch..finally处理异常部分</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">//读取的文件流对象</span></span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(<span class="string">"D:\\pictures\\wallhaven-zm1dzy.jpg"</span>);</span><br><span class="line">            <span class="comment">//写出的文件流对象</span></span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"D:\\study\\Java\\node\\heima\\wallhaven-zm1dzy_copy.jpg"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//接收读取到的字节</span></span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="comment">//接收读取到的有效字节个数</span></span><br><span class="line">            <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//进行图片的copy</span></span><br><span class="line">            <span class="keyword">while</span> ((b = fis.read(bytes)) != -<span class="number">1</span>) {</span><br><span class="line">                fos.write(bytes, <span class="number">0</span>, b);</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            <span class="comment">//关闭写出的文件流对象</span></span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="keyword">if</span> (fos != <span class="keyword">null</span>) {</span><br><span class="line">                    fos.close();</span><br><span class="line">                }</span><br><span class="line">            } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//关闭读取的文件流对象</span></span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="keyword">if</span> (fis != <span class="keyword">null</span>) {</span><br><span class="line">                    fis.close();</span><br><span class="line">                }</span><br><span class="line">            } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="JDK-7的优化处理"><a href="#JDK-7的优化处理" class="headerlink" title="JDK 7的优化处理"></a>JDK 7的优化处理</h2><p>到了<code>JDK7</code>，Java对异常的处理进行了优化，可以使用<code>try-with-resource</code> 语句了，该语句确保了每个资源在语句结束时关闭。所谓的资源（resource）是指在程序完成后，必须关闭的对象。</p><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (创建流对象语句，多个流对象，使用;隔开) {</span><br><span class="line">    <span class="comment">//对流对象进行操作的代码</span></span><br><span class="line">} <span class="keyword">catch</span> (IOException e) {</span><br><span class="line"><span class="comment">//一些处理异常的代码，如e.printStackTrace();</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>采用<code>try-with-resource</code>语句，就不用每次在<code>finally</code>代码块中手动写入关闭流对象的代码了。在<code>try ()</code>中创建的流对象，在使用完毕后，JVM会自动关闭这些流对象。</p></blockquote><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 完成文本文件的copy</span></span><br><span class="line"><span class="comment"> * 同时使用try-with-resource语句，对IO异常进行处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//在try后的小括号里创建多个流对象，使用后会被JVM自动关闭</span></span><br><span class="line">        <span class="keyword">try</span> (FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">"D:\\study\\Java\\node\\heima\\29-Map集合.md"</span>);</span><br><span class="line">             FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"D:\\pictures\\29-Map集合_copy.md"</span>)) {</span><br><span class="line">            <span class="comment">//对文本文件进行copy</span></span><br><span class="line">            <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">char</span>[] chars = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">while</span> ((b = fr.read(chars)) != -<span class="number">1</span>) {</span><br><span class="line">                fw.write(chars);</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="JDK-9的改进"><a href="#JDK-9的改进" class="headerlink" title="JDK 9的改进"></a>JDK 9的改进</h2><p>JDK9中<code>try-with-resource</code> 的改进，对于<strong>引入对象</strong>的方式，支持的更加简洁。被引入的对象，同样可以自动关闭，无需手动close，我们来了解一下格式。</p><p><strong>改进前格式：</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//被final修饰的对象</span></span><br><span class="line"><span class="keyword">final</span> Resource resource1 = <span class="keyword">new</span> Resource(<span class="string">"resource1"</span>);</span><br><span class="line"><span class="comment">//普通对象</span></span><br><span class="line">Resource resource2 = <span class="keyword">new</span> Resource(<span class="string">"resource2"</span>);</span><br><span class="line"><span class="comment">//引入方式：创建新的变量保存</span></span><br><span class="line"><span class="keyword">try</span> (Resource r1 = resource1; Resource r2 = resource2) {</span><br><span class="line">    <span class="comment">//使用上面创建的对象</span></span><br><span class="line">} <span class="keyword">catch</span> (异常类型 变量) {</span><br><span class="line">    <span class="comment">//对异常处理的代码</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>改进后格式：</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//被final修饰的对象</span></span><br><span class="line"><span class="keyword">final</span> Resource resource1 = <span class="keyword">new</span> Resource(<span class="string">"resource1"</span>);</span><br><span class="line"><span class="comment">//普通对象</span></span><br><span class="line">Resource resource2 = <span class="keyword">new</span> Resource(<span class="string">"resource2"</span>);</span><br><span class="line"><span class="comment">//引入方法：直接引入</span></span><br><span class="line"><span class="keyword">try</span> (resource1; resource2) {</span><br><span class="line">    <span class="comment">//使用上面创建的对象</span></span><br><span class="line">} <span class="keyword">catch</span> (异常类型 变量) {</span><br><span class="line"><span class="comment">//对异常处理的代码</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>改进后，代码演示：</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 完成文本文件的copy</span></span><br><span class="line"><span class="comment"> * 同时使用try-with-resource JDK-9改进的语句，对IO异常进行处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        <span class="comment">//创建流对象</span></span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">"D:\\study\\Java\\node\\heima\\29-Map集合.md"</span>);</span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"D:\\pictures\\29-Map集合_copy.md"</span>);</span><br><span class="line">        <span class="comment">//引入到try中</span></span><br><span class="line">        <span class="keyword">try</span> (fr; fw) {</span><br><span class="line">            <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">char</span>[] chars = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">while</span> ((b = fr.read(chars)) != -<span class="number">1</span>) {</span><br><span class="line">                fw.write(chars);</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
            <tag> IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符流-Reader</title>
      <link href="2020/10/23/63_%E5%AD%97%E7%AC%A6%E6%B5%81-Reader/"/>
      <url>2020/10/23/63_%E5%AD%97%E7%AC%A6%E6%B5%81-Reader/</url>
      
        <content type="html"><![CDATA[<h1 id="字符流-Reader"><a href="#字符流-Reader" class="headerlink" title="字符流-Reader"></a>字符流-Reader</h1><h2 id="Reader抽象类"><a href="#Reader抽象类" class="headerlink" title="Reader抽象类"></a>Reader抽象类</h2><p><code>java.io.Reader</code>抽象类是表示用于读取字符流的所有类的超类，可以读取字符信息到内存中。它定义了字符输入流的基本共性功能方法。</p><ul><li><code>void close()</code>：关闭此流并释放与此流相关联的任何系统资源。    </li><li><code>int read()</code>：从输入流读取一个字符。 </li><li><code>int read(char[] cbuf)</code>：从输入流中读取一些字符，将它们存储到字符数组 cbuf中 。并返回读取到的有效字符个数。</li></ul><h2 id="FileReader类"><a href="#FileReader类" class="headerlink" title="FileReader类"></a>FileReader类</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><code>java.io.Reader</code>抽象类下有众多子类，这里我们使用它的间接子类<code>FileReader</code>来进行举例讲解。</p><p><code>java.io.FileReader</code>类是读取字符文件的便利类。构造时使用系统默认的字符编码和默认字节缓冲区。</p><p><strong>继承图</strong></p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201023032249.png"></p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>FileReader(File file)</code>： 通过给定要读取的File对象，来创建一个新的<code>FileReader</code> 。</li><li><code>FileReader(String fileName)</code>：通过给定要读取的文件的String类型的名称，来创建一个新的<code>FileReader</code>。</li></ul><blockquote><p>文件不存在，则会抛出<code>java.io.FileNotFoundException</code>异常。</p></blockquote><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        <span class="comment">//传入一个File对象，来创建一个FileReader对象</span></span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(<span class="keyword">new</span> File(<span class="string">"a.txt"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//传入一个String类路径名，来创建一个FileReader对象</span></span><br><span class="line">        FileReader fr02 = <span class="keyword">new</span> FileReader(<span class="string">"b.txt"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><ul><li><code>int read()</code>：每次读取一个字符，并提示为<code>int</code>类型。读取到文件末尾处，则返回<code>-1</code>。</li><li><code>int read(char[] cbuf)</code>：读取一些字符，将它们存储到字符数组 cbuf中 ，并返回读取到的有效字符个数。</li><li><code>String getEncoding()</code>：返回此流使用的字符编码的名称。</li></ul><p><strong>代码演示</strong></p><p><code>int read()</code>：每次读取一个字符，并提示为<code>int</code>类型。读取到文件末尾处，则返回<code>-1</code>。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        <span class="comment">//创建一个FileReader对象</span></span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">"a.txt"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义用于接收读取到的字符的变量</span></span><br><span class="line">        <span class="keyword">int</span> value;</span><br><span class="line">        <span class="comment">//每次读取一个字符</span></span><br><span class="line">        <span class="keyword">while</span> ((value = fr.read()) != -<span class="number">1</span>) {</span><br><span class="line">            System.out.println((<span class="keyword">char</span>) value);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        fr.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>int read(char[] cbuf)</code>：读取一些字符，将它们存储到字符数组 cbuf中 ，并返回读取到的有效字符个数。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        <span class="comment">//创建一个FileReader对象</span></span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">"D:\\study\\html_css_javaScipt\\untitled\\a.txt"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义一个用于接收读取到的字符的字符数组</span></span><br><span class="line">        <span class="keyword">char</span>[] chars = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="comment">//定义一个用于接收读取到有效字符个数的变量</span></span><br><span class="line">        <span class="keyword">int</span> b;</span><br><span class="line">        <span class="comment">//读取一些字符，将它们存储到字符数组中</span></span><br><span class="line">        <span class="keyword">while</span> ((b = fr.read(chars)) != -<span class="number">1</span>) {</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(chars,<span class="number">0</span>,b));</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        fr.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>String getEncoding()</code>：返回此流使用的字符编码的名称。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        <span class="comment">//创建一个File对象</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"D:\\study\\html_css_javaScipt\\untitled"</span>,<span class="string">"a.txt"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//传入File对象，来创建一个FileReader对象</span></span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(file);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取此流的字符编码</span></span><br><span class="line">        String encoding = fr.getEncoding();</span><br><span class="line">        System.out.println(encoding);<span class="comment">//UTF8</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        fr.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="课后练习：文本文件的复制"><a href="#课后练习：文本文件的复制" class="headerlink" title="课后练习：文本文件的复制"></a>课后练习：文本文件的复制</h2><p><strong>案例实现</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 完成一个makeDown文件的复制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        <span class="comment">//创建被复制的文件的File对象</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"D:\\study\\Java\\node\\heima"</span>,<span class="string">"28-Collections.md"</span>);</span><br><span class="line">        <span class="comment">//创建被复制后的文件的File对象</span></span><br><span class="line">        File file_bak = <span class="keyword">new</span> File(<span class="string">"D:\\pictures"</span>,<span class="string">"28-Collections_bak.md"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建被复制的文件的FileReader对象</span></span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(file);</span><br><span class="line">        <span class="comment">//创建被复制后的文件的FileWriter对象</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(file_bak);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义接收读取的有效字符个数的变量</span></span><br><span class="line">        <span class="keyword">int</span> b;</span><br><span class="line">        <span class="comment">//定义用于接收读取到的字符的字符数组</span></span><br><span class="line">        <span class="keyword">char</span>[] chars = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//进行文本文件的copy</span></span><br><span class="line">        <span class="keyword">while</span> ((b = fr.read(chars)) != -<span class="number">1</span>) {</span><br><span class="line">            fw.write(chars,<span class="number">0</span>,b);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//刷新缓冲流，并关闭资源</span></span><br><span class="line">        fw.close();</span><br><span class="line">        fr.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
            <tag> IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符流-Writer</title>
      <link href="2020/10/22/62_%E5%AD%97%E7%AC%A6%E6%B5%81-Writer/"/>
      <url>2020/10/22/62_%E5%AD%97%E7%AC%A6%E6%B5%81-Writer/</url>
      
        <content type="html"><![CDATA[<blockquote><p>当使用字节流读取文本文件时，可能会有一个小问题。就是遇到中文字符时，可能不会显示完整的字符，那是因为一个中文字符可能占用多个字节存储。所以Java提供一些字符流类，以字符为单位读写数据，专门用于处理文本文件。</p></blockquote><h1 id="字符流-Writer"><a href="#字符流-Writer" class="headerlink" title="字符流-Writer"></a>字符流-Writer</h1><h2 id="Writer抽象类"><a href="#Writer抽象类" class="headerlink" title="Writer抽象类"></a>Writer抽象类</h2><p><code>java.io.Writer </code>抽象类是表示用于写出字符流的所有类的超类，将指定的字符信息写出到目的地。它定义了字节输出流的基本共性功能方法。</p><ul><li><code>void write(int c)</code>：写入单个字符。</li><li><code>void write(char[] cbuf)</code>：写入指定字符数组。 </li><li><code>abstract void write(char[] cbuf, int off, int len)</code>：写入字符数组的某一部分,从数组索引<code>off</code>开始,写入<code>len</code>长度的字符。 </li><li><code>void write(String str)</code>：写入字符串。 </li><li><code>void write(String str, int off ,int len)</code>：写入字符串的某一部分,从数组索引<code>off</code>开始,写入<code>len</code>长度的字符串。 </li><li><code>void flush()</code>：将数据从缓冲区刷新到文件中，流对象可以被再次使用。</li><li><code>void close()</code>：自动将数据从缓冲区刷新到文件中，但会通知系统释放、关闭资源，流对象不可以被再次使用。</li></ul><h2 id="FileWrite类"><a href="#FileWrite类" class="headerlink" title="FileWrite类"></a>FileWrite类</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><code>java.io.Writer</code>有众多子类，我们使用它的间接子类<code>FileWriter</code>类来举例讲解。</p><p><code>java.io.FileWriter </code>类是写出字符到文件的便利类。构造时使用系统默认的字符编码和默认字节缓冲区。</p><p><strong>继承图</strong></p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201023041956.png"></p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>FileWriter(File file)</code>：通过给定一个要读取的<code>File</code>对象，来创建一个新的<code>FileWriter</code>对象。</li><li><code>FileWriter(String fileName)</code>：通过给定一个要读取的<code>String</code>类的文件路径，来创建一个新的<code>FileWriter</code>对象。</li><li><code>FileWriter(File file, boolean append</code>：通过给定一个要读取的<code>File</code>对象，来创建一个新的<code>FileWriter</code>对象。通过<code>append</code>控制是否追加文件。</li><li><code>FileWriter(String fileName, boolean append)</code>：通过给定一个要读取的<code>String</code>类的文件路径，来创建一个新的<code>FileWriter</code>对象。通过<code>append</code>控制是否追加文件。</li></ul><blockquote><p><code>boolean append</code>为追加开关，为<code>false</code>时，每次创建<code>FileWriter</code>对象时，都会创建一个新的空文件，来覆盖原文件。为<code>true</code>时，则不会覆盖原文件，而是在原文件后追加。不赋值的情况下，默认为<code>false</code>。</p></blockquote><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        <span class="comment">//通过给定一个`File`对象，来创建一个新的`FileWriter`对象。</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="keyword">new</span> File(<span class="string">"D:\\study\\html_css_javaScipt\\untitled"</span>,<span class="string">"a.txt"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过给定一个要读取的`String`类的文件路径，来创建一个新的`FileWriter`对象。</span></span><br><span class="line">        FileWriter fw2 = <span class="keyword">new</span> FileWriter(<span class="string">"D:\\study\\html_css_javaScipt\\untitled\\b.txt"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><ul><li><code>void write(int c)</code>：写入单个字符。</li><li><code>void write(char[] cbuf)</code>：写入指定字符数组。 </li><li><code>void write(char[] cbuf, int off, int len)</code>：写入字符数组的某一部分,从数组索引<code>off</code>开始,写入<code>len</code>长度的字符。 </li><li><code>write(String str)</code>：写入指定的字符串。</li><li><code>write(String str, int off, int len)</code>：写入字符串的某一部分,从字符串索引<code>off</code>开始,写入<code>len</code>长度的字符串。 </li><li><code>void flush()</code>：将数据从缓冲区刷新到文件中，流对象可以被再次使用。</li><li><code>void close()</code>：自动将数据从缓冲区刷新到文件中，但会通知系统释放、关闭资源，流对象不可以被再次使用。</li></ul><blockquote><ol><li><p>即便是调用了<code>flush()</code>方法写出了数据，操作的最后还是要调用<code>close()</code>方法，释放系统资源。</p></li><li><p>字符流，只能操作文本文件，不能操作图片，视频等非文本文件。</p><p>当我们单纯读或者写文本文件时  使用字符流 其他情况使用字节流</p></li></ol></blockquote><p><strong>代码演示</strong></p><p><code>void write(int c)</code>：写入单个字符。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        <span class="comment">//通过传入File对象，来创建一个FileWriter对象</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"D:\\study\\html_css_javaScipt\\untitled"</span>,<span class="string">"a.txt"</span>);</span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(file);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//传入int类型数据每次写入一个字符</span></span><br><span class="line">        fw.write(<span class="number">25105</span>);</span><br><span class="line">        fw.write(<span class="number">26159</span>);</span><br><span class="line">        fw.write(<span class="number">26446</span>);</span><br><span class="line">        fw.write(<span class="number">21338</span>);</span><br><span class="line">        fw.write(<span class="number">24069</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        fw.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>void write(char[] cbuf)</code>：写入指定字符数组。 </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        <span class="comment">//通过传入文件路径名，创建一个FileWriter对象</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"D:\\study\\html_css_javaScipt\\untitled\\b.txt"</span>,<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将字符串转换为字符数组</span></span><br><span class="line">        <span class="keyword">char</span>[] chars = <span class="string">"我是李博帅"</span>.toCharArray();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写入指定的字符数组</span></span><br><span class="line">        fw.write(chars);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        fw.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>void write(char[] cbuf, int off, int len)</code>：写入字符数组的某一部分,从数组索引<code>off</code>开始,写入<code>len</code>长度的字符。 </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        <span class="comment">//通过传入一个File对象，来创建FileWriter对象</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"D:\\study\\html_css_javaScipt\\untitled"</span>,<span class="string">"a.txt"</span>);</span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(file, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将字符串转化为char[]</span></span><br><span class="line">        <span class="keyword">char</span>[] line = <span class="string">"\r\n"</span>.toCharArray();<span class="comment">//加入换行符</span></span><br><span class="line">        <span class="keyword">char</span>[] chars = <span class="string">"--我是王多鱼--"</span>.toCharArray();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写入字符数组的一部分</span></span><br><span class="line">        fw.write(line);</span><br><span class="line">        fw.write(chars,<span class="number">2</span>,<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        fw.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>write(String str)</code>：写入指定的字符串。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        <span class="comment">//通过传入一个File对象，来创建FileWriter对象</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"D:\\study\\html_css_javaScipt\\untitled"</span>, <span class="string">"a.txt"</span>);</span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(file, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写入字符串</span></span><br><span class="line">        fw.write(<span class="string">"\r\n"</span>);</span><br><span class="line">        fw.write(<span class="string">"你能不能不要再说话了！"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        fw.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>write(String str, int off, int len)</code>：写入字符串的某一部分,从字符串索引<code>off</code>开始,写入<code>len</code>长度的字符串。 </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        <span class="comment">//通过传入一个String类文件路径名，来创建一个FileWriter对象</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"b.txt"</span>, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写入部分字符串</span></span><br><span class="line">        fw.write(<span class="string">"-\r\n11"</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">        fw.write(<span class="string">"其实我还好"</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        fw.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>void flush()</code>：将数据从缓冲区刷新到文件中，流对象可以被再次使用。</p><p><code>void close()</code>：自动将数据从缓冲区刷新到文件中，但会通知系统释放、关闭资源，流对象不可以被再次使用。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        <span class="comment">//创建一个File对象</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"a.txt"</span>);;</span><br><span class="line">        <span class="comment">//传入一个File对象，来创建一个FileWriter对象</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(file, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将字符串转化为char数组</span></span><br><span class="line">        <span class="keyword">char</span>[] line = <span class="string">"\r\n"</span>.toCharArray();</span><br><span class="line">        <span class="keyword">char</span>[] chars = <span class="string">"闫老板是个大垃圾"</span>.toCharArray();</span><br><span class="line">        <span class="comment">//写入部分的char数组</span></span><br><span class="line">        fw.write(line);</span><br><span class="line">        fw.write(chars);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//刷新缓冲区，流对象还可以被再次使用</span></span><br><span class="line">        fw.flush();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//尝试着刷新后，再次写入一个String对象</span></span><br><span class="line">        fw.write(<span class="string">"\r\n不管明天的路有多漫长"</span>);<span class="comment">//写入数据成功</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        fw.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//尝试着关闭后，再次写入一个String对象</span></span><br><span class="line">        fw.write(<span class="string">"\r\n我再次启航,带着我的勋章"</span>);<span class="comment">//异常：java.io.IOException: Stream closed</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
            <tag> IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字节流-Inputstream</title>
      <link href="2020/10/22/61_%E5%AD%97%E8%8A%82%E6%B5%81-Inputstream/"/>
      <url>2020/10/22/61_%E5%AD%97%E8%8A%82%E6%B5%81-Inputstream/</url>
      
        <content type="html"><![CDATA[<h1 id="字节流-Inputstream"><a href="#字节流-Inputstream" class="headerlink" title="字节流-Inputstream"></a>字节流-Inputstream</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>java.io.InputStream </code>抽象类是表示字节输入流的所有类的超类，可以读取字节信息到内存中。它定义了字节输入流的基本共性功能方法。</p><ul><li><code>void close()</code>：关闭此输入流并释放与此流相关联的任何系统资源。    </li><li><code>abstract int read()</code>：从输入流读取数据的下一个字节。 </li><li><code>int read(byte[] b)</code>：从输入流中读取一些字节数，并将它们存储到字节数组中 。并返回获取的有效的字节个数。</li></ul><h2 id="FileInputStream类"><a href="#FileInputStream类" class="headerlink" title="FileInputStream类"></a>FileInputStream类</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p><code>java.io.InputStream</code>有很多子类，我们以它的直接子类<code>FileInputStream</code>为例进行讲解。</p><p><code>java.io.FileInputStream </code>类是文件输入流，从文件中读取字节。</p><p><strong>继承图</strong></p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201023032709.png"></p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>FileInputStream(File file)</code>：通过打开与实际文件的连接来创建一个<code>FileInputStream</code>对象，该文件由文件系统中的File对象来命名。 </li><li><code>FileInputStream(String name)</code>： 通过打开与实际文件的连接来创建一个<code>FileInputStream</code>，该文件由文件系统中的路径名命名。</li></ul><blockquote><p>若传入的文件路径不存在，则会抛出<code>java.io.FileNotFoundException</code>异常。</p></blockquote><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        <span class="comment">//传入File对象创建一个FileInputStream对象</span></span><br><span class="line">        FileInputStream fis1 = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">"a.txt"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//传入String路径名创建一个FileInputStream对象</span></span><br><span class="line">        FileInputStream fis2 = <span class="keyword">new</span> FileInputStream(<span class="string">"b.txt"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><ul><li><code>int read()</code>：从输入流读取数据的一个字节，并提升为<code>int</code>类型。读取到文件末尾，返回<code>-1</code>。</li><li><code>int read(byte[] b)</code>：每次读取b长度个字节到数组中，返回读取到的有效字节个数，读取到末尾时，返回<code>-1</code> 。</li></ul><p><strong>代码演示</strong></p><p><code>int read()</code>：从输入流读取数据的一个字节，并提升为<code>int</code>类型。读取到文件末尾，返回<code>-1</code>。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        <span class="comment">// 创建FileInputStream对象</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"a.txt"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义变量，保存数据</span></span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="comment">// 读取数据，返回一个字节</span></span><br><span class="line">        <span class="keyword">while</span> ((i = fis.read()) != -<span class="number">1</span>) {</span><br><span class="line">            System.out.print((<span class="keyword">char</span>) i + <span class="string">"; "</span>);<span class="comment">//a; b; c; </span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        fis.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>int read(byte[] b)</code>：每次读取b长度个字节到数组中，返回读取到的有效字节个数，读取到末尾时，返回<code>-1</code> 。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        <span class="comment">//创建FileInputStream</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"a.txt"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义变量，作为有效个数</span></span><br><span class="line">        <span class="keyword">int</span> length;</span><br><span class="line">        <span class="comment">//定义一个长度为2的字节数组，用作保存数据的容器</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="comment">//读取b长度个字节到byte数组中</span></span><br><span class="line">        <span class="keyword">while</span> ((length = fis.read(bytes)) != -<span class="number">1</span>) {</span><br><span class="line">            <span class="comment">// 每次读取后,把数组变成字符串打印</span></span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(bytes,<span class="number">0</span>,length));</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        fis.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><ol><li><p>使用<code>int read(byte[] b)</code>时要注意，在最后一次读取时，可能出现上次读取的数据不能被完全覆盖，而产生错误的数据。所以我们需要用<code>length</code>接收<code>int read(byte[] b)</code>获得有效个数，来避免这种情况。</p></li><li><p>使用数组读取，每次读取多个字节，减少了系统间的IO操作次数，从而提高了读写的效率，建议开发中使用。</p></li></ol></blockquote><h2 id="课后练习：图片复制"><a href="#课后练习：图片复制" class="headerlink" title="课后练习：图片复制"></a>课后练习：图片复制</h2><p><strong>复制原理图解</strong></p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201022203954.jpg"></p><p><strong>案例实现</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        <span class="comment">//创建File对象</span></span><br><span class="line">        File filesSrc = <span class="keyword">new</span> File(<span class="string">"D:\\pictures\\压缩后"</span>,<span class="string">"one.jpg"</span>);</span><br><span class="line">        File filesDest = <span class="keyword">new</span> File(<span class="string">"D:\\study\\Java\\node\\heima"</span>,<span class="string">"one_bak.jpg"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建字节流对象</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(filesSrc);</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(filesDest);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义存储数据的byte数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="comment">//定义接收获取的有效个数变量</span></span><br><span class="line">        <span class="keyword">int</span> length;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//进行图片的复制</span></span><br><span class="line">        <span class="keyword">while</span> ((length = fis.read(bytes)) != -<span class="number">1</span>) {</span><br><span class="line">            fos.write(bytes,<span class="number">0</span>,length);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        fis.close();</span><br><span class="line">        fos.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
            <tag> IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字节流-OutputStream</title>
      <link href="2020/10/22/60_%E5%AD%97%E8%8A%82%E6%B5%81-OutputStream/"/>
      <url>2020/10/22/60_%E5%AD%97%E8%8A%82%E6%B5%81-OutputStream/</url>
      
        <content type="html"><![CDATA[<h1 id="字节流-OutputStream"><a href="#字节流-OutputStream" class="headerlink" title="字节流-OutputStream"></a>字节流-OutputStream</h1><blockquote><p>一切文件数据(文本、图片、视频等)在存储时，都是以二进制数字的形式保存，都一个一个的字节，那么传输时一样如此。所以，字节流可以传输任意文件数据。在操作流的时候，我们要时刻明确，无论使用什么样的流对象，底层传输的始终为二进制数据。</p></blockquote><h2 id="OutputStream抽象类"><a href="#OutputStream抽象类" class="headerlink" title="OutputStream抽象类"></a>OutputStream抽象类</h2><p><code>java.io.OutputStream</code>抽象类是表示字节输出流的所有类的超类，将指定的字节信息写出到目的地。它定义了字节输出流的基本共性功能方法。</p><ul><li><code>void close()</code>：关闭此输出流并释放与此流相关联的任何系统资源。  </li><li><code>void flush()</code>：刷新此输出流并强制任何缓冲的输出字节被写出。  </li><li><code>void write(byte[] b)</code>：将指定的字节数组写入此输出流。  </li><li><code>void write(byte[] b, int off, int len)</code>：写入字符数组的某一部分，从数组索引<code>off</code>开始,写入<code>len</code>长度的字符。 </li><li><code>abstract void write(int b)</code>：将指定的字节写入此输出流。</li></ul><h2 id="FileOutputStream类"><a href="#FileOutputStream类" class="headerlink" title="FileOutputStream类"></a>FileOutputStream类</h2><p><code>OutputStream</code>有很多子类，我们从最简单的一个子类开始。</p><p><code>java.io.FileOutputStream </code>类是文件输出流，用于将数据写出到文件。</p><p><strong>继承图</strong></p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201023034527.png"></p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>FileOutputStream(File file, boolean append)</code>：通过传入<code>File</code>对象，来创建一个<code>FileOutputStream</code>对象。</li><li><code>FileOutputStream(String name, boolean append)</code>：通过传入<code>String</code>类文件路径名，来创建一个<code>FileOutputStream</code>对象。</li></ul><blockquote><p>当你创建一个流对象时，必须传入一个文件路径。该路径下：</p><ul><li>如果没有这个文件，则会创建该文件。</li><li>如果有这个文件，apped默认为false，则会清空这个文件的数据。如果不想清空文件的数据，则可以把append设置为true，就会在文件后面追加。</li></ul></blockquote><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"a.txt"</span>);</span><br><span class="line">        <span class="comment">//使用File对象，创建字节流对象</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用文件名称，创建字节流对象</span></span><br><span class="line">        FileOutputStream fos1 = <span class="keyword">new</span> FileOutputStream(<span class="string">"a.md"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><ul><li><code>void write(int b)</code>：将指定的一个字节写入此输出流。</li><li><code>void write(byte[] b)</code>：将指定的字节数组写入此输出流。  </li><li><code>void write(byte[] b, int off, int len)</code>：写入字符数组的某一部分,从数组索引<code>off</code>开始,写入<code>len</code>长度的字符。 </li></ul><p><strong>代码演示</strong></p><p><code>void write(int b)</code>：将指定的一个字节写入此输出流。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        <span class="comment">//使用file对象创建一个FileOutputStream对象</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"a.txt"</span>);</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用write()写入硬盘文件数据</span></span><br><span class="line">        fos.write(<span class="number">97</span>);</span><br><span class="line">        fos.write(<span class="number">98</span>);</span><br><span class="line">        fos.write(<span class="number">99</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>void write(byte[] b)</code>：将指定的字节数组写入此输出流。  </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        <span class="comment">//使用文件名称创建流对象</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"a.txt"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将字符串转换为字节数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="string">"Jason"</span>.getBytes();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将指定的字节数组写入此输出流</span></span><br><span class="line">        fos.write(b);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>void write(byte[] b, int off, int len)</code>：将写入字符数组的某一部分,从数组索引<code>off</code>开始,写入<code>len</code>长度的字符。 </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        <span class="comment">//使用File对象创建FileOutputStream对象</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"a.txt"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将字符串转为byte数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="string">"public static void main(String[] args)"</span>.getBytes();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将byte数组从指定索引，写入指定长度的byte数据到输出流</span></span><br><span class="line">        fos.write(bytes,<span class="number">7</span>,<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><ol><li>虽然参数为int类型四个字节，但是只会保留一个字节的信息写出。</li><li>流操作完毕后，必须释放系统资源，调用close方法，千万记得。</li></ol></blockquote><h2 id="写出换行"><a href="#写出换行" class="headerlink" title="写出换行"></a>写出换行</h2><p>我们直接写入数据是没有换行的，在Windows系统里，换行符号<code>\r\n</code>。我们可以手动把换行符号加进入。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"a.txt"</span>, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义字节数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = {<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>,<span class="number">100</span>,<span class="number">101</span>};</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将换行写入输出流</span></span><br><span class="line">        fos.write(<span class="string">"\r\n"</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将byte数组写入输出流</span></span><br><span class="line">        fos.write(bytes);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将换行写入输出流</span></span><br><span class="line">        fos.write(<span class="string">"\r\n"</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><ol><li>回车符<code>\r</code>和换行符<code>\n</code> ：<ul><li>回车符：回到一行的开头（return）。</li><li>换行符：下一行（newline）。</li></ul></li><li>不同系统中换行符的区别：<ul><li>Windows系统里，每行结尾是 <code>回车+换行</code> ，即<code>\r\n</code>；</li><li>Unix系统里，每行结尾只有 <code>换行</code> ，即<code>\n</code>；</li><li>Mac系统里，每行结尾是 <code>回车</code> ，即<code>\r</code>。从 Mac OS X开始与Linux统一。</li></ul></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
            <tag> IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO流</title>
      <link href="2020/10/22/59_IO%E6%B5%81/"/>
      <url>2020/10/22/59_IO%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h1 id="IO-字节流"><a href="#IO-字节流" class="headerlink" title="IO-字节流"></a>IO-字节流</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在讲述字节流之前，我们首先需要明白IO流是什么。</p><p>我们把数据的传输，可以看做是一种数据的流动，按照流动的方向，以内存为基准，分为<code>输入input</code> 和<code>输出output</code> ，即流向内存是输入流，流出内存的输出流。</p><p>Java中I/O操作主要是指使用<code>java.io</code>包下的内容，进行输入、输出操作。<strong>输入</strong>也叫做<strong>读取</strong>数据，<strong>输出</strong>也叫做作<strong>写出</strong>数据。</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>根据数据的流向分为：<strong>输入流</strong>和<strong>输出流</strong>。</p><ul><li><strong>输入流</strong> ：把数据从<code>其他设备</code>上读取到<code>内存</code>中的流。 </li><li><strong>输出流</strong> ：把数据从<code>内存</code> 中写出到<code>其他设备</code>上的流。</li></ul><p>根据数据的类型分为：<strong>字节流</strong>和<strong>字符流</strong>。</p><ul><li><strong>字节流</strong> ：以<strong>字节</strong>为单位，读写数据的流。</li><li><strong>字符流</strong> ：以<strong>字符</strong>为单位，读写数据的流。</li></ul><h2 id="顶级父类"><a href="#顶级父类" class="headerlink" title="顶级父类"></a>顶级父类</h2><table><thead><tr><th align="center"></th><th align="center">输入流</th><th align="center">输出流</th></tr></thead><tbody><tr><td align="center">字节流</td><td align="center">字节输入流（InputStream）</td><td align="center">字节输出流（OutputStream）</td></tr><tr><td align="center">字符流</td><td align="center">字符输入流（Reader）</td><td align="center">字符输出流（Writer）</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
            <tag> IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>递归</title>
      <link href="2020/10/22/58_%E9%80%92%E5%BD%92/"/>
      <url>2020/10/22/58_%E9%80%92%E5%BD%92/</url>
      
        <content type="html"><![CDATA[<h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>递归指在一个方法内，调用这个方法的一种情况。</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201022102059.jpg"></p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>递归可以简单的分为两种：</p><ol><li>直接递归：方法自身直接调用自己。</li><li>间接递归：方法A调用方法B，方法B调用方法A，间接的达成方法调用自身。</li></ol><p><strong>代码演示</strong></p><ul><li>功能要求：使用递归计算1~100的整数和</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> num)</span> </span>{</span><br><span class="line">        <span class="comment">//设定限制条件</span></span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">1</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//调用自身</span></span><br><span class="line">        <span class="keyword">return</span> num + calc(--num);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//调用递归方法</span></span><br><span class="line">        <span class="keyword">int</span> sum = calc(<span class="number">100</span>);</span><br><span class="line">        System.out.println(sum);<span class="comment">//5050</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>功能要求：使用递归计算10的阶乘</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> num)</span> </span>{</span><br><span class="line">        <span class="comment">//设定限制条件</span></span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">1</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//调用自身</span></span><br><span class="line">        <span class="keyword">return</span> num * calc(--num);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//调用递归方法</span></span><br><span class="line">        <span class="keyword">long</span> sum = calc(<span class="number">20</span>);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">//注：不能计算太大数，不然会超出long类型的数字范围</span></span><br></pre></td></tr></tbody></table></figure><ul><li>功能要求：使用递归遍历文件目录</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printDir</span><span class="params">(File file)</span> </span>{</span><br><span class="line">        <span class="comment">//获取文件目录下第一级所有文件及目录的File对象</span></span><br><span class="line">        File[] files = file.listFiles();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历文件对象</span></span><br><span class="line">        <span class="keyword">for</span> (File f: files) {</span><br><span class="line">            <span class="comment">//判断是否为文件</span></span><br><span class="line">            <span class="keyword">if</span> (f.isFile()) {</span><br><span class="line">                <span class="comment">//如果为文件，则打印绝对路径</span></span><br><span class="line">                String absolutePath = f.getAbsolutePath();</span><br><span class="line">                System.out.println(absolutePath);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="comment">//如果为目录，则继续调用自身，继续遍历目录下的文件和目录</span></span><br><span class="line">                printDir(f);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//调用递归，遍历打印文件目录</span></span><br><span class="line">        printDir(<span class="keyword">new</span> File(<span class="string">"D:\\study\\Java\\doc\\黑马Java\\02-Java语言进阶\\day08_File类、递归"</span>));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li>递归一定要有条件限定，保证递归能够停止下来，否则会发生栈内存溢出。</li><li>在递归中既然有限定条件，但递归次数也不能太多。否则也会发生栈内存溢出。</li><li>构造方法不能使用递归。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>File类</title>
      <link href="2020/10/21/57_File%E7%B1%BB/"/>
      <url>2020/10/21/57_File%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>java.io.File</code> 类是文件和目录路径名的抽象表示，主要用于文件和目录的创建、查找和删除等操作。</p><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><ul><li><code>File(String pathname)</code>：通过将给定的<strong>路径名字符串</strong>转换为抽象路径名来创建新的 File实例</li><li><code>File(String parent, String child)</code>：从<strong>父路径名字符串和子路径名字符串</strong>创建新的 File实例。</li><li><code>File(File parent, String child)</code>：从<strong>父抽象路径名和子路径名字符串</strong>创建新的 File实例。  </li></ul><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//通过将给定的路径名字符串转换为抽象路径名来创建新的File实例。</span></span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">"a.txt"</span>);<span class="comment">//相对路径</span></span><br><span class="line">        File file2 = <span class="keyword">new</span> File(<span class="string">"D:\\study\\html_cs_javaScipt\\untitled\\JDBC\\src\\b.txt"</span>);<span class="comment">//绝对路径</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//从父路径名字符串和子路径名字符串创建新的File实例。</span></span><br><span class="line">        File file3 = <span class="keyword">new</span> File(<span class="string">"D:\\study\\html_cs_javaScipt\\untitled\\JDBC\\src"</span>,</span><br><span class="line">                <span class="string">"c.txt"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从父抽象路径名和子路径名字符串创建新的File实例。  </span></span><br><span class="line">        File file4 = <span class="keyword">new</span> File(<span class="keyword">new</span> File(<span class="string">"D:\\study\\html_cs_javaScipt\\untitled\\JDBC\\src"</span>),</span><br><span class="line">                <span class="string">"d.txt"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><ol><li>一个File对象代表硬盘中实际存在的一个文件或者目录。</li><li>无论该路径下是否存在文件或者目录，都不影响File对象的创建。</li></ol></blockquote><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><h3 id="获取的方法"><a href="#获取的方法" class="headerlink" title="获取的方法"></a>获取的方法</h3><ul><li><code>String getAbsolutePath()</code>：返回此File的绝对路径名字符串。</li><li><code>String getPath()</code>：将此File转换为路径名字符串（可以是绝对，也可以相对）。 </li><li><code>String getName()</code>：返回由此File表示的文件或目录的名称。  </li><li><code>long length()</code>：返回由此File表示的文件的大小。 </li></ul><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//创建一个File对象</span></span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">"a.txt"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回此File对象的绝对路径名字符串。</span></span><br><span class="line">        String absolutePath = file1.getAbsolutePath();</span><br><span class="line">        System.out.println(<span class="string">"文件的绝对路径："</span> + absolutePath);</span><br><span class="line">        <span class="comment">//文件的绝对路径：D:\study\html_css_javaScipt\untitled\a.txt</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//将此File转换为路径名字符串。</span></span><br><span class="line">        String path = file1.getPath();</span><br><span class="line">        System.out.println(<span class="string">"文件的路径："</span> + path);<span class="comment">//文件的路径：a.txt</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回由此File表示的文件或目录的名称。</span></span><br><span class="line">        String name = file1.getName();</span><br><span class="line">        System.out.println(<span class="string">"文件的名字："</span> + name);<span class="comment">//文件的名字：a.txt</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回由此File表示的文件的大小</span></span><br><span class="line">        <span class="keyword">long</span> length = file1.length();</span><br><span class="line">        System.out.println(<span class="string">"文件的大小："</span> + length);<span class="comment">//文件的大小：31554</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>文件夹本身是没有大小的概念的，所以使用<code>long length()</code>获取文件夹的大小，只会得到0。</p></blockquote><h3 id="判断的方法"><a href="#判断的方法" class="headerlink" title="判断的方法"></a>判断的方法</h3><ul><li><code>boolean exists()</code>：判断此File对象表示的文件或目录是否实际存在。</li><li><code>boolean isDirectory()</code>：判断此File对象表示的是否为目录。</li><li><code>boolean isFile()</code>：判断此File对象表示的是否为文件。</li></ul><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//使用一个文件路径，创建一个File对象</span></span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">"a.txt"</span>);</span><br><span class="line">        <span class="comment">//使用一个文件夹路径，创建一个File对象d</span></span><br><span class="line">        File file2 = <span class="keyword">new</span> File(<span class="string">"."</span>);<span class="comment">//.表示当前目录</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断此File对象表示的文件或目录是否实际存在</span></span><br><span class="line">        <span class="keyword">boolean</span> b1 = file1.exists();</span><br><span class="line">        System.out.println(<span class="string">"b1File对象是否存在："</span> + b1);<span class="comment">//b1File对象是否存在：true</span></span><br><span class="line">        <span class="keyword">boolean</span> b2 = file2.exists();</span><br><span class="line">        System.out.println(<span class="string">"b2File对象是否存在："</span> + b2);<span class="comment">//b2File对象是否存在：true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断此File对象表示的是否为目录</span></span><br><span class="line">        <span class="keyword">boolean</span> b3 = file1.isDirectory();</span><br><span class="line">        System.out.println(<span class="string">"b1File对象是否为目录："</span> + b3);<span class="comment">//b1File对象是否为目录：false</span></span><br><span class="line">        <span class="keyword">boolean</span> b4 = file2.isDirectory();</span><br><span class="line">        System.out.println(<span class="string">"b2File对象是否为目录："</span> + b4);<span class="comment">//b2File对象是否为目录：true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断此File对象示的是否为文件</span></span><br><span class="line">        <span class="keyword">boolean</span> b5 = file1.isFile();</span><br><span class="line">        System.out.println(<span class="string">"b1File对象是否为文件："</span> + b5);<span class="comment">//b1File对象是否为文件：true</span></span><br><span class="line">        <span class="keyword">boolean</span> b6 = file2.isFile();</span><br><span class="line">        System.out.println(<span class="string">"b2File对象是否为文件："</span> + b6);<span class="comment">//b2File对象是否为文件：false</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="删除的方法"><a href="#删除的方法" class="headerlink" title="删除的方法"></a>删除的方法</h3><ul><li><code>boolean createNewFile()</code>：如果文件不存在，则创建此文件，同时返回<code>true</code>。如果此文件存在，则不作为，同时返回<code>false</code>。</li><li><code>boolean mkdir()</code>：创建由此File表示的单层目录。创建成功，返回true。创建失败，返回false。 </li><li><code>boolean mkdirs()</code>：创建由此File表示的多层目录。创建成功，返回true。创建失败，返回false。 </li><li><code>boolean delete()</code>：删除由此File表示的文件或目录（目录必须为空）。 删除成功，返回true。删除失败，返回false。 </li></ul><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        <span class="comment">//创建一个硬盘已经存在实体文件的File文件对象</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"D:\\study\\Java\\code"</span>,<span class="string">"a.txt"</span>);</span><br><span class="line">        <span class="comment">//创建一个硬盘上不存在实体文件的File文件对象</span></span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">"D:\\study\\Java\\code"</span>,<span class="string">"b.txt"</span>);</span><br><span class="line">        <span class="comment">//创建一个单层目录File对象</span></span><br><span class="line">        File file2 = <span class="keyword">new</span> File(<span class="string">"D:\\study\\Java\\code"</span>,<span class="string">"Human"</span>);</span><br><span class="line">        <span class="comment">//创建一个多层目录File对象</span></span><br><span class="line">        File file3 = <span class="keyword">new</span> File(<span class="string">"D:\\study\\Java\\code"</span>,<span class="string">"Animal\\Cat\\OrangeCat"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果文件不存在，则创建此文件，同时返回true。如果此文件存在，则不作为，同时返回false。</span></span><br><span class="line">        System.out.println(file.createNewFile() ? <span class="string">"a.txt文件创建成功"</span> : <span class="string">"a.txt文件创建失败"</span>);<span class="comment">//a.txt文件创建失败</span></span><br><span class="line">        System.out.println(file1.createNewFile() ? <span class="string">"b.txt文件创建成功"</span> : <span class="string">"b.txt文件创建失败"</span>);<span class="comment">//b.txt文件创建成功</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建由此File表示的单层目录。创建成功，返回true。创建失败，返回false。</span></span><br><span class="line">        System.out.println(file2.mkdir() ? <span class="string">"单层目录Human创建成功"</span> : <span class="string">"单层Human创建失败"</span>);<span class="comment">//单层目录Human创建成功</span></span><br><span class="line">        System.out.println(file3.mkdir() ? <span class="string">"多层目录Animal\\Cat\\OrangeCat创建成功"</span> : <span class="string">"多层目录Animal\\Cat\\OrangeCat创建失败"</span>);<span class="comment">//多层目录Animal\Cat\OrangeCat创建失败，因为mkdir()只能创建单层目录</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建由此File表示的多层目录。创建成功，返回true。创建失败，返回false。</span></span><br><span class="line">        System.out.println(file3.mkdirs() ? <span class="string">"多层目录Animal\\Cat\\OrangeCat成功"</span> : <span class="string">"多层目录Animal\\Cat\\OrangeCat失败"</span>);<span class="comment">//多层目录Animal\Cat\OrangeCat成功</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除由此File表示的文件或目录（目录必须为空）。 创建成功，返回true。创建失败，返回false。</span></span><br><span class="line">        System.out.println(file1.delete() ? <span class="string">"b.txt文件删除成功"</span> : <span class="string">"b.txt文件删除失败"</span>);<span class="comment">//b.txt文件删除成功</span></span><br><span class="line">        System.out.println(file2.delete() ? <span class="string">"单层目录Human删除成功"</span> : <span class="string">"单层Human删除失败"</span>);<span class="comment">//单层目录Human删除成功</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> File(<span class="string">"Animal"</span>).delete() ? <span class="string">"多层目录Animal删除成功"</span> : <span class="string">"多层目录Animal删除失败"</span>);<span class="comment">//多层目录Animal删除失败,因为Animal目录下面不为空，还有其他目录</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="遍历的方法"><a href="#遍历的方法" class="headerlink" title="遍历的方法"></a>遍历的方法</h3><ul><li><code>String[] list()</code>：返回一个String数组，表示该File目录中的所有子文件或目录。</li><li><code>File[] listFiles()</code>：返回一个File数组，表示该File目录中的所有的子文件或目录。  </li></ul><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">"D:\\study\\Java\\doc\\黑马Java\\02-Java语言进阶\\day01_Object类、常用API"</span>);</span><br><span class="line"></span><br><span class="line">        String[] filesString = file1.list();</span><br><span class="line">        <span class="keyword">for</span> (String file: filesString) {</span><br><span class="line">            System.out.println(file);</span><br><span class="line">            <span class="comment">//code</span></span><br><span class="line">            <span class="comment">//day01【Object类、常用API】-笔记.md</span></span><br><span class="line">            <span class="comment">//resource</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        File[] filesList = file1.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (File file: filesList){</span><br><span class="line">            System.out.println(file);</span><br><span class="line">            <span class="comment">//D:\study\Java\doc\黑马Java\02-Java语言进阶\day01_Object类、常用API\code</span></span><br><span class="line">            <span class="comment">//D:\study\Java\doc\黑马Java\02-Java语言进阶\day01_Object类、常用API\day01【Object类、常用API】-笔记.md</span></span><br><span class="line">            <span class="comment">//D:\study\Java\doc\黑马Java\02-Java语言进阶\day01_Object类、常用API\resource</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
            <tag> IO流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lambda表达式</title>
      <link href="2020/10/20/56_Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>2020/10/20/56_Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>相对而言，面向对象过分强调“必须通过对象的形式来做事情”，而函数式思想则尽量忽略面向对象的复杂语法——<strong>强调做什么，而不是以什么形式做</strong>。</p><ul><li><p><strong>面向对象的思想:</strong></p><p>做一件事情,找一个能解决这个事情的对象,调用对象的方法,完成事情.</p></li><li><p><strong>函数式编程思想:</strong></p><p>只要能获取到结果,谁去做的,怎么做的都不重要,重视的是结果,不重视过程</p></li></ul><h2 id="使用前提"><a href="#使用前提" class="headerlink" title="使用前提"></a>使用前提</h2><p><code>Lambda</code>作为<code>JDK 8</code>的新特性，可以大大简化代码。但是过于简化的代码语法，往往容易造成代码歧义的问题。为了避免这个问题的产生，<code>SUN</code>公司为<code>Lambda</code>表示式的使用做出了使用约束。有以下几点：</p><ol><li><p><code>Lambda</code>表达式只能用于接口。</p></li><li><p>使用<code>Lambda</code>表达式的接口，被要求有且仅有一个需要实现的方法。</p><ul><li>被 default 修饰的方法会有默认实现，不是必须被实现的方法，所以不影响 Lambda 表达式的使用。</li></ul></li><li><p>使用Lambda必须具有<strong>上下文推断</strong></p><p>也就是方法的参数或局部变量类型必须为Lambda对应的接口类型，才能使用Lambda作为该接口的实例。</p></li></ol><blockquote><p>有且仅有一个抽象（需要实现的）方法的接口，称为“<strong>函数式接口</strong>”。</p></blockquote><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><h3 id="标准格式"><a href="#标准格式" class="headerlink" title="标准格式"></a>标准格式</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(参数类型 参数名称) -&gt; {代码语句};</span><br></pre></td></tr></tbody></table></figure><h3 id="格式说明"><a href="#格式说明" class="headerlink" title="格式说明"></a>格式说明</h3><ul><li><code>() </code>用来描述参数列、<code>{} </code>用来描述方法体、<code>-&gt; </code>为 lambda运算符 ，读作(goes to)。</li><li>除了上面的三部分，其他的都可以省略。即<code>new 接口()</code>和<code>重写方法的声明</code>都可以省略。</li></ul><h3 id="进一步省略格式"><a href="#进一步省略格式" class="headerlink" title="进一步省略格式"></a>进一步省略格式</h3><p>除了上述的基本Lambda标准格式的基础上，还可以进一步简化代码，规则如下：</p><ol><li>小括号内参数的类型可以省略；</li><li>如果小括号内<strong>有且仅有一个参</strong>，则小括号可以省略；</li><li>如果大括号内<strong>有且仅有一个语句</strong>，则无论是否有返回值，都可以省略大括号、return关键字及语句分号（必须同时省略）。</li></ol><blockquote><p>由于<code>Lambda</code>表达式较为复杂，想要完全掌握需要结合实际代码，多加练习，我会在下面的代码中逐一演示，供大家参考。</p></blockquote><h3 id="无参无返回"><a href="#无参无返回" class="headerlink" title="无参无返回"></a>无参无返回</h3><p><strong>定义接口</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//具有无参无返回值方法的接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">NoParamNoReturn</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>创建接口实现类对象</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用普通的内部类，创建接口实现类对象，并调用接口中的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        NoParamNoReturn npnr = <span class="keyword">new</span> NoParamNoReturn() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>{</span><br><span class="line">                System.out.println(Thread.currentThread().getName());</span><br><span class="line">            }</span><br><span class="line">        };</span><br><span class="line">        npnr.method();<span class="comment">//main</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用Lambda表达式，创建接口实现类对象，并调用接口中的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//除去了内部类的类名和方法名</span></span><br><span class="line">        NoParamNoReturn npnr = () -&gt; {</span><br><span class="line">            System.out.println(Thread.currentThread().getName());</span><br><span class="line">        };</span><br><span class="line">        npnr.method();<span class="comment">//main</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//在Lambda表达式的基础上，使用省略式，进一步简化</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//在Lambda表达式基础上，进一步简化：</span></span><br><span class="line">        <span class="comment">// 去掉了{}、返回值、分号（有且仅有一个语句）.</span></span><br><span class="line">        <span class="comment">//省略了参数类型</span></span><br><span class="line">        NoParamNoReturn npnr = () -&gt; System.out.println(Thread.currentThread().getName());</span><br><span class="line">        npnr.method();<span class="comment">//main</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="一个参数无返回"><a href="#一个参数无返回" class="headerlink" title="一个参数无返回"></a>一个参数无返回</h3><p><strong>定义接口</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一个参无返回值</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">NoeParamNoReturn</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(String s)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>创建接口实现类对象</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用普通的内部类，创建接口实现类对象，并调用接口中的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        NoeParamNoReturn npnr = <span class="keyword">new</span> NoeParamNoReturn() {</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(String s)</span> </span>{</span><br><span class="line">              System.out.println(s);</span><br><span class="line">          }</span><br><span class="line">        };</span><br><span class="line">        npnr.method(<span class="string">"Jason"</span>);<span class="comment">//Jason</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用Lambda表达式，创建接口实现类对象，并调用接口中的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//除去了内部类的类名和方法名</span></span><br><span class="line">        NoeParamNoReturn npnr = (String s) -&gt; {</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        };</span><br><span class="line">        npnr.method(<span class="string">"Jason"</span>);<span class="comment">//Jason</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//在Lambda表达式的基础上，使用省略式，进一步简化</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//在Lambda表达式基础上，进一步简化：</span></span><br><span class="line">        <span class="comment">// 去掉了{}、返回值、分号（有且仅有一个语句）.</span></span><br><span class="line">        <span class="comment">//省略了参数小括号和参数类型</span></span><br><span class="line">        NoeParamNoReturn npnr = s -&gt; System.out.println(s);</span><br><span class="line">        npnr.method(<span class="string">"Jason"</span>);<span class="comment">//Jason</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="多参数无返回"><a href="#多参数无返回" class="headerlink" title="多参数无返回"></a>多参数无返回</h3><p><strong>定义接口</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//具有多参数无返回值方法的接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MultiParamNoReturn</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(String name, <span class="keyword">int</span> age)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>创建接口实现类对象</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用普通的内部类，创建接口实现类对象，并调用接口中的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        MultiParamNoReturn mpnr = <span class="keyword">new</span> MultiParamNoReturn() {</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>{</span><br><span class="line">              System.out.println(name + <span class="string">" : "</span> + age);</span><br><span class="line">          }</span><br><span class="line">        };</span><br><span class="line">        mpnr.method(<span class="string">"Jason"</span>,<span class="number">21</span>);<span class="comment">//Jason : 21</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用Lambda表达式简化创建接口实现类对象的代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//除去了内部类的类名和方法名</span></span><br><span class="line">        MultiParamNoReturn mpnr = (String name, <span class="keyword">int</span> age) -&gt; {</span><br><span class="line">            System.out.println(name + <span class="string">" : "</span> + age);</span><br><span class="line">        };</span><br><span class="line">        mpnr.method(<span class="string">"Jason"</span>, <span class="number">21</span>);<span class="comment">//Jason : 21</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//在Lambda表达式的基础上，使用省略式，进一步简化</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//在Lambda表达式基础上，进一步简化：</span></span><br><span class="line">        <span class="comment">// 去掉了{}、返回值、分号（有且仅有一个语句）.</span></span><br><span class="line">        <span class="comment">//省略了参数类型</span></span><br><span class="line">        MultiParamNoReturn mpnr = (name, age) -&gt; System.out.println(name + <span class="string">" : "</span> + age);</span><br><span class="line">        mpnr.method(<span class="string">"Jason"</span>,<span class="number">21</span>);<span class="comment">//Jason : 21</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="无参有返回"><a href="#无参有返回" class="headerlink" title="无参有返回"></a>无参有返回</h3><p><strong>定义接口</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//具有无参有返回值方法的接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">NoParamHaveReturn</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>创建接口实现类对象</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用普通的内部类，创建接口实现类对象，并调用接口中的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{ </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        NoParamHaveReturn nphr = <span class="keyword">new</span> NoParamHaveReturn() {</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">method</span><span class="params">()</span> </span>{</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">          }  </span><br><span class="line">        };</span><br><span class="line">        <span class="keyword">boolean</span> b = nphr.method();</span><br><span class="line">        System.out.println(b);<span class="comment">//true</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用Lambda表达式简化创建接口实现类对象的代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//除去了内部类的类名和方法名</span></span><br><span class="line">        NoParamHaveReturn nphr = () -&gt; {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        };</span><br><span class="line">        <span class="keyword">boolean</span> b = nphr.method();</span><br><span class="line">        System.out.println(b);<span class="comment">//true</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//在Lambda表达式的基础上，使用省略式，进一步简化</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//在Lambda表达式基础上，进一步简化：</span></span><br><span class="line">        <span class="comment">// 去掉了{}、返回值、分号（有且仅有一个语句）.</span></span><br><span class="line">        <span class="comment">//省略了参数类型</span></span><br><span class="line">        NoParamHaveReturn nphr = () -&gt; <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">boolean</span> b = nphr.method();</span><br><span class="line">        System.out.println(b);<span class="comment">//true</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="一个参数有返回"><a href="#一个参数有返回" class="headerlink" title="一个参数有返回"></a>一个参数有返回</h3><p><strong>定义接口</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//具有一个参有返回值方法的接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">NoeParamHaveReturn</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">method</span><span class="params">(<span class="keyword">boolean</span> b)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>创建接口实现类对象</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用普通的内部类，创建接口实现类对象，并调用接口中的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        NoeParamHaveReturn nphr = <span class="keyword">new</span> NoeParamHaveReturn() {</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">method</span><span class="params">(<span class="keyword">boolean</span> b)</span> </span>{</span><br><span class="line">              <span class="keyword">return</span> b;</span><br><span class="line">          }</span><br><span class="line">        };</span><br><span class="line">        <span class="keyword">boolean</span> b = nphr.method(<span class="keyword">true</span>);</span><br><span class="line">        System.out.println(b);<span class="comment">//true</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用Lambda表达式简化创建接口实现类对象的代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//除去了内部类的类名和方法名</span></span><br><span class="line">        NoeParamHaveReturn nphr = (<span class="keyword">boolean</span> b) -&gt; {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        };</span><br><span class="line">        <span class="keyword">boolean</span> b = nphr.method(<span class="keyword">true</span>);</span><br><span class="line">        System.out.println(b);<span class="comment">//true</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//在Lambda表达式的基础上，使用省略式，进一步简化</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//在Lambda表达式基础上，进一步简化：</span></span><br><span class="line">        <span class="comment">// 去掉了{}、返回值、分号（有且仅有一个语句）.</span></span><br><span class="line">        <span class="comment">//省略了参数小括号和参数类型</span></span><br><span class="line">        NoeParamHaveReturn nphr = b -&gt; b;</span><br><span class="line">        <span class="keyword">boolean</span> b = nphr.method(<span class="keyword">true</span>);</span><br><span class="line">        System.out.println(b);<span class="comment">//true</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="多个参数有返回"><a href="#多个参数有返回" class="headerlink" title="多个参数有返回"></a>多个参数有返回</h3><p><strong>定义接口</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//具有多个参数有返回值方法的接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MultiParamHaveReturn</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">method</span><span class="params">(<span class="keyword">int</span> one, <span class="keyword">int</span> two)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>创建接口实现类对象</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用普通的内部类，创建接口实现类对象，并调用接口中的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        MultiParamHaveReturn mphr = <span class="keyword">new</span> MultiParamHaveReturn() {</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">method</span><span class="params">(<span class="keyword">int</span> one, <span class="keyword">int</span> two)</span> </span>{</span><br><span class="line">              <span class="keyword">return</span> one == two;</span><br><span class="line">          }</span><br><span class="line">        };</span><br><span class="line">        <span class="keyword">boolean</span> b = mphr.method(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">        System.out.println(b);<span class="comment">//false</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用Lambda表达式简化创建接口实现类对象的代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//除去了内部类的类名和方法名</span></span><br><span class="line">        MultiParamHaveReturn mphr = (<span class="keyword">int</span> one, <span class="keyword">int</span> two) -&gt; {</span><br><span class="line">            <span class="keyword">return</span> one == two;</span><br><span class="line">        };</span><br><span class="line">        <span class="keyword">boolean</span> b = mphr.method(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">        System.out.println(b);<span class="comment">//false</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//在Lambda表达式的基础上，使用省略式，进一步简化</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//在Lambda表达式基础上，进一步简化：</span></span><br><span class="line">        <span class="comment">// 去掉了{}、返回值、分号（有且仅有一个语句）.</span></span><br><span class="line">        <span class="comment">//省略了参数类型</span></span><br><span class="line">        MultiParamHaveReturn mphr = (one, two) -&gt; one == two;</span><br><span class="line">        <span class="keyword">boolean</span> b = mphr.method(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">        System.out.println(b);<span class="comment">//false</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程池</title>
      <link href="2020/10/20/55_%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
      <url>2020/10/20/55_%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>我们使用线程的时候就去创建一个线程，这样实现起来非常简便，但是就会有一个问题：</p><p>如果并发的线程数量很多，并且每个线程都是执行一个时间很短的任务就结束了，因为频繁创建线程和销毁线程需要时间，这样频繁创建线程就会大大降低系统的效率。</p><p>那么有没有一种办法使得线程可以复用，就是执行完一个任务，并不被销毁，而是可以继续执行其他的任务？</p><p>在Java中可以通过线程池来达到这样的效果。今天我们就来详细讲解一下Java的线程池。</p><p><strong>线程池：</strong></p><p>其实就是一个容纳多个线程的容器，其中的线程可以反复使用，省去了频繁创建线程对象的操作，无需反复创建线程而消耗过多资源。</p><p>由于线程池中有很多操作都是与优化资源相关的，我们在这里就不多赘述。我们通过一张图来了解线程池的工作原理：</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201020171602.jpg"></p><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><p>合理利用线程池能够带来三个好处：</p><ol><li>降低资源消耗。减少了创建和销毁线程的次数，每个工作线程都可以被重复利用，可执行多个任务。</li><li>提高响应速度。当任务到达时，任务可以不需要的等到线程创建就能立即执行。</li><li>提高线程的可管理性。可以根据系统的承受能力，调整线程池中工作线线程的数目，防止因为消耗过多的内存，而把服务器累趴下(每个线程需要大约1MB内存，线程开的越多，消耗的内存也就越大，最后死机)。</li></ol><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><blockquote><p>Java里面线程池的顶级接口是<code>java.util.concurrent.Executor</code>，但是严格意义上讲<code>Executor</code>并不是一个线程池，而只是一个执行线程的工具。真正的线程池接口是<code>java.util.concurrent.ExecutorService</code>。</p><p>要配置一个线程池是比较复杂的，尤其是对于线程池的原理不是很清楚的情况下，很有可能配置的线程池不是较优的，因此在<code>java.util.concurrent.Executors</code>线程工厂类里面提供了一些静态工厂，生成一些常用的线程池。官方建议使用Executors工程类来创建线程池对象。</p></blockquote><ul><li><p><code>static ExecutorService newFixedThreadPool(int nThreads</code>)：返回线程池对象。(创建的是有界线程池,也就是池中的线程个数可以指定最大数量)。</p></li><li><p><code>Future&lt;?&gt; submit(Runnable task)</code>：获取线程池中的某一个线程对象，并启动这个线程。参数为一个<code>Runnable</code>接口的实现类对象。</p></li><li><p><code>void shutdown()</code>：关闭调用者线程池（一般不会关闭线程池）。</p></li></ul><p><strong>使用步骤：</strong></p><ol><li>使用<code>Exectors</code>工程类的<code>static ExecutorService newFixedThreadPool(int nThreads)</code>静态方法创建一个指定线程数量的线程池对象。</li><li>创建一个<code>Runnable</code>接口的实现类对象。</li><li>通过线程池对象调用<code>Future&lt;?&gt; submit(Runnable task)</code>方法，方法参数传入前面创建的<code>Runnable</code>接口的实现类对象。依次来获取线程池中的一个线程对象，并同时启动这个线程。</li><li>使用线程池对象调用<code>void shutdown()</code>方法来关闭线程池（但是我们一般不会关闭线程池）。</li></ol><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//第一步：使用static ExecutorService newFixedThreadPool(int nThreads)</span></span><br><span class="line">        <span class="comment">//创建一个包含2个线程的线程池对象</span></span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第二步：创建一个Runnable接口的实现类对象</span></span><br><span class="line">        Runnable mr = <span class="keyword">new</span> Runnable() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">                System.out.println(Thread.currentThread().getName());</span><br><span class="line">            }</span><br><span class="line">        };</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第三步：通过线程池对象调用Future&lt;?&gt; submit(Runnable task)方法，</span></span><br><span class="line">        <span class="comment">// 来获取线程池中的一个对象，并启动这个对象</span></span><br><span class="line">        service.submit(mr);</span><br><span class="line">        service.submit(mr);</span><br><span class="line">        service.submit(mr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第四步：通过线程池对象调用void shutdown();</span></span><br><span class="line">        service.shutdown();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>执行结果</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span></span><br></pre></td></tr></tbody></table></figure><p>从执行结果中我们可以看到：我们虽然启动了三次线程，但是只有两个线程被创建了，而且<code>pool-1-thread-2</code>这个线程被重复使用了两次。说明我们正在使用线程池中的线程。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>等待唤醒机制</title>
      <link href="2020/10/20/54_%E7%AD%89%E5%BE%85%E5%94%A4%E9%86%92%E6%9C%BA%E5%88%B6/"/>
      <url>2020/10/20/54_%E7%AD%89%E5%BE%85%E5%94%A4%E9%86%92%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="等待唤醒机制"><a href="#等待唤醒机制" class="headerlink" title="等待唤醒机制"></a>等待唤醒机制</h1><h2 id="线程间通信"><a href="#线程间通信" class="headerlink" title="线程间通信"></a>线程间通信</h2><p>多个线程在处理同一个资源，但是处理的动作（线程的任务）却不相同，这个时候就需要线程通信了。</p><p>比如：线程A用来生成包子的，线程B用来吃包子的，包子可以理解为同一资源，线程A与线程B处理的动作，一个是生产，一个是消费，那么线程A与线程B之间就存在线程通信问题。</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201020155431.jpg"></p><p><strong>为什么要处理线程间通信：</strong></p><p>多个线程并发执行时, 在默认情况下CPU是随机切换线程的，当我们需要多个线程来共同完成一件任务，并且我们希望他们有规律的执行, 那么多线程之间需要一些协调通信，以此来帮我们达到多线程共同操作一份数据。</p><p><strong>如何保证线程间通信有效利用资源：</strong></p><p>多个线程在处理同一个资源，并且任务不同时，需要线程通信来帮助解决线程之间对同一个变量的使用或操作。 就是多个线程在操作同一份数据时， 避免对同一共享变量的争夺。也就是我们需要通过一定的手段使各个线程能有效的利用资源。而这种手段即—— <strong>等待唤醒机制。</strong></p><h2 id="什么是等待唤醒机制"><a href="#什么是等待唤醒机制" class="headerlink" title="什么是等待唤醒机制"></a><strong>什么是等待唤醒机制</strong></h2><p>这是多个线程间的一种<strong>协作</strong>机制。谈到线程我们经常想到的是线程间的<strong>竞争（race）</strong>，比如去争夺锁，但这并不是故事的全部，线程间也会有协作机制。就好比在公司里你和你的同事们，你们可能存在在晋升时的竞争，但更多时候你们更多是一起合作以完成某些任务。</p><p>就是在一个线程进行了规定操作后，就进入等待状态（**wait()**）， 等待其他线程执行完他们的指定代码过后 再将其唤醒<code>notify()</code>。在有多个线程进行等待时， 如果需要，可以使用<code>notifyAll()</code>来唤醒所有的等待线程。</p><p>简单的来说：<code>wait/notify </code>就是线程间的一种协作机制。</p><h2 id="等待和唤醒的方法"><a href="#等待和唤醒的方法" class="headerlink" title="等待和唤醒的方法"></a>等待和唤醒的方法</h2><ul><li><p><code>wait()</code></p><p>线程不再活动，不再参与调度，进入<code>wait set</code>中，因此不会浪费 CPU 资源，也不会去竞争锁了，这时的线程状态即是 <code>WAITING</code>。它还要等着别的线程执行一个<strong>特别的动作</strong>，也即是“<strong>通知（notify）</strong>”在这个对象上等待的线程从<code>wait set </code>中释放出来，重新进入到调度队列<code>(ready queue)</code>中。</p></li><li><p><code>notify()</code>：选取所通知对象的<code>wait set</code>中的一个线程释放，一般是等待最久的那个线程。</p></li><li><p><code>notify()</code>：释放所通知对象的<code>wait set</code>上的全部线程。</p></li></ul><p><strong>需要注意的是：</strong></p><ol><li>即使你唤醒了一个线程，这个线程也不能立即恢复执行。因为它当初中断的地方是在同步块内，而此刻它已经不持有锁，所以它需要再次尝试去获取锁（很可能面临其它线程的竞争），成功后才能在当初调用<code>wait </code>方法之后的地方恢复执行，即<code>Runnable</code>状态。如果争取锁失败了，就只能进入<code>Blocked</code>阻塞状态，等待下次争取到锁才能进入<code>Runnable</code>可运行状态。</li><li><code>wait()</code>方法和<code>notify()</code>方法必须要由同一个锁对象调用。如果不是一个锁对象调用的，就起不到让线程等待和唤醒的作用了。</li><li><code>wait()</code>方法和<code>notify()</code>是属于<code>Object</code>类的方法的，所以锁对象可以是任意对象。</li><li><code>wait()</code>方法与<code>notify()</code>方法必须要在同步代码块或者是同步函数中使用，因为这两个方法是有锁对象调用的。</li></ol><h2 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h2><p>等待唤醒机制其实就是经典的“生产者与消费者”的问题。</p><p>就拿生产包子、消费包子来说等待唤醒机制如何有效利用资源，下面为<strong>案例思路</strong>：</p><p>包子铺线程生产包子，吃货线程消费包子。当包子没有时（包子状态为false），吃货线程等待，包子铺线程生产包子（即包子状态为true），并通知吃货线程（解除吃货的等待状态）,因为已经有包子了，那么包子铺线程进入等待状态。接下来，吃货线程能否进一步执行则取决于锁的获取情况。如果吃货获取到锁，那么就执行吃包子动作，包子吃完（包子状态为false），并通知包子铺线程（解除包子铺的等待状态）,吃货线程进入等待。包子铺线程能否进一步执行则取决于锁的获取情况（包子铺需要交替作两种陷的包子）。</p><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//包子资源类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaoZi</span> </span>{</span><br><span class="line">    <span class="comment">//属性 皮和陷</span></span><br><span class="line">    String pi;</span><br><span class="line">    String xian;</span><br><span class="line">    <span class="comment">//包子资源状态</span></span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//吃货线程类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChiHuo</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>{</span><br><span class="line">    <span class="comment">//属性 包子类对象</span></span><br><span class="line">    <span class="keyword">private</span> BaoZi bz;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChiHuo</span><span class="params">(String name, BaoZi bz)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.bz = bz;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) {</span><br><span class="line">            <span class="keyword">synchronized</span> (bz) {</span><br><span class="line">                <span class="comment">//如果没有包子，吃货就进入等待</span></span><br><span class="line">                <span class="keyword">if</span> (bz.flag == <span class="keyword">false</span>) {</span><br><span class="line">                    <span class="keyword">try</span> {</span><br><span class="line">                        bz.wait();</span><br><span class="line">                    } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">                <span class="comment">//如果有包子，吃货就开始吃包子</span></span><br><span class="line">                System.out.println(<span class="string">"吃货正在吃："</span> + bz.pi + bz.xian + <span class="string">"的包子"</span>);</span><br><span class="line">                <span class="comment">//让线程睡眠1秒，充作吃包子的时间</span></span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">                <span class="comment">//吃货吃完包子，把包子状态改为false</span></span><br><span class="line">                bz.flag = <span class="keyword">false</span>;</span><br><span class="line">                System.out.println(<span class="string">"好了，吃货把包子吃完了，包子铺开始做包子吧~"</span>);</span><br><span class="line">                System.out.println(<span class="string">"-------------------------------------"</span>);</span><br><span class="line">                <span class="comment">//包子没了，唤醒包子铺线程开始做包子</span></span><br><span class="line">                bz.notify();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//包子铺线程类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaoZiPu</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>{</span><br><span class="line">    <span class="comment">//属性 包子类对象</span></span><br><span class="line">    <span class="keyword">private</span> BaoZi bz;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaoZiPu</span><span class="params">(String name, BaoZi bz)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.bz = bz;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">//包子馅计数器</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//做包子方法</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) {</span><br><span class="line">            <span class="keyword">synchronized</span> (bz) {</span><br><span class="line">                <span class="comment">//如果有包子，包子铺线程就进去等待状态</span></span><br><span class="line">                <span class="keyword">if</span> (bz.flag == <span class="keyword">true</span>) {</span><br><span class="line">                    <span class="keyword">try</span> {</span><br><span class="line">                        bz.wait();</span><br><span class="line">                    } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">                <span class="comment">//如果没有包子，则包子铺开始做包子</span></span><br><span class="line">                System.out.println(<span class="string">"包子铺开始做包子了"</span>);</span><br><span class="line">                <span class="comment">//让线程睡眠1秒，充作作包子的时间</span></span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">                <span class="comment">//两种陷的包子</span></span><br><span class="line">                <span class="keyword">if</span> (count % <span class="number">2</span> == <span class="number">0</span>) {</span><br><span class="line">                    bz.pi = <span class="string">"冰皮"</span>;</span><br><span class="line">                    bz.xian = <span class="string">"五仁"</span>;</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    bz.pi = <span class="string">"薄皮"</span>;</span><br><span class="line">                    bz.xian = <span class="string">"牛肉大葱"</span>;</span><br><span class="line">                }</span><br><span class="line">                count++;</span><br><span class="line">                <span class="comment">//修改包子状态为true，表示包子做好了</span></span><br><span class="line">                bz.flag = <span class="keyword">true</span>;</span><br><span class="line">                System.out.println(<span class="string">"包子造好了："</span> + bz.pi + bz.xian + <span class="string">"， 吃货来吃吧"</span>);</span><br><span class="line">                <span class="comment">//唤醒等待吃货线程来吃包子</span></span><br><span class="line">                bz.notify();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//创建包子类对象</span></span><br><span class="line">        BaoZi bz = <span class="keyword">new</span> BaoZi();</span><br><span class="line">        <span class="comment">//创建吃货线程,并启动线程</span></span><br><span class="line">        <span class="keyword">new</span> ChiHuo(<span class="string">"吃货"</span>,bz).start();</span><br><span class="line">        <span class="comment">//创建包子铺线程,并启动线程</span></span><br><span class="line">        <span class="keyword">new</span> BaoZiPu(<span class="string">"包子铺"</span>,bz).start();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>执行结果</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">包子铺开始做包子了</span><br><span class="line">包子造好了：冰皮五仁， 吃货来吃吧</span><br><span class="line">吃货正在吃：冰皮五仁的包子</span><br><span class="line">好了，吃货把包子吃完了，包子铺开始做包子吧~</span><br><span class="line">-------------------------------------</span><br><span class="line">包子铺开始做包子了</span><br><span class="line">包子造好了：薄皮牛肉大葱， 吃货来吃吧</span><br><span class="line">吃货正在吃：薄皮牛肉大葱的包子</span><br><span class="line">好了，吃货把包子吃完了，包子铺开始做包子吧~</span><br><span class="line">-------------------------------------</span><br><span class="line">包子铺开始做包子了</span><br><span class="line">包子造好了：冰皮五仁， 吃货来吃吧</span><br><span class="line">吃货正在吃：冰皮五仁的包子</span><br><span class="line">好了，吃货把包子吃完了，包子铺开始做包子吧~</span><br><span class="line">-------------------------------------</span><br><span class="line">包子铺开始做包子了</span><br><span class="line">包子造好了：薄皮牛肉大葱， 吃货来吃吧</span><br><span class="line">吃货正在吃：薄皮牛肉大葱的包子</span><br><span class="line">好了，吃货把包子吃完了，包子铺开始做包子吧~</span><br><span class="line">-------------------------------------</span><br><span class="line">    ......</span><br><span class="line">    ......</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程状态</title>
      <link href="2020/10/20/53_%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81/"/>
      <url>2020/10/20/53_%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81/</url>
      
        <content type="html"><![CDATA[<h1 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>当线程被创建并启动以后，它既不是一启动就进入了执行状态，也不是一直处于执行状态。在API中 <code>java.lang.Thread.State </code>这个枚举中给出了六种线程状态：</p><table><thead><tr><th align="center">线程状态</th><th align="center">具体解释</th></tr></thead><tbody><tr><td align="center">New（新建）</td><td align="center">线程刚被创建，还未调用<code>start()</code>方法来启动线程。</td></tr><tr><td align="center">Runnable（可运行）</td><td align="center">线程已经准备好在<code>JVM</code>中可以运行的状态。此时如果线程抢到锁对象，就可以运行；如果抢不到锁对象，就要变成阻塞状态。</td></tr><tr><td align="center">Blocked（锁阻塞）</td><td align="center">当一个线程试图获取一个对象锁，而该对象锁被其他的线程持有，则该线程进入Blocked状 态；当该线程抢到锁时，该线程将变成Runnable状态。</td></tr><tr><td align="center">Waiting（无限等待）</td><td align="center">一个线程在等待另一个线程执行一个（唤醒）动作时，该线程进入Waiting状态。进入此状态后是不能自动唤醒的，必须等待另一个线程调用notify或者notifyAll方法才能够唤醒</td></tr><tr><td align="center">Timed Waiting（计时等待）</td><td align="center">同waiting状态，有几个方法有超时参数，调用他们将进入Timed Waiting状态。这一状态 将一直保持到超时期满或者接收到唤醒通知。带有超时参数的常用方法有Thread.sleep 、 Object.wait。</td></tr><tr><td align="center">Teminated（被终止）</td><td align="center">因为run方法正常退出而死亡，或者因为没有被捕获的异常终止了run方法而死亡。</td></tr></tbody></table><h2 id="Timed-Waiting（计时等待）"><a href="#Timed-Waiting（计时等待）" class="headerlink" title="Timed Waiting（计时等待）"></a>Timed Waiting（计时等待）</h2><p>一个正在限时等待另一个线程执行一个（唤醒）动作的线程，就是处于<code>Timed Waiting（计时等待）</code>状态。</p><p>其实当我们调用了sleep方法之后，当前执行的线程就进入到“休眠状态”，其实就是所谓的Timed Waiting(计时等待)，那么我们通过一个案例加深对该状态的一个理解。</p><p><strong>案例演示</strong></p><p>要求：实现一个计数器，计数到100，在每个数字之间暂停1秒，每隔10个数字输出一个字符串</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义线程类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++){</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">10</span> == <span class="number">0</span>){</span><br><span class="line">                System.out.println(<span class="string">"-----"</span> + i);</span><br><span class="line">            }</span><br><span class="line">            System.out.println(i);</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                System.out.println(<span class="string">"我睡着了~"</span>);</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">new</span> MyThread().start();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>通过案例可以发现，sleep方法的使用还是很简单的。我们需要记住下面几点：</p><ol><li> 进入 TIMED_WAITING 状态的一种常见情形是调用的<code> sleep</code> 方法，单独的线程也可以调用，不一定非要有协 作关系。</li><li>为了让其他线程有机会执行，可以将<code>Thread.sleep()</code>的调用放线程<code>run()</code>之内。这样才能保证该线程执行过程 中会睡眠。</li><li><code>sleep</code>与锁无关，线程睡眠到期自动苏醒，并返回到<code>Runnable</code>（可运行）状态。</li></ol><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201020145747.png"></p><h2 id="Blocked（锁阻塞）"><a href="#Blocked（锁阻塞）" class="headerlink" title="Blocked（锁阻塞）"></a>Blocked（锁阻塞）</h2><p>一个正在阻塞等待一个监视器锁（锁对象）的线程处于这一状态。</p><p>我们已经学完同步机制，那么这个状态是非常好理解的了。比如，线程A与线程B代码中使用同一锁，如果线程A获取到锁，线程A进入到<code>Runnable</code>状态，那么线程B就进入到<code>Blocked</code>锁阻塞状态。</p><p>这是由<code>Runnable</code>状态进入<code>Blocked</code>状态。除此<code>Waiting</code>以及<code>Time Waiting</code>状态也会在某种情况下进入阻塞状态，而这部分内容作为扩充知识点带领大家了解一下。</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201020153251.png"></p><h2 id="Waiting（无限等待）"><a href="#Waiting（无限等待）" class="headerlink" title="Waiting（无限等待）"></a>Waiting（无限等待）</h2><p>一个正在无限期等待另一个线程执行一个特别的（唤醒）动作的线程处于这一状态。</p><p>我们通过下面这段代码来学习一下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="comment">//创建锁对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object obj = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//演示waiting</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable(){</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) {</span><br><span class="line">                    <span class="keyword">synchronized</span> (obj) {</span><br><span class="line">                        <span class="keyword">try</span> {</span><br><span class="line">                            System.out.println(Thread.currentThread().getName() +</span><br><span class="line">                                    <span class="string">"===获取到锁对象，调用wait方法，进入waiting状态，释放锁对象"</span>);</span><br><span class="line">                            obj.wait();<span class="comment">//无限等待</span></span><br><span class="line">                        } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        }</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() +</span><br><span class="line">                                <span class="string">"==== 从waiting状态醒来，获取到锁对象，继续执行了"</span>);</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        },<span class="string">"等待线程"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable(){</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) {</span><br><span class="line">                    <span class="keyword">try</span> {</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() +</span><br><span class="line">                                <span class="string">"--------等待三秒线程"</span>);</span><br><span class="line">                        <span class="comment">//让线程睡三秒</span></span><br><span class="line">                        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                    } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">synchronized</span> (obj) {</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() +</span><br><span class="line">                                <span class="string">"‐‐‐‐‐ 获取到锁对象,调用notify方法，释放锁对象"</span>);</span><br><span class="line">                        obj.notify();</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        },<span class="string">"唤醒线程"</span>).start();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>通过上述案例我们会发现，一个调用了某个对象的<code>Object.wait</code>方法的线程会等待另一个线程调用此对象的 <code>Object.notify()</code>方法 或 <code>Object.notifyAll()</code>方法。 其实<code>waiting</code>状态并不是一个线程的操作，它体现的是多个线程间的通信，可以理解为多个线程之间的协作关系， 多个线程会争取锁，同时相互之间又存在协作关系。就好比在公司里你和你的同事们，你们可能存在晋升时的竞 争，但更多时候你们更多是一起合作以完成某些任务。 当多个线程协作时，比如A，B线程，如果A线程在<code>Runnable（可运行）</code>状态中调用了<code>wait()</code>方法那么A线程就进入了<code>Waiting（无限等待）</code>状态，同时失去了同步锁。假如这个时候B线程获取到了同步锁，在运行状态中调用了<code> notify()</code>方法，那么就会将无限等待的A线程唤醒。注意是唤醒，如果获取到锁对象，那么A线程唤醒后就进入<code> Runnable（可运行）</code>状态；如果没有获取锁对象，那么就进入到<code>Blocked（锁阻塞状态）</code>。</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201020153351.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201020154000.png"></p><blockquote><ol><li><code>wait()</code>和<code>notify()</code>、<code>notifyAll()</code>由于涉及对象锁的争夺，只能使用在对象锁包括的代码块中。</li><li><code>sleep()</code>不涉及对象锁的问题，所以可以直接在任意地方使用。</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程同步</title>
      <link href="2020/10/19/52_%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/"/>
      <url>2020/10/19/52_%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>线程安全问题都是由全局变量即静态变量引起的。若每个线程中全局变量、静态变量只有读操作，而无写操作。一般来说，这个全局变量是线程安全的；若有多个线程同时执行写操作，一般都需要考虑线程同步，否则的话可能影响线程安全。</p><p>要解决【多线程】引起的【线程同步】问题，<code>Java</code>中提供了<strong>【同步机制<code>synchronized</code>】</strong>来解决。</p><p>而同步机制有三种操作方式：</p><ol><li><strong>同步代码块</strong></li><li><strong>同步方法</strong></li><li><strong>锁机制</strong></li></ol><h2 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h2><p>在同步代码块中<code>synchronized</code>关键字可以用于方法中的某个区块中，表示只对这个区块的资源施行互斥访问。</p><p><strong>格式</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(同步锁) {</span><br><span class="line">    需要同步操作的代码;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>对象的同步锁只是一个概念，可以想象为在对象上标记了一个锁。需要注意的是：</p><ol><li>锁对象可以是任意类型。</li><li>多个线程对象要使用同一把锁。</li></ol></blockquote><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line">    <span class="comment">//定义共享的成员变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sum = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建锁对象</span></span><br><span class="line">    Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">//同步锁</span></span><br><span class="line">        <span class="keyword">synchronized</span> (lock) {</span><br><span class="line">            System.out.println(sum--);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h2><p>使用<code>synchronized</code>修饰的方法，被称为同步方法。保证A线程执行该方法的时候，其他线程只能在方法外等着。</p><p><strong>格式</strong> </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="keyword">synchronized</span> 返回值类型 方法名(参数列表) {</span><br><span class="line">    可能会产生线程安全问题的代码;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>同步方法中的同步锁是谁？</p><ol><li>对于非静态方法，同步锁就是<code>this</code>。</li><li>对于静态方法，同步锁就是我们当前使用的方法所在类的字节码对象。</li></ol></blockquote><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line">    <span class="comment">//定义共享的成员变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sum = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(sum--);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        print();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="同步锁"><a href="#同步锁" class="headerlink" title="同步锁"></a>同步锁</h2><p><code>java.util.concurrent.locks.Lock</code>机制提供了比<code>synchronized</code>代码块和<code>synchronized</code>方法更广泛的锁定操作——<code>Lock</code>。简单点说，同步代码块、同步方法有的功能<code>Lock</code>都有，它们没有的功能<code>Lock</code>还有。</p><p><code>Lock</code>锁也称同步锁，把加锁与释放锁方法化了。</p><p>步骤如下：</p><ol><li><p>使用<code>Lock</code>接口的实现类<code>ReentrantLock</code>的无参构造器，创建一个锁对象。</p></li><li><p>调用<code>void lock()</code>，加上同步锁。</p></li><li><p>编写可能会出现线程安全的代码。</p></li><li><p>调用<code>void unlock()</code>，释放同步锁。</p></li></ol><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line">    <span class="comment">//定义共享的成员变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sum = <span class="number">100</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取Lock对象</span></span><br><span class="line">    Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">//使用lock()方法，上锁</span></span><br><span class="line">        lock.lock();</span><br><span class="line">        System.out.println(sum--);</span><br><span class="line">        <span class="comment">//使用unlock()方法，解锁</span></span><br><span class="line">        lock.unlock();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Thread类</title>
      <link href="2020/10/19/51_Thread%E7%B1%BB/"/>
      <url>2020/10/19/51_Thread%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="Thread类"><a href="#Thread类" class="headerlink" title="Thread类"></a>Thread类</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Thread类用于操作线程，是所以涉及到线程操作(如并发)的基础。</p><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><ul><li><code>Thread()</code>：分配一个新的线程对象。</li><li><code>Thread(String name)</code>：分配一个指定名字的新线程对象。</li><li><code>Thread(Runnable target)</code>：分配一个带有指定目标的新线程对象。</li><li><code>Thread(Runnable target, String name)</code>：分配一个带有指定目标的新线程对象，并为其指定名字。</li></ul><p><strong>代码演示</strong></p><blockquote><p>需要演示的代码实在过长，还请私下自行练习吧~</p></blockquote><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><ul><li><code>String getName()</code>：获取当前线程的名称。</li><li><code>void setName()</code>：设置当前线程的名称。</li><li><code>void start()</code>：：启动线程，同时<code>Java</code>虚拟机开始调用此线程的<code>run()</code>方法。</li><li><code>void run()</code>：在此编写此线程将要执行的代码语句。</li><li><code>static void sleep(long millis)</code>：使当前线程以指定的毫秒数暂停。</li><li><code>static Thread currentThread()</code>：获取当前正在执行的线程对象的引用。</li></ul><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">// void run()：在此编写此线程将要执行的代码语句。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) {</span><br><span class="line">            <span class="comment">//String getName()：获取当前线程的名称。</span></span><br><span class="line">            System.out.println(getName() + <span class="string">"-------&gt;"</span> + i);</span><br><span class="line">            <span class="comment">//static void sleep(long millis)：使当前线程以指定的毫秒数暂停。</span></span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//创建线程对象</span></span><br><span class="line">        MyThread mt = <span class="keyword">new</span> MyThread();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//void setName()：设置当前线程的名称。</span></span><br><span class="line">        mt.setName(<span class="string">"myThread"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public void start()：启动线程，同时`Java`虚拟机开始调用此线程的`run()`方法</span></span><br><span class="line">        mt.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//主线程中的for循环</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) {</span><br><span class="line">            <span class="comment">//public static Thread currentThread()：获取当前正在执行的线程对象的引用</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"--------&gt;"</span> + i);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建线程的两种方法</title>
      <link href="2020/10/19/50_%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
      <url>2020/10/19/50_%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="创建线程的两种方法"><a href="#创建线程的两种方法" class="headerlink" title="创建线程的两种方法"></a>创建线程的两种方法</h1><h2 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h2><p>继承<code>java.lang.Thread</code>线程类，并重写它的<code>run()</code>方法。</p><p>步骤如下：</p><ol><li>创建一个<code>Thread</code>类的子类。</li><li>在<code>Thread</code>类的子类中重写<code>Thread</code>类中的<code>run()</code>方法，在<code>run()</code>里面编写线程代码。</li><li>创建<code>Thread</code>类的子类对象。</li><li>调用<code>Thread</code>类的中的<code>start()</code>方法启动一个新线程，同时<code>JVM</code>虚拟机会调用该线程的<code>run()</code>方法。</li></ol><blockquote><p>多次启动一个线程是非法的，特别是当前线程已经结束执行后，不能重新启动。</p></blockquote><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一步：继承Thread类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>{</span><br><span class="line">    <span class="comment">//第二步：重写run()方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2000</span>; i++) {</span><br><span class="line">            System.out.println(getName() + <span class="string">": "</span> + i);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//第三步：创建Thread子类对象</span></span><br><span class="line">        Person man = <span class="keyword">new</span> Person();</span><br><span class="line">        <span class="comment">//第四步：通过Thread子类对象调用start()方法，来启动新线程</span></span><br><span class="line">        man.start();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h2><p>实现<code>java.lang.Runnable</code>接口，并重写它的<code>run()</code>方法。</p><p>步骤如下：</p><ol><li>定义<code>Runnable</code>接口的实现类。</li><li>重写它的<code>run()</code>方法，在<code>run()</code>方法里面编写线程代码。</li><li>创建<code>Runnable</code>接口实现类的对象，</li><li>将【<code>Runnable</code>接口字类对象】传入<code>Thread</code>类的另两个构造方法——<code>Thread(Runnable target)</code>或者<code>Thread(Runnable target, String name)</code>，以此来创建<code>Thread</code>对象。</li><li>通过已创建的<code>Thread</code>对象调用<code>start()</code>方法来启动新线程。</li></ol><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一步：实现Runnable接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line">    <span class="comment">//第二步：重写run()方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) {</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"----------&gt;"</span> + i);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//第三步：创建Runnable接口子类对象</span></span><br><span class="line">        MyRunnable mr = <span class="keyword">new</span> MyRunnable();</span><br><span class="line">        <span class="comment">//第四步：将【Runnable接口子类对象】传入Thread类的构造方法，依次来创建Thread对象</span></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(mr, <span class="string">"JasonThread"</span>);</span><br><span class="line">        <span class="comment">//第五步：通过Thread类对象调用start()方法启动新线程</span></span><br><span class="line">        thread.start();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p><strong>使用匿名内部类的方式创建线程</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable(){</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>{</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++){</span><br><span class="line">                   System.out.println(Thread.currentThread().getName() + <span class="string">"------&gt;"</span> + i);</span><br><span class="line">               }</span><br><span class="line">           }</span><br><span class="line">        }).start();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>实现<code>Runnable</code>接口 比 继承<code>Thread</code>类 具有的优势：</p><ol><li>适合多个相同的程序代码的线程去共享同一个资源。</li><li>可以避免<code>Java</code>中单继承的局限性。</li><li>增加程序的健壮性，实现解耦操作。代码可以被多个线程共享，代码和线程独立。</li><li>实现<code>Runnable</code>接口和<code>Callable</code>类的线程，可以被放入【线程池】。而继承<code>Thread</code>类的线程不能直接放入。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异常</title>
      <link href="2020/10/19/49_%E5%BC%82%E5%B8%B8/"/>
      <url>2020/10/19/49_%E5%BC%82%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>异常，指的是程序在执行过程中，出现的非正常的情况，最终导致<code>JVM</code>的非正常停止。</p><p>在<code>Java</code>等面向对象的编程语言中，异常本身是一个类，产生异常就是创建异常对象并抛出一个异常对象。<code>Java</code>处理异常的方式是中断处理。</p><blockquote><p>异常指的并不是语法错误，如果语法错了，在编译阶段就不会通过。</p></blockquote><h2 id="异常体系"><a href="#异常体系" class="headerlink" title="异常体系"></a>异常体系</h2><p>异常机制其实是帮助我们找到程序中的问题。异常的根类是<code>java.lang.Throwable</code>，其下有两个子类：</p><ol><li><code>java.lang.Error</code>，严重错误<code>Error</code>，是无法处理的错误。只能事先避免，好比绝症。</li><li><code>java.lang.Exception</code>，表示异常，异常产生后程序员可以通过代码的方式纠正，是程序继续运行。也就是我们平时所说的异常。</li></ol><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201019173824.png"></p><h2 id="异常分类"><a href="#异常分类" class="headerlink" title="异常分类"></a>异常分类</h2><p>异常可以根据处于不同时期分为：</p><ul><li><p><strong>编译时期异常</strong>：checked异常。在编译时期，就会检查。如果没有处理异常，则编译失败。对于编译时异常，Java要求我们强制处理这个异常，要么<code>try...catch</code>，要么<code>throws</code>。</p></li><li><p><strong>运行时期异常</strong>：runtime异常。在运行时期，检查异常。在编译时期，运行异常是不会被编译器检查报错的。如数学异常。</p><p>对于运行时异常，我们就可以不去处理。</p></li></ul><h2 id="异常方法"><a href="#异常方法" class="headerlink" title="异常方法"></a>异常方法</h2><ul><li><code>void printStackTrace()</code>：在控制台打印异常的详细信息。包含了异常的类型，异常的原因，还包含异常出现的位置。在开发和调试阶段，都得使用<code>printStackTrace</code>。</li><li><code>String getMessage()</code>：获取发生异常的原因。提示给用户的时候，就提示错误原因。</li><li><code>String toString()</code>：获取异常的类型和异常描述信息，在日常开发中几乎不使用。</li></ul><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>在处理Java异常中我们常常会遇到这四个关键字：<code>try...catch</code>、<code>finally</code>、<code>throw</code>、<code>throws</code>。</p><p>下面我们逐个讲解这五个关键字。</p><h3 id="throw——抛出异常"><a href="#throw——抛出异常" class="headerlink" title="throw——抛出异常"></a>throw——抛出异常</h3><ul><li><p>作用：<code>throw</code>用在方法内，用来抛出一个异常对象，将这个异常对象传递到调用者处，并结束当前方法的执行。</p></li><li><p>格式：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//throw new 异常类名(参数)</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"要访问的arr数组不存在"</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundException(<span class="string">"该索引在数组中不存在，已超出范围"</span>);</span><br></pre></td></tr></tbody></table></figure></li></ul><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="comment">//定义一个 根据索引找到数组中元素 的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getElement</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> index)</span> </span>{</span><br><span class="line">        <span class="comment">//如果索引越界,就执行throw语句</span></span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; arr.length-<span class="number">1</span>) {</span><br><span class="line"><span class="comment">//这是一个运行时异常，我们可以不用去处理</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">"大哥！索引越界了啊！"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> arr[index];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//创建一个数组</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = {<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>};</span><br><span class="line"></span><br><span class="line">        <span class="comment">//尝试通过一个越界索引来查找数组中的元素</span></span><br><span class="line">        <span class="keyword">int</span> num = getElement(arr, <span class="number">5</span>);</span><br><span class="line">        <span class="comment">//java.lang.ArrayIndexOutOfBoundsException: 大哥！索引越界了啊！</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Throws——声明异常"><a href="#Throws——声明异常" class="headerlink" title="Throws——声明异常"></a>Throws——声明异常</h3><ul><li><p>作用：运用于方法声明之上，用于表示当前方法不处理异常，而是提醒该方法的调用者来处理异常。</p></li><li><p>格式：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(参数) <span class="keyword">throws</span> 异常类名<span class="number">1</span>, 异常类名<span class="number">2.</span>..{</span><br><span class="line">    <span class="comment">//EXEC statement</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="comment">//如果定义功能发生编译时异常需要报告给调用者，</span></span><br><span class="line">    <span class="comment">//可以通过在方法上使用throws关键字进行声明</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(String path)</span> <span class="keyword">throws</span> FileNotFoundException </span>{</span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">"b.txt"</span>.equals(path)) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException(<span class="string">"文件路径错误！"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>{</span><br><span class="line">        read(<span class="string">"a.txt"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p><code>throws</code>用于进行异常类的声明，若该方法可能有多种异常情况，那么在<code>throws</code>后面可以写多个异常类，用逗号隔开。</p></blockquote><h3 id="try…catch——捕获异常"><a href="#try…catch——捕获异常" class="headerlink" title="try…catch——捕获异常"></a>try…catch——捕获异常</h3><ul><li><p>作用：对异常有针对性的语句进行捕获，可以对出现的异常进行指定方式的处理。</p></li><li><p>格式：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> {</span><br><span class="line">    可能会出现异常的代码;</span><br><span class="line">} <span class="keyword">catch</span> (异常类型 e){</span><br><span class="line">    处理异常的代码;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="comment">//定义读取文档方法，里面有抛出异常的代码</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(String path)</span> <span class="keyword">throws</span> FileNotFoundException</span>{</span><br><span class="line">        <span class="comment">//如果文件路径不一致，则抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">"a.txt"</span>.equals(path)) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException(<span class="string">"文件路径不正确"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        String path = <span class="string">"a.txt"</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            read(path);</span><br><span class="line">        } <span class="keyword">catch</span> (FileNotFoundException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="finally——代码块"><a href="#finally——代码块" class="headerlink" title="finally——代码块"></a>finally——代码块</h3><ul><li><p>作用：</p><ol><li>有一些特定的代码无论异常是否发生，都需要执行。</li><li>另外，因为异常会引发程序跳转，导致有些语句执行不到。而<code>finally</code>就是解决这个问题的，在<code>finally</code>代码块中存放的代码都是一定会被执行的。</li><li>当我们在<code>try</code>语句块中打开了一些物理资源（磁盘文件/数据库连接等），我们都得在使用完之后，最终关闭打开的资源。所以一般我们都会在<code>finally</code>代码块里面添加关闭资源的语句。</li></ol></li><li><p>格式：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="comment">//如果定义功能发生编译时异常需要报告给调用者，</span></span><br><span class="line">    <span class="comment">//可以通过在方法上使用throws关键字进行声明</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(String path)</span> <span class="keyword">throws</span> FileNotFoundException </span>{</span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">"b.txt"</span>.equals(path)) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException(<span class="string">"文件路径错误！"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            read(<span class="string">"a.txt"</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (FileNotFoundException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            System.out.println(<span class="string">"不管程序怎样，这里都会被执行"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>当只有在<code>try</code>或者<code>catch</code>中调用退出<code>JVM</code>的相关方法，此时<code>finally</code>才不会被执行，否则<code>finally</code>永远都会执行。</p></blockquote></li></ul><h2 id="自定义异常类"><a href="#自定义异常类" class="headerlink" title="自定义异常类"></a>自定义异常类</h2><p>我们说了<code>Java</code>中不同的异常类，分别表示着某一种具体的异常情况，那么在开发中总是有些异常情况是<code>SUN</code>公司没有定义好的。此时就需要我们根据自己业务的异常情况来定义异常类了。</p><p><strong>异常类如何定义：</strong></p><ol><li>自定义一个编译器异常：自定义类并继承于<code>java.lang.Exception</code>。</li><li>自定义一个运行时期的异常类：自定义类并继承于<code>java.lang.RuntimeException</code>。</li></ol><p><strong>代码演示</strong></p><p>要求：我们模拟注册操作，如果用户名已存在，则抛出异常并提示。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义登录异常类RegisterException (继承Exception为编译时异常)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegisterException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>{</span><br><span class="line">    <span class="comment">//空参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RegisterException</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过调用super调用父类构造器，传入表示异常的提示</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RegisterException</span><span class="params">(String message)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//模拟登录操作，使用数组模拟数据库中存储的数据，并提供当前注册账号是否存在的方法用于判断</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="comment">//模拟数据库中已存在的账号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String[] users = {<span class="string">"Jason"</span>, <span class="string">"Johnson"</span>, <span class="string">"Jones"</span>};</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义判断账号是否存在的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkUser</span><span class="params">(String name)</span> <span class="keyword">throws</span> RegisterException </span>{</span><br><span class="line">        <span class="keyword">for</span> (String user: users) {</span><br><span class="line">            <span class="comment">//用户名存在，就抛出登陆异常</span></span><br><span class="line">            <span class="keyword">if</span>(user.equals(name)) {</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RegisterException(<span class="string">"亲"</span> + name + <span class="string">"已经被注册了"</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">//调用方法</span></span><br><span class="line">            checkUser(<span class="string">"Jason"</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (RegisterException e) {<span class="comment">//捕获自定义的异常</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li><p>多个异常使用捕获又该如何处理呢？</p><ul><li><p>多个异常分别处理</p></li><li><p>多个异常一次捕获，一次处理</p></li><li><p>多个异常一次捕获，多次处理</p><p>一般我们是使用【一次捕获，多次处理】的方法，格式如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> {</span><br><span class="line">     编写可能会出现异常的代码;</span><br><span class="line">} <span class="keyword">catch</span>(异常类型A e) {</span><br><span class="line">    处理异常的代码;</span><br><span class="line">} <span class="keyword">catch</span>(异常类型B e) {</span><br><span class="line">    处理异常的代码;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><ol><li>这种异常处理方式，要求多个catch中的异常不能相同。</li><li>并且若catch中的多个异常之间有子父类异常的关系，那么子类异常要求在上面的catch处理，父类异常在下面的catch处理。</li></ol></blockquote></li></ul></li><li><p>运行时异常被抛出可以不处理（即不捕获，也不声明抛出）。</p></li><li><p>如果<code>finally</code>有<code>return</code>语句，则会永远返回<code>finally</code>中的结果，要避免该情况。</p></li><li><p>如果父类抛出了多个异常，子类重写父类方法时。抛出和父类相同的异常 或 父类异常的子类 或 不抛出异常(子类不能抛出比父类多的异常)。</p></li><li><p>父类方法没有抛出异常，子类重写父类该方法时也不可能抛出异常。此时子类产生异常，只能捕获处理，不能声明抛出。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK9对集合添加的优化</title>
      <link href="2020/10/19/48_JDK9%E5%AF%B9%E9%9B%86%E5%90%88%E6%B7%BB%E5%8A%A0%E7%9A%84%E4%BC%98%E5%8C%96/"/>
      <url>2020/10/19/48_JDK9%E5%AF%B9%E9%9B%86%E5%90%88%E6%B7%BB%E5%8A%A0%E7%9A%84%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="JDK9对集合添加的优化"><a href="#JDK9对集合添加的优化" class="headerlink" title="JDK9对集合添加的优化"></a>JDK9对集合添加的优化</h1><p>通常，我们在代码中创建一个集合（例如，List或Set），并直接用一些元素填充它。实例化集合，几个add方法调用，使得代码重复。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"abc"</span>);</span><br><span class="line">        list.add(<span class="string">"def"</span>);</span><br><span class="line">        list.add(<span class="string">"ghi"</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>Java 9，添加了几种集合工厂方法，更方便创建少量元素的集合、map实例。新的List、Set、Map的静态工厂方法可以更方便地创建集合的<strong>不可变</strong>实例。</p><ul><li><code>static &lt;E&gt; Set&lt;E&gt; of(E e1, E e2, E e3)</code>：返回包含三个元素的<strong>不可修改</strong>的Set。</li><li><code>static &lt;K,V&gt; Map&lt;K,V&gt; of(K k1, V v1, K k2, V v2)</code>：返回包含两个映射的<strong>不可修改</strong>的Map。</li><li><code>static &lt;E&gt; List&lt;E&gt; of(E e1, E e2)</code>：返回包含两个元素的<strong>不可修改</strong>的List。</li></ul><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//static &lt;E&gt; Set&lt;E&gt; of(E e1, E e2, E e3)返回包含三个元素的不可修改的集合。</span></span><br><span class="line">        Set&lt;String&gt; set = Set.of(<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>);</span><br><span class="line">        <span class="comment">//str1.add("d"); 报错，不支持的操作异常，因为是不可修改的集合</span></span><br><span class="line">        System.out.println(set);<span class="comment">//[a, b, c]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//static &lt;K, V&gt; Map&lt;K, V&gt; of(K k1, V v1, K k2, V v2)</span></span><br><span class="line">        Map&lt;String, Integer&gt; map = Map.of(<span class="string">"age"</span>, <span class="number">21</span>, <span class="string">"weight"</span>, <span class="number">125</span>);</span><br><span class="line">        System.out.println(map);<span class="comment">//{weight=125, age=21}</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//static &lt;E&gt; List&lt;E&gt; of(E e1, E e2)</span></span><br><span class="line">        List&lt;Integer&gt; list = List.of(<span class="number">21</span>,<span class="number">25</span>);</span><br><span class="line">        System.out.println(list);<span class="comment">//[21, 25]</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Map集合</title>
      <link href="2020/10/19/47_Map%E9%9B%86%E5%90%88/"/>
      <url>2020/10/19/47_Map%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h1 id="Map集合"><a href="#Map集合" class="headerlink" title="Map集合"></a>Map集合</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>现实生活中，我们常会看到这样的一种集合：IP地址与主机名，身份证号与个人，系统用户名与系统用户对象等，这种一对一对应的关系，就叫作映射。<code>Java</code>提供了专门的集合类用来存放这种对象关系的对象，即<code>java.util.Map</code>接口。</p><p>我们通过查看<code>Map</code>接口描述，发现<code>Map</code>接口下的集合与<code>Collection</code>接口下的集合，它们存储数据的形式不同，如下图：</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201019152027.jpg"></p><p><strong>总结不同点如下：</strong></p><ol><li><code>Collection</code>中的集合，元素是单个存储的。而<code>Map</code>中的集合，元素是由键值对的方式存储的。</li><li><code>Collection</code>中的集合称为单列集合，<code>Map</code>中的集合称为双列集合。</li></ol><blockquote><p><code>Map</code>中的集合不能包含重复的键；值可以重复；每个键只能对应一个值。</p></blockquote><h2 id="Map常用子类"><a href="#Map常用子类" class="headerlink" title="Map常用子类"></a>Map常用子类</h2><p>通过查看<code>Map</code>接口描述，看到<code>Map</code>有多个子类。这里我们主要讲解常用的<code>HashMap</code>集合、<code>LinkedHashMap</code>集合。</p><ol><li><code>HashMap&lt;K, V&gt;</code><ul><li>数据结构是哈希表</li><li>元素存取不一致</li><li>由于要保证键的唯一性，需要重写键的<code>hashCode()</code>方法、<code>equals()</code>方法</li></ul></li><li><code>LinkedHashMap&lt;K, V&gt;</code><ul><li><code>LinkedHashMap&lt;k,V&gt;</code>是<code>HashMap&lt;K,V&gt;</code>的子类</li><li>数据结构是哈希表+链表</li><li>元素存取一致，是通过链表结构来保证元素存取顺序的一致。</li><li>通过哈希表结构可以保证键的唯一性，但需要重写键的<code>hashCode()</code>方法、<code>equals()</code>方法。</li></ul></li></ol><blockquote><p><code>Map</code>接口中的集合都有两个泛型变量&lt;K, V&gt;，在使用时，要为两个泛型变量赋予数据类型。两个泛型变量&lt;K, v&gt;的数据类型可以相同，也可以不同。</p></blockquote><h2 id="Map接口中的常用方法"><a href="#Map接口中的常用方法" class="headerlink" title="Map接口中的常用方法"></a>Map接口中的常用方法</h2><ul><li><code>V put(K key, V value)</code>：把指定的键与指定的值添加到<code>Map</code>集合中</li><li><code>V remove(Object key)</code>：把指定的键所对应的键值对元素从<code>Map</code>集合中删除，并返回被删除的元素。</li><li><code>V get(object key)</code>：根据指定的键，在<code>Map</code>集合中获取对应的值</li><li><code>boolean containsKey(object key)</code>：判断集合中是否包含指定的键</li><li><code>Set&lt;K&gt; keySet()</code>：获取<code>Map</code>集合中所有的键，存储到<code>Set</code>集合中并返回</li><li><code>Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet()</code>：获取<code>Map</code>集合中所有的键值对对象，存储到<code>Set</code>集合中并返回。</li></ul><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//创建一个HashMap</span></span><br><span class="line">        Map&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        map.put(<span class="string">"Jason"</span>,<span class="number">21</span>);</span><br><span class="line">        map.put(<span class="string">"John"</span>,<span class="number">26</span>);</span><br><span class="line">        map.put(<span class="string">"Charlie"</span>,<span class="number">27</span>);</span><br><span class="line">        map.put(<span class="string">"Long"</span>,<span class="number">29</span>);</span><br><span class="line">        System.out.println(map);<span class="comment">//{Charlie=27, John=26, Long=29, Jason=21}</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//移除指定的元素</span></span><br><span class="line">        Integer remove = map.remove(<span class="string">"Long"</span>);</span><br><span class="line">        System.out.println(remove);<span class="comment">//29</span></span><br><span class="line">        System.out.println(map);<span class="comment">//{Charlie=27, John=26, Jason=21}</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取指定键的值</span></span><br><span class="line">        Integer get = map.get(<span class="string">"Jason"</span>);</span><br><span class="line">        System.out.println(get);<span class="comment">//21</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断集合中是否包含指定的键</span></span><br><span class="line">        <span class="keyword">boolean</span> con1 = map.containsKey(<span class="string">"John"</span>);</span><br><span class="line">        <span class="keyword">boolean</span> con2 = map.containsKey(<span class="string">"Long"</span>);</span><br><span class="line">        System.out.println(con1);<span class="comment">//true</span></span><br><span class="line">        System.out.println(con2);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取`Map`集合中所有的键，存储到`Set`集合中并返回</span></span><br><span class="line">        Set&lt;String&gt; keys = map.keySet();</span><br><span class="line">        System.out.println(keys);<span class="comment">//[Charlie, John, Jason]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取`Map`集合中所有的键值对，存储到`Set`集合中并返回</span></span><br><span class="line">        Set&lt;Map.Entry&lt;String, Integer&gt;&gt; keyValues = map.entrySet();</span><br><span class="line">        System.out.println(keyValues);<span class="comment">//[Charlie=27, John=26, Jason=21]</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>使用<code>put</code>方法时，若指定的键（key）在集合中没有，则没有这个键对应的值，返回null，并把指定的键值添加到集合中。</p><p>若指定的键（key）在集合中存在，则返回值为集合中键对应的值（该值为替换前的值），并把指定键所对应的值，替换成指定的新值。</p></blockquote><h2 id="Map集合遍历"><a href="#Map集合遍历" class="headerlink" title="Map集合遍历"></a>Map集合遍历</h2><h3 id="Map集合遍历——键找值"><a href="#Map集合遍历——键找值" class="headerlink" title="Map集合遍历——键找值"></a>Map集合遍历——键找值</h3><p>键找值方式：即通过元素中的键，获取键所对应的值。</p><p>分析步骤：</p><ol><li>获取Map中所有的键，由于键是唯一的，所以返回一个<code>Set</code>集合存储所有的键。</li><li>遍历键的Set集合，得到每一个键。</li><li>根据键，获取键所对应的值。</li></ol><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//创建HashMap集合</span></span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向集合中添加键值对</span></span><br><span class="line">        map.put(<span class="string">"name"</span>,<span class="string">"Jason"</span>);</span><br><span class="line">        map.put(<span class="string">"age"</span>,<span class="string">"21"</span>);</span><br><span class="line">        map.put(<span class="string">"gender"</span>,<span class="string">"man"</span>);</span><br><span class="line">        map.put(<span class="string">"address"</span>,<span class="string">"China"</span>);</span><br><span class="line">        map.put(<span class="string">"hobby"</span>,<span class="string">"League Of Legends"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取所有的键的Set集合</span></span><br><span class="line">        Set&lt;String&gt; keySet = map.keySet();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过遍历key，加get()，获取每一个键所对应的值</span></span><br><span class="line">        <span class="keyword">for</span> (String key: keySet) {</span><br><span class="line">            String value = map.get(key);</span><br><span class="line">            System.out.print(value + <span class="string">"; "</span>);</span><br><span class="line">            <span class="comment">//China; man; Jason; 21; League Of Legends; </span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Map集合遍历——键值对"><a href="#Map集合遍历——键值对" class="headerlink" title="Map集合遍历——键值对"></a>Map集合遍历——键值对</h3><p>在介绍这种遍历方式前，我们需要先了解一个对象——<strong>Entry键值对对象</strong>。</p><p>我们已经知道，<code>Map</code>中存放的是两种对象。一种称为<code>key</code>，一种称为<code>value</code>，它们在<code>Map</code>中是一一对应的关系。这一对对象又称作<code>Map</code>中的一个<code>Entry</code>。<code>Entry</code>将键值对的对应关系封装成了对象，即键值对对象。这样我们在遍历<code>Map</code>集合时，就可以从每一个键值对（<code>Entry</code>）对象中获取对应的键与对应的值。</p><p>既然<code>Entry</code>表示了一对键和值，那么也同样提供了获取对应键和对应值的方法。</p><ul><li><code>K getKey()</code>：获取<code>Entry</code>对象中的键。</li><li><code>V getValue()</code>：获取<code>Entry</code>对象中的值。</li></ul><p>在<code>Map</code>集合中也提供了获取所有<code>Entry</code>对象的方法：</p><ul><li><code>public Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet()</code>：获取到<code>Map</code>集合中所有的键值对对象的Set集合。</li></ul><p>下面我们正式遍历键值对。</p><p><strong>键值对方式</strong>：即通过集合中每个键值对（Entry）对象，获取键值对（Entry）对象中的键与值。</p><p>分析步骤：</p><ol><li>通过方法<code>EntrySet()</code>，获取<code>Map</code>集合中，所有的键值对（Entry）对象，以Set集合形式返回。</li><li>遍历包含键值对（Entry）对象的Set集合，得到每一个键值对（Entry）对象。</li><li>通过方法<code>getKey()</code>和方法`getValue()，获取Entry对象中的键与值。</li></ol><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//创建HashMap集合</span></span><br><span class="line">        Map&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加键值对</span></span><br><span class="line">        map.put(<span class="string">"Jason"</span>,<span class="number">21</span>);</span><br><span class="line">        map.put(<span class="string">"John"</span>,<span class="number">26</span>);</span><br><span class="line">        map.put(<span class="string">"Charlie"</span>,<span class="number">29</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用entrySet()获取所有键值对对象</span></span><br><span class="line">        Set&lt;Map.Entry&lt;String, Integer&gt;&gt; entrySet = map.entrySet();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历,得到每一entry对象</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry: entrySet) {</span><br><span class="line">            <span class="comment">//解析，等到每一个键和值</span></span><br><span class="line">            String key = entry.getKey();</span><br><span class="line">            Integer value = entry.getValue();</span><br><span class="line">            System.out.println(key + <span class="string">" : "</span> + value);</span><br><span class="line">            <span class="comment">//Charlie : 29</span></span><br><span class="line">            <span class="comment">//John : 26</span></span><br><span class="line">            <span class="comment">//Jason : 21</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="HashMap存储自定义类型键值"><a href="#HashMap存储自定义类型键值" class="headerlink" title="HashMap存储自定义类型键值"></a>HashMap存储自定义类型键值</h2><p>每位学生（姓名，年龄）都有自己的家庭住址。那么既然有对应关系，则将学生对象和家庭住址存储到Map集合中。学生对象作为键，家庭住址作为值。（学生姓名、年龄都相同，则视为同一名学生）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义学生类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Students</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//constructor</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Students</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Students{"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Students students = (Students) o;</span><br><span class="line">        <span class="keyword">return</span> age == students.age &amp;&amp;</span><br><span class="line">                Objects.equals(name, students.name);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//创建一个HashMap集合, 形成Students对象与地址映射的关系</span></span><br><span class="line">        Map&lt;Students, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加键值对</span></span><br><span class="line">        map.put(<span class="keyword">new</span> Students(<span class="string">"Jason"</span>,<span class="number">21</span>), <span class="string">"zhumadian"</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> Students(<span class="string">"John"</span>,<span class="number">25</span>), <span class="string">"shangqiu"</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> Students(<span class="string">"Bob"</span>, <span class="number">29</span>), <span class="string">"anyang"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取出元素的键的Set集合</span></span><br><span class="line">        Set&lt;Students&gt; keySet = map.keySet();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过键找值方式遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Students key: keySet) {</span><br><span class="line">            String address = map.get(key);</span><br><span class="line">            System.out.print(address + <span class="string">"; "</span>);<span class="comment">//anyang; zhumadian; shangqiu; </span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><ol><li><p>当给<code>HashMap</code>中存放自定义对象时，如果自定义对象作为<code>Key</code>存在。这是要保证对象的唯一性，所以必须要重写对象的<code>hashCode()</code>和<code>equals()</code>方法。</p></li><li><p>如果要保证<code>Map</code>中存放的<code>Key</code>和取出的顺序一致，可以使用<code>java.util.LinkedHashMap</code>集合来存放。</p></li></ol></blockquote><h2 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h2><p>我们知道<code>HashMap</code>保证成对元素唯一，并且查询速度很快。可是成对元素存放进去是没有顺序的，如果我们即需要保证速度快，还要保证有序。我们就需要用到在<code>HashMap</code>下面的一个子类<code>LinkedHashMap</code>，它是链表和哈希表的一个数据存储结构。</p><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//创建一个LinkedHashMap对象</span></span><br><span class="line">        LinkedHashMap&lt;Integer, String&gt; linkedHashMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向集合中添加元素</span></span><br><span class="line">        linkedHashMap.put(<span class="number">1</span>,<span class="string">"Jason"</span>);</span><br><span class="line">        linkedHashMap.put(<span class="number">2</span>,<span class="string">"John"</span>);</span><br><span class="line">        linkedHashMap.put(<span class="number">3</span>,<span class="string">"Bob"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取键值对对象的Set集合</span></span><br><span class="line">        Set&lt;Map.Entry&lt;Integer, String&gt;&gt; entrySet = linkedHashMap.entrySet();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历Entry，通过entry的getKey()和getValue()方法获取键与值</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, String&gt; entry: entrySet) {</span><br><span class="line">            Integer key = entry.getKey();</span><br><span class="line">            String value = entry.getValue();</span><br><span class="line">            System.out.println(key + <span class="string">" : "</span> + value);</span><br><span class="line">            <span class="comment">//1 : Jason</span></span><br><span class="line">            <span class="comment">//2 : John</span></span><br><span class="line">            <span class="comment">//3 : Bob</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Comparable接口和Comparator接口</title>
      <link href="2020/10/19/46_Comparable%E6%8E%A5%E5%8F%A3%E5%92%8CComparator%E6%8E%A5%E5%8F%A3/"/>
      <url>2020/10/19/46_Comparable%E6%8E%A5%E5%8F%A3%E5%92%8CComparator%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="Comparable接口和Comparator接口"><a href="#Comparable接口和Comparator接口" class="headerlink" title="Comparable接口和Comparator接口"></a>Comparable接口和Comparator接口</h1><h2 id="Comparable接口"><a href="#Comparable接口" class="headerlink" title="Comparable接口"></a>Comparable接口</h2><p><code>Comparable</code>接口需要结合Collections类的<code>static &lt;T&gt; void sort(List&lt;T&gt; list)</code>这个方法来理解。</p><p>使用<code>Collections.sort(List&lt;T&gt; list)</code>方法对集合中的元素进行排序，被排序的类必须实现<code>Comparable&lt;T&gt;</code>接口，并且覆盖重写它的<code>int compareTo(T o)</code>方法，而<code>compareTo()</code>内部是制定排序规则的语句。</p><p><strong>代码演示</strong></p><p>实现功能：对ArrayList集合的Person对象按照其元素age升序排序。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//自定义类实现Comparable接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Person</span>&gt; </span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//constructor</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person{"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写compareTo()方法，制定排序规则</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Person p)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age - p.age;<span class="comment">//按照年龄升序排序</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//创建ArrayList集合</span></span><br><span class="line">        ArrayList&lt;Person&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        Collections.addAll(list, <span class="keyword">new</span> Person(<span class="string">"jason"</span>, <span class="number">21</span>),</span><br><span class="line">                <span class="keyword">new</span> Person(<span class="string">"John"</span>, <span class="number">18</span>) ,</span><br><span class="line">                <span class="keyword">new</span> Person(<span class="string">"Bob"</span>,<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//进行排序</span></span><br><span class="line">        Collections.sort(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//验证</span></span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="comment">//[Person{name='Bob', age=16},</span></span><br><span class="line">        <span class="comment">// Person{name='John', age=18},</span></span><br><span class="line">        <span class="comment">// Person{name='jason', age=21}]</span></span><br><span class="line">        <span class="comment">//按年龄升序排序成功</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Comparator接口"><a href="#Comparator接口" class="headerlink" title="Comparator接口"></a>Comparator接口</h2><p><code>Comparator</code>接口需要结合Collections类的<code>static &lt;T&gt; void sort(List&lt;T&gt; list, Comparator&lt;? super T&gt; c)</code>这个方法来理解。</p><p>使用<code>Colllections.sort(List&lt;T&gt; list, Comparator&lt;? super T&gt;)</code>对集合的对象进行排序，集合中对象的类就不需要强制实现<code>Comparable&lt;T&gt;接口</code>了，但是使用<code>sort()</code>方法时第二参数必须被传入一个<code>Comparator</code>的对象，同时必须覆盖重写它的<code>compare(T o1, T o2)</code>，这个<code>compare(T o1, T o2)</code>内部是制定排序规则的语句。</p><p><strong>代码演示</strong></p><p>实现功能：对ArrayList集合中的Students对象按照其元素age降序排列，如果年龄相等，那么按照其元素name首字母升序排列。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Students</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//constructor</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Students</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.age = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//setter and getter</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> id)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.age = id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Students{"</span> +</span><br><span class="line">                <span class="string">"id="</span> + age +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//创建ArrayLit集合</span></span><br><span class="line">        ArrayList&lt;Students&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        Collections.addAll(list, <span class="keyword">new</span> Students(<span class="number">19</span>, <span class="string">"John"</span>),</span><br><span class="line">                <span class="keyword">new</span> Students(<span class="number">18</span>, <span class="string">"Jason"</span>),</span><br><span class="line">                <span class="keyword">new</span> Students(<span class="number">29</span>, <span class="string">"Bod"</span>),</span><br><span class="line">                <span class="keyword">new</span> Students(<span class="number">19</span>, <span class="string">"Charlie"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//进行排序</span></span><br><span class="line">        Collections.sort(list, <span class="keyword">new</span> Comparator&lt;Students&gt;(){</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Students s1, Students s2)</span> </span>{</span><br><span class="line">               <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">               <span class="comment">//首先按照age的降序排列</span></span><br><span class="line">               num = s2.getAge() - s1.getAge();</span><br><span class="line">               <span class="comment">//如果age相等，那么按照name的首字母升序排列</span></span><br><span class="line">               <span class="keyword">if</span> (num == <span class="number">0</span>) {</span><br><span class="line">                    num = s1.getName().charAt(<span class="number">0</span>) - s2.getName().charAt(<span class="number">0</span>);</span><br><span class="line">               }</span><br><span class="line">               <span class="keyword">return</span> num;</span><br><span class="line">           }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        <span class="comment">//验证</span></span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="comment">//[Students{id=29, name='Bod'},</span></span><br><span class="line">        <span class="comment">// Students{id=19, name='Charlie'},</span></span><br><span class="line">        <span class="comment">// Students{id=19, name='John'}, </span></span><br><span class="line">        <span class="comment">// Students{id=18, name='Jason'}]</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
            <tag> 难点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Collections工具类</title>
      <link href="2020/10/18/45_Collections%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
      <url>2020/10/18/45_Collections%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="Collections工具类"><a href="#Collections工具类" class="headerlink" title="Collections工具类"></a>Collections工具类</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>java.utils.Collections</code>是一个用来对List集合进行操作的集合工具类。</p><h2 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能"></a>常用功能</h2><ul><li><code>static &lt;T&gt; boolean addAll(Colletion&lt;T&gt; c, T... elements)</code> ：往集合中添加一些元素。</li><li><code>static void shuffle(List&lt;?&gt; list)</code>：打乱集合中元素的顺序。</li><li><code>static &lt;T&gt; void sort(List&lt;T&gt; list)</code>：将集合中元素按照默认规则排序。</li><li><code>static &lt;T&gt; void sort(List&lt;T&gt; list, Comparator&lt;? super T&gt; c)</code>：将集合中元素按照指定规则排序。</li></ul><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//创建一个ArrayList数组</span></span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//采用Collections工具类中的addAll()，完成向集合中一次添加多个元素</span></span><br><span class="line">        Collections.addAll(list,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">        System.out.println(list);<span class="comment">//[1, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用shuffle()打乱集合中元素的顺序</span></span><br><span class="line">        Collections.shuffle(list);</span><br><span class="line">        System.out.println(list);<span class="comment">//4, 3, 5, 1, 2]</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Comparable接口和Comparator接口"><a href="#Comparable接口和Comparator接口" class="headerlink" title="Comparable接口和Comparator接口"></a>Comparable接口和Comparator接口</h2><p>上面我们演示了Collections类两种方法的使用，还有两个排序方法没有演示，这里我们开始讲解这两种方法的使用——<code>static &lt;T&gt; void sort(List&lt;T&gt; list)</code>和<code>static &lt;T&gt; sort(List&lt;T&gt; list, Comparator&lt;? super T&gt; c)</code>。</p><h3 id="第一种方法（Comparable接口）"><a href="#第一种方法（Comparable接口）" class="headerlink" title="第一种方法（Comparable接口）"></a>第一种方法（Comparable接口）</h3><p>第一种对集合元素进行排序的方法就是：<code>static &lt;T&gt; void sort(List&lt;T&gt; list)</code>。</p><p>使用<code>Collections.sort(List&lt;T&gt; list)</code>方法对集合中的元素进行排序，被排序的类必须实现<code>Comparable&lt;T&gt;</code>接口，并且覆盖重写它的<code>int com    pareTo(T o)</code>方法，而<code>compareTo()</code>内部是制定排序规则的语句。</p><p><strong>代码演示</strong></p><p>需要实现功能：对ArrayList集合的Person对象按照其元素age升序排序。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义类实现Comparable接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Person</span>&gt; </span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//constructor</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person{"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写compareTo()方法，制定排序规则</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Person p)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age - p.age;<span class="comment">//按照年龄升序排序</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//创建ArrayList集合</span></span><br><span class="line">        ArrayList&lt;Person&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        Collections.addAll(list, <span class="keyword">new</span> Person(<span class="string">"jason"</span>, <span class="number">21</span>),</span><br><span class="line">                <span class="keyword">new</span> Person(<span class="string">"John"</span>, <span class="number">18</span>) ,</span><br><span class="line">                <span class="keyword">new</span> Person(<span class="string">"Bob"</span>,<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//进行排序</span></span><br><span class="line">        Collections.sort(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//验证</span></span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="comment">//[Person{name='Bob', age=16},</span></span><br><span class="line">        <span class="comment">// Person{name='John', age=18},</span></span><br><span class="line">        <span class="comment">// Person{name='jason', age=21}]</span></span><br><span class="line">        <span class="comment">//按年龄升序排序成功</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>Integer、Long这项包装类和String类都已经默认实现了<code>Comparable&lt;T&gt;</code>接口和重写了<code>compareTo()</code>方法，所以我们可以直接使用<code>static &lt;T&gt; void sort(List&lt;T&gt; list)</code>对仅包含包装类和String类的集合进行默认规则的排序。</p></blockquote><h3 id="第二种方法（Comparator接口）"><a href="#第二种方法（Comparator接口）" class="headerlink" title="第二种方法（Comparator接口）"></a>第二种方法（Comparator接口）</h3><p>第一种对集合元素进行排序的方法就是：<code>static &lt;T&gt; void sort(List&lt;T&gt; list, Comparator&lt;? super T&gt; c)</code>。</p><p>使用<code>Colllections.sort(List&lt;T&gt; list, Comparator&lt;? super T&gt;)</code>对集合的对象进行排序，集合中对象的类就不需要强制实现<code>Comparable&lt;T&gt;接口</code>了，但是使用<code>sort()</code>方法时第二参数必须被传入一个<code>Comparator</code>的对象，同时必须覆盖重写它的<code>compare(T o1, T o2)</code>，这个<code>compare(T o1, T o2)</code>内部是制定排序规则的语句。</p><p><strong>代码演示</strong></p><p>需要实现功能：对ArrayList集合中的Students对象按照其元素age降序排列，如果年龄相等，那么按照其元素name首字母升序排列。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Students</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//constructor</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Students</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.age = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//setter and getter</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> id)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.age = id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Students{"</span> +</span><br><span class="line">                <span class="string">"id="</span> + age +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//创建ArrayLit集合</span></span><br><span class="line">        ArrayList&lt;Students&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        Collections.addAll(list, <span class="keyword">new</span> Students(<span class="number">19</span>, <span class="string">"John"</span>),</span><br><span class="line">                <span class="keyword">new</span> Students(<span class="number">18</span>, <span class="string">"Jason"</span>),</span><br><span class="line">                <span class="keyword">new</span> Students(<span class="number">29</span>, <span class="string">"Bod"</span>),</span><br><span class="line">                <span class="keyword">new</span> Students(<span class="number">19</span>, <span class="string">"Charlie"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//进行排序</span></span><br><span class="line">        Collections.sort(list, <span class="keyword">new</span> Comparator&lt;Students&gt;(){</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Students s1, Students s2)</span> </span>{</span><br><span class="line">               <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">               <span class="comment">//首先按照age的降序排列</span></span><br><span class="line">               num = s2.getAge() - s1.getAge();</span><br><span class="line">               <span class="comment">//如果age相等，那么按照name的首字母升序排列</span></span><br><span class="line">               <span class="keyword">if</span> (num == <span class="number">0</span>) {</span><br><span class="line">                    num = s1.getName().charAt(<span class="number">0</span>) - s2.getName().charAt(<span class="number">0</span>);</span><br><span class="line">               }</span><br><span class="line">               <span class="keyword">return</span> num;</span><br><span class="line">           }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        <span class="comment">//验证</span></span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="comment">//[Students{id=29, name='Bod'},</span></span><br><span class="line">        <span class="comment">// Students{id=19, name='Charlie'},</span></span><br><span class="line">        <span class="comment">// Students{id=19, name='John'}, </span></span><br><span class="line">        <span class="comment">// Students{id=18, name='Jason'}]</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>可变参数</title>
      <link href="2020/10/18/44_%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0/"/>
      <url>2020/10/18/44_%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h1><p>在<code>JDK1.5</code>之后，如果我们定义一个方法需要接受多个参数，并且多个参数类型一致，我们可以对其简化成如下格式：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(参数类型... 形参名) {</span><br><span class="line">    <span class="comment">//EXEC statement</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>其实这个书写完全等价于：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(参数类型[] 形参名) {</span><br><span class="line">    <span class="comment">//EXEC statement</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>只是后面这种定义，在调用时必须传递数组，而前者直接传递数据既可。</p><p><code>JDK1.5</code>以后，出现了简化操作。<code>...</code>用在参数上，称之为可变参数。</p><p>同样是代表数组，但是在调用这个带有可变参数的方法时，不用创建数组（这也是简单之处），直接将数组中的元素作为实际参数进行传递。其实编译成的<code>class</code>文件里面，是将这些元素先封装到一个数组中，再进行传递。这些动作都在编译<code>.class</code>文件时，编译器就自动完成了。</p><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="comment">//定义一个带有“可变参数”的静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span>... arr)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i: arr) {</span><br><span class="line">            sum += i;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//使用带有“可变参数”的方法，直接往里面传递多个数据</span></span><br><span class="line">        <span class="keyword">int</span> num = calculate(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">        System.out.println(num);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用带有“可变参数”的方法，直接往里面传递数组</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]{<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>};</span><br><span class="line">        <span class="keyword">int</span> num02 = calculate(arr);</span><br><span class="line">        System.out.println(arr);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>注意：如果在方法书写时，值个方法拥有多个参数，参数中并且包含【可变参数】，那么【可变参数】一定要写在参数列表的末尾。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Set接口</title>
      <link href="2020/10/18/43_Set%E6%8E%A5%E5%8F%A3/"/>
      <url>2020/10/18/43_Set%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="Set接口"><a href="#Set接口" class="headerlink" title="Set接口"></a>Set接口</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>java.util.Set</code>接口和<code>java.util.List</code>接口一样，同样继承自<code>Collection</code>接口，它与<code>Collection</code>接口中的方法基本一致，并没有对<code>Collection</code>接口进行功能上的扩充，只是比<code>Collection</code>接口更加严格了。与<code>List</code>接口不同的是，<code>Set</code>接口中元素无序，并且都会以某种规则保证存入的元素不出现重复。</p><blockquote><p><code>Set</code>集合有多个子类，这里我们介绍其中的<code>java.util.HashSet</code>、<code>java.util.LinkedHashset</code>这两个集合。</p></blockquote><h2 id="HashSet集合"><a href="#HashSet集合" class="headerlink" title="HashSet集合"></a>HashSet集合</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><code>java.util.HashSet</code>是<code>Set</code>接口的一个实现类，它所存储的元素是不同重复的，并且元素都是无序的（即存取顺序不一致）。<code>java.util.HashSet</code>底层的实现其实是一个<code>java.util.HashMap</code>。</p><p><code>HashSet</code>是根据对象的哈希值来确定元素在集合中的存储位置，因此具有良好的存取和查找性能。保证元素唯一性的方式依赖于：<code>hashCode</code>和<code>equals</code>方法。</p><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//创建一个Set集合</span></span><br><span class="line">        HashSet&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        set.add(<span class="string">"jason"</span>);</span><br><span class="line">        set.add(<span class="string">"boy"</span>);</span><br><span class="line">        set.add(<span class="string">"int"</span>);</span><br><span class="line">        set.add(<span class="keyword">new</span> String(<span class="string">"jason"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">for</span> (String s: set) {</span><br><span class="line">            System.out.print(s + <span class="string">"; "</span>);<span class="comment">//jason; boy; int;</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>根据结果我们发现字符串”jason”只存储了一个，也就是说重复的元素set集合不存储。</p></blockquote><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>Set接口采用的是哈希表作为数据结构。</p><p>在<code>JDK1.8</code>之前，哈希表底层采用数组+链表实现，即使用链表处理冲突，同一<code>hash</code>值的链表都存储在一个链表里。但是当位于一个桶中的元素较多，即<code>hash</code>值相等的元素较多时，通过<code>key</code>值一次查找的效率较低。而<code>JDK1.8</code>中，哈希表存储采用【数组】+【链表】+【红黑树】实现。当链表长度超过阈值8时，将链表转换为红黑树，这样大大减少了查找时间。</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201018172932.jpg"></p><p>看到这张图就有人要问了，这个是怎么存储的呢？</p><p>为了方便大家的理解我们结合一个存储流程图来说明一下：</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201018173127.png"></p><p>总而言之，<code>JDK1.8</code>引入红黑树大程度优化了<code>HashMap</code>的性能。那么对于我们来讲保证<code>HashSet</code>集合元素的唯一，其实就是根据对象的<code>hashCode</code>和<code>equals</code>方法来决定的。如果我们往集合中存放自定义的对象，那么保证其唯一，就必须重写<code>hashCode</code>和<code>equals</code>方法建立属于当前对象的比较方式。</p><h3 id="HashSet存储自定义类型元素"><a href="#HashSet存储自定义类型元素" class="headerlink" title="HashSet存储自定义类型元素"></a>HashSet存储自定义类型元素</h3><p>给<code>HashSet</code>中存放自定义类型元素时，需要重写对象中的<code>hashCode</code>和<code>equals</code>方法，建立自己的比较方式，才能保证<code>HashSet</code>集合中对象的唯一性。</p><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//创建一个HashSet集合, 该集合只存储Person对象</span></span><br><span class="line">        HashSet&lt;Person&gt; hash = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向HashSet集合添加Person对象</span></span><br><span class="line">        hash.add(<span class="keyword">new</span> Person(<span class="string">"jason"</span>,<span class="number">21</span>));</span><br><span class="line">        hash.add(<span class="keyword">new</span> Person(<span class="string">"jason"</span>,<span class="number">22</span>));</span><br><span class="line">        hash.add(<span class="keyword">new</span> Person(<span class="string">"jason"</span>,<span class="number">21</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用foreach遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Person p: hash) {</span><br><span class="line">            System.out.print(p + <span class="string">"; "</span>);<span class="comment">//Person{name='jason', age=22}; Person{name='jason', age=21}; </span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建自定义类Person</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//constructor</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//setter and getter</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写equals()</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Person person = (Person) o;</span><br><span class="line">        <span class="keyword">return</span> age == person.age &amp;&amp;</span><br><span class="line">                Objects.equals(name, person.name);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写hashCode()</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写toString()</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person{"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h3><p>我们知道<code>HashSet</code>保证元素唯一，可以元素存放进去是没有顺序的。那么如果我们要保证元素有序，怎么办呢？</p><p>在<code>HashSet</code>下面有一个子类<code>java.util.LinkedHashSet</code>，它是<strong>链表</strong>和<strong>哈希表</strong>组合的一个数据存储结构。</p><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//创建一个LinkedHashSet集合，用于存储String对象</span></span><br><span class="line">        HashSet&lt;String&gt; set = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        set.add(<span class="string">"first"</span>);</span><br><span class="line">        set.add(<span class="string">"first"</span>);<span class="comment">//重复的元素，不能被添加到集合中</span></span><br><span class="line">        set.add(<span class="string">"second"</span>);</span><br><span class="line">        set.add(<span class="string">"third"</span>);</span><br><span class="line">        set.add(<span class="string">"fourth"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过iterator()获取迭代器对象</span></span><br><span class="line">        Iterator&lt;String&gt; it = set.iterator();</span><br><span class="line">        <span class="comment">//利用迭代器对象的hasNext()和next()，进行迭代遍历</span></span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) {</span><br><span class="line">            String s = it.next();</span><br><span class="line">            System.out.print(s + <span class="string">"; "</span>);<span class="comment">//first; second; third; fourth; （元素存取有序）</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>List集合</title>
      <link href="2020/10/18/42_List%E9%9B%86%E5%90%88/"/>
      <url>2020/10/18/42_List%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h1 id="List集合"><a href="#List集合" class="headerlink" title="List集合"></a>List集合</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>java.util.List</code>接口继承自<code>Collection</code>接口，是单列集合的一个重要分支。特点如下：</p><ol><li>存取有序</li><li>带有索引</li><li>可以重复</li></ol><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><p><code>List</code>作为<code>Collection</code>集合的子接口，不但继承了<code>Collection</code>接口中的全部方法，而且还增加了一些根据元素索引来操作集合的特有方法，如下：</p><ul><li><code>void add(int index, E element)</code>：将指定的元素，添加到该集合中的指定位置上。</li><li><code>E get(int index)</code>：返回集合中指定位置的元素。</li><li><code>E remove(int index)</code>：移除列表中指定位置的元素，并返回被移除的元素。</li><li><code>E set(int index, E element)</code>：用指定元素替换集合中指定位置的元素，并返回被替换的元素。</li></ul><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//创建一个ArrayList集合(不能使用多态Collection)</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向集合中添加元素</span></span><br><span class="line">        list.add(<span class="string">"first"</span>);</span><br><span class="line">        list.add(<span class="string">"second"</span>);</span><br><span class="line">        list.add(<span class="string">"third"</span>);</span><br><span class="line">        list.add(<span class="string">"fourth"</span>);</span><br><span class="line">        list.add(<span class="string">"fifth"</span>);</span><br><span class="line">        System.out.println(list);<span class="comment">//[first, second, third, fourth, fifth]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用void add(int index, E element)往指定位置添加元素</span></span><br><span class="line">        list.add(<span class="number">1</span>,<span class="string">"第二"</span>);</span><br><span class="line">        System.out.println(list);<span class="comment">//[first, 第二, second, third, fourth, fifth]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用E remove(int index)，删除指定索引处的元素，并返回被删除的元素</span></span><br><span class="line">        String re = list.remove(<span class="number">0</span>);</span><br><span class="line">        System.out.println(re);<span class="comment">//first</span></span><br><span class="line">        System.out.println(list);<span class="comment">//[第二, second, third, fourth, fifth]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//E set(int index, E element)替换指定索引处的元素, 并返回被替换的元素</span></span><br><span class="line">        String set = list.set(<span class="number">2</span>, <span class="string">"第三"</span>);</span><br><span class="line">        System.out.println(set);<span class="comment">//third</span></span><br><span class="line">        System.out.println(list);<span class="comment">//[第二, second, 第三, fourth, fifth]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用for循环结合int size()和 E get(int index)来进行遍历集合</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) {</span><br><span class="line">            System.out.print(list.get(i) + <span class="string">"; "</span>);<span class="comment">//第二; second; 第三; fourth; fifth;</span></span><br><span class="line">        }</span><br><span class="line">        System.out.println();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//使用foreach进行遍历循环</span></span><br><span class="line">        <span class="keyword">for</span> (String s: list) {</span><br><span class="line">            System.out.print(s + <span class="string">"; "</span>);<span class="comment">//第二; second; 第三; fourth; fifth; </span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="List的子类"><a href="#List的子类" class="headerlink" title="List的子类"></a>List的子类</h2><h3 id="ArrayList集合"><a href="#ArrayList集合" class="headerlink" title="ArrayList集合"></a>ArrayList集合</h3><ul><li><p><code>java.util.ArrayList</code>集合数据结构为数组。</p></li><li><p>特点是：有序，增删慢，查找快。</p></li><li><p>由于日常开发中使用最多的功能为查询数据、遍历数据，所以<code>ArrayList</code>是最常用的集合。</p></li></ul><h3 id="LinkedList集合"><a href="#LinkedList集合" class="headerlink" title="LinkedList集合"></a>LinkedList集合</h3><ul><li><p><code>java.util.LinkedList</code>集合数据结构为双向链表。</p></li><li><p>特点是：查找慢，增删快。</p></li><li><p>实际开发中对一个集合元素的添加与删除经常涉及到首尾的操作，而<code>LinkedList</code>提供了大量首尾操作的方法，这些方法我们作为了解既可：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(E e)</span>：将指定元素插入此列表的开头。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(E e)</span>：将指定元素添加到此列表的结尾。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">getFirst</span><span class="params">()</span>：获取此列表的第一个元素。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">getLast</span><span class="params">()</span>：获取此列表的最后一个元素。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">removeFirst</span><span class="params">()</span>：删除并返回列表中第一个元素。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">removeLast</span><span class="params">()</span>：删除并返回列表中最后一个元素。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">pop</span><span class="params">()</span>：从此列表所表示的堆栈处弹出一个元素。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(E e)</span>：将一个元素推入此列表所表示的堆栈。</span></span><br></pre></td></tr></tbody></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="2020/10/18/41_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>2020/10/18/41_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>数据存储的常用结构有：栈、队列、数组、链表和红黑树。</p><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p><strong>stack</strong>，又称堆栈，它是运算受限的线性表。其限制是仅允许在标的一段进行插入和删除操作，不允许在其他任何位置进行添加、查找、删除等操作。</p><p>简单的来说，采用该结构的集合，对元素的存取有如下的特点：</p><ul><li><p>先进后出。</p></li><li><p>栈的入口、出口，都在栈的顶端位置。</p></li></ul><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201018025450.png"></p><blockquote><p>压栈：就是存元素。即，把元素存储到栈的顶端位置，栈中已有元素依次向栈底方向移动一个位置。</p><p>弹栈：就是取元素。即，把栈的顶端位置元素取出，栈中已有元素依次向栈顶方向移动一个位置。</p></blockquote><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p><strong>queue</strong>，简称队，它同堆栈一样，也是一种运算受限的线性表。其限制是仅允许在表的一端进行插入，而在表的另一端进行删除。</p><p>简单的说，采用该结构的集合，对元素的存取有如下的特点：</p><ul><li><p>先进先出</p></li><li><p>队列的入口、出口各占一侧。</p></li></ul><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201018025617.bmp"></p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>Array，是有序的元素序列，数组是在内存中开辟一段连续的空间，并在此空间存放元素。</p><p>简单的说，采用该结构的集合，对元素的存取有如下的特点：</p><ul><li><p>查找快：通过索引，可以快速访问指定位置的元素。</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201018025708.png"></p></li><li><p>增删慢</p><ul><li><p><strong>指定索引位置增加元素</strong>：需要创建一个新数组，将指定新元素存储在指定索引位置，再把原数组元素根据索引，复制到新数组对应索引的位置。</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201018025758.png"></p></li><li><p><strong>指定索引位置删除元素</strong>：需要创建一个新数组，把原数组元素根据索引，复制到新数组对应索引的位置。而源数组中指定索引位置元素不复制到新数组中。</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201018025841.png"></p></li></ul></li></ul><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p><strong>linked list</strong>，由一系列节点<code>node</code>（链表中每一个元素称为节点）组成，节点可以在运行时动态的生成。每个节点包括两个部分：存储数据元素的数据域 和 存储下一个节点地址的指针域。我们常说的链表结构有【单向链表】和【双向链表】。下面给大家介绍<strong>单向链表</strong>。</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201018030021.png"></p><p>简单的说，采用该结构的集合，对元素的存取有如下的特点：</p><ul><li><p>多个节点之间，通过地址进行连接。</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201018030058.png"></p></li><li><p>查找元素慢：想要查找某个元素，需要通过连接的节点，依次向后查找指定元素。</p></li><li><p>增删元素快</p><ul><li><p>增加元素：只需要修改连接下个元素的地址既可。</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201018030140.png"></p></li><li><p>删除元素：只需要修改连接下个元素的地址既可。</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201018030159.bmp"></p></li></ul></li></ul><h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2><p><strong>binary tree</strong>，二叉树的一种，是每个节点不超过“2”的有序树。</p><p>简单的理解，就是一种类似于我们生活中树的结构，只不过每个节点上都最多只能有两个字节点。</p><p>二叉树是每个节点最多有两个子树的树结构。顶上的叫根节点，两边被称为“左子树”和“右子树”。</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201018030259.bmp"></p><p>我们要说的是二叉树的一种——<strong>红黑树</strong>，红黑树本身就一颗二叉查找树。将节点插入后，该数仍然是一颗二叉查找树。也就意味着，树的键值仍然是有序的。</p><h3 id="红黑树的约束"><a href="#红黑树的约束" class="headerlink" title="红黑树的约束"></a>红黑树的约束</h3><ol><li>节点为红色或者黑色</li><li>根节点是黑色</li><li>叶子节点（特指空节点）是黑色</li><li>每个红色节点的子节点都是黑色的</li><li>任何一个节点到其每一个叶子节点的所有路径上黑色节点数相同</li></ol><h3 id="红黑树的特点"><a href="#红黑树的特点" class="headerlink" title="红黑树的特点"></a>红黑树的特点</h3><p>速度特别快，趋近平衡树，查找叶子元素最少和最多次数不多于二倍。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>泛型</title>
      <link href="2020/10/18/40_%E6%B3%9B%E5%9E%8B/"/>
      <url>2020/10/18/40_%E6%B3%9B%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在前面学习集合时，我们都知道集合中是可以存放任意对象的，只要把对象存储集合后，那么这是他们都会被提升成<code>Object</code>类型。当我们在取出每一个对象，并且进行相应的操作，这时必须采用类型转换。</p><p>大家观察下面代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Review01</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll.add(<span class="string">"first"</span>);</span><br><span class="line">        coll.add(<span class="string">"first"</span>);</span><br><span class="line">        coll.add(<span class="string">"first"</span>);</span><br><span class="line">        coll.add(<span class="string">"first"</span>);</span><br><span class="line">        coll.add(<span class="number">100</span>);</span><br><span class="line">        Iterator it = coll.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) {</span><br><span class="line">            String s = (String) it.next();</span><br><span class="line">            System.out.println(s);<span class="comment">//报错：java.lang.ClassCastException</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>程序在运行时发生了问题<code>java.lang.ClassCastException</code>。</p><ul><li><p>为什么会发生类型转换异常？</p><p>来分析下：由于集合中可以存储任意类型的元素，导致取出时类型不统一，强转时引发<code>ClassCastException</code>异常。</p></li><li><p>怎么来解决这个问题呢？</p><p><code>Collection</code>虽然可以存储各种对象，但实际上我们通常只需要<code>Collection</code>只存储同一类型的对象。例如都是存储字符串对象。因此在<code>JDK1.5</code>之后，新增了泛型<code>Generic</code>语法，让你在设计<code>API</code>时可以指定类或方法支持泛型，这样我们使用<code>API</code>的时候也变得更为简单，并得到了编译时期的语法检查。</p></li></ul><blockquote><p>泛型可以在类或方法中预支地使用未知的类型。一般在创建对象时，将未知的类型确定为具体的类型。当没有指定泛型时，默认类型为<code>Object</code>类型。</p><p>泛型是数据类型的一部分，我们将类名与泛型合并在一起看作数据类型。</p></blockquote><h2 id="泛型的优势"><a href="#泛型的优势" class="headerlink" title="泛型的优势"></a>泛型的优势</h2><ol><li>将运行时期的<code>ClassCastException</code>，转移成编译时期，可以编译器的提醒报错。</li><li>避免了类型强转的麻烦。</li></ol><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Review01</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//在这里使用泛型</span></span><br><span class="line">        Collection&lt;String&gt; coll = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        coll.add(<span class="string">"jason"</span>);</span><br><span class="line">        <span class="comment">//coll.add(1);  这里添加其他类型对象编译器就会报错</span></span><br><span class="line">        coll.add(<span class="string">"first"</span>);</span><br><span class="line">        <span class="comment">//集合已经明确具体存放的元素类型，那么在使用迭代器的时候，迭代器也同样会知道具体遍历元素类型</span></span><br><span class="line">        Iterator&lt;String&gt; it = coll.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) {</span><br><span class="line">            <span class="comment">//当使用Iterator&lt;String&gt;控制元素类型后，就不需要强转了。获取到的元素直接就是String类型</span></span><br><span class="line">            String s = it.next();</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="泛型的定义与使用"><a href="#泛型的定义与使用" class="headerlink" title="泛型的定义与使用"></a>泛型的定义与使用</h2><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><p><strong>格式</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="class"><span class="keyword">class</span> 类名&lt;代表泛型的变量&gt; </span>{</span><br><span class="line">    <span class="comment">//EXEC statement</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyGeneric</span>&lt;<span class="title">MVP</span>&gt; </span>{</span><br><span class="line">    <span class="comment">//没有MVP类型，在这里代表未知的一种数据类型，未来传递什么就是什么类型</span></span><br><span class="line">    <span class="keyword">private</span> MVP mvp;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//setter and getter</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyGeneric</span><span class="params">(MVP mvp)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.mvp = mvp;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> MVP <span class="title">getMyGeneric</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> mvp;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h3><p><strong>定义格式</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 &lt;泛型&gt; 返回值类型 方法名(参数列表) {</span><br><span class="line">    <span class="comment">//EXEC statement</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyGeneric</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> &lt;E&gt; <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(E e)</span> </span>{</span><br><span class="line">        System.out.println(e.getClass());</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> &lt;E&gt; <span class="function">E <span class="title">show2</span><span class="params">(E e)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><p><strong>定义格式</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="class"><span class="keyword">interface</span> 接口名&lt;泛型&gt; </span>{</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Machine</span>&lt;<span class="title">MVP</span>&gt; </span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(MVP mvp)</span></span>;</span><br><span class="line">    <span class="function">MVP <span class="title">getMvp</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>使用格式</strong></p><ol><li><p>定义实现类时确定泛型的类型</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在这里确定接口的泛型，此时接口泛型MVP的值就为String</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span> <span class="keyword">implements</span> <span class="title">Machine</span>&lt;<span class="title">String</span>&gt; </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String s)</span> </span>{</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMvp</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"这是实现类重写的父接口的抽象方法！"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>直到创建对象时，再确定泛型的类型</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Review01</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//创建对象时，确认接口的泛型. 此时接口的泛型就为String</span></span><br><span class="line">        Computer&lt;String&gt; lenovo = <span class="keyword">new</span> Computer&lt;&gt;();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Machine</span>&lt;<span class="title">MVP</span>&gt; </span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(MVP mvp)</span></span>;</span><br><span class="line">    <span class="function">MVP <span class="title">getMvp</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//其实现类也要加上泛型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span>&lt;<span class="title">MVP</span>&gt; <span class="keyword">implements</span> <span class="title">Machine</span>&lt;<span class="title">MVP</span>&gt; </span>{</span><br><span class="line">    MVP one;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(MVP mvp)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"其实我什么都没添加"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MVP <span class="title">getMvp</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> one;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="泛型综合案例"><a href="#泛型综合案例" class="headerlink" title="泛型综合案例"></a>泛型综合案例</h2></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义带有泛型的接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">GenericClass</span>&lt;<span class="title">Android</span>&gt; </span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setMyGenericClass</span><span class="params">(Android name)</span></span>;</span><br><span class="line">    <span class="function">Android <span class="title">getMyGenericClass</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义带有泛型的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyGenericClass</span>&lt;<span class="title">Android</span>&gt; <span class="keyword">implements</span> <span class="title">GenericClass</span>&lt;<span class="title">Android</span>&gt;</span>{</span><br><span class="line">    <span class="keyword">private</span> Android name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//参数为泛型的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyGenericClass</span><span class="params">(Android name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回值为泛型的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Android <span class="title">getMyGenericClass</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        MyGenericClass&lt;String&gt; mgc = <span class="keyword">new</span> MyGenericClass&lt;&gt;();</span><br><span class="line">        mgc.setMyGenericClass(<span class="string">"MI"</span>);</span><br><span class="line">        String name = mgc.getMyGenericClass();</span><br><span class="line">        System.out.println(name);<span class="comment">//MI</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="泛型通配符"><a href="#泛型通配符" class="headerlink" title="泛型通配符"></a>泛型通配符</h2><blockquote><p>当使用泛型类或者接口时，传递的数据中，泛型类型不确定，可以通过通配符&lt;?&gt;表示。但是一旦使用泛型的通配符后，只能使用<code>Object</code>类中的共性方法，集合中元素自身方法无法使用。</p></blockquote><h3 id="通配符基本使用"><a href="#通配符基本使用" class="headerlink" title="通配符基本使用"></a>通配符基本使用</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="comment">//?表示可以接受任何类型类型，Integer String Long 等等，都可以放到这里</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getCollection</span><span class="params">(Collection&lt;?&gt; coll)</span> </span>{</span><br><span class="line">        System.out.println(coll);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Collection&lt;Integer&gt; coll1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Collection&lt;String&gt; coll2 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        coll1.add(<span class="number">21</span>);</span><br><span class="line">        coll2.add(<span class="string">"jason"</span>);</span><br><span class="line"></span><br><span class="line">        getCollection(coll1);<span class="comment">//[21]</span></span><br><span class="line">        getCollection(coll2);<span class="comment">//[jason]</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>泛型不存在继承关系，<code>Collection&lt;Objet&gt; list = new ArrayList&lt;String&gt;();</code>这种写法是错误的。</p></blockquote><h3 id="通配符高级使用——受限泛型"><a href="#通配符高级使用——受限泛型" class="headerlink" title="通配符高级使用——受限泛型"></a>通配符高级使用——受限泛型</h3><p>之前设置泛型的时候，实际上是可以任意设置的，只要是类就可以设置。但是在<code>Java</code>的泛型中可以指定一个泛型的<strong>上限</strong>和<strong>下限</strong>。</p><ol><li><strong>泛型的上限</strong><ul><li>格式：<code>类型名称&lt;? extends E&gt; 对象名称</code></li><li>意义：<code>只能接受E类型及其子类型</code></li></ul></li><li><strong>泛型的下限</strong><ul><li>格式：<code>类型名称&lt;? super E&gt; 对象名称 </code></li><li>意义：<code>只能接收E类型及其父类型</code></li></ul></li></ol><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="comment">//泛型上限</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getCollection</span><span class="params">(Collection&lt;? extends Number&gt; coll)</span> </span>{</span><br><span class="line">        System.out.println(coll);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//泛型下限</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getCollection2</span><span class="params">(Collection&lt;? <span class="keyword">super</span> Number&gt; coll)</span> </span>{</span><br><span class="line">        System.out.println(coll);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//分别定义四个泛型为Integer、String、Number、Object的ArrayList集合</span></span><br><span class="line">       Collection&lt;Integer&gt; coll1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       Collection&lt;String&gt; coll2 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       Collection&lt;Number&gt; coll3 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       Collection&lt;Object&gt; coll4 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//getCollection()接收的参数集合的泛型必须是Number类型或者Number类型的子类</span></span><br><span class="line">        getCollection(coll1);</span><br><span class="line">        getCollection(coll2);<span class="comment">//报错，因为String不是Number类型或者Number类型的子类</span></span><br><span class="line">        getCollection(coll3);</span><br><span class="line">        getCollection(coll4);<span class="comment">// 报错，因为Object不是Number类型或者Number类型的子类</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//getCollection2()接收的参数集合泛型必须是Number类型或者Number类型的父类</span></span><br><span class="line">        getCollection2(coll1);<span class="comment">//报错，因为Integer不是Number类型或者Number类型的父类</span></span><br><span class="line">        getCollection2(coll2);<span class="comment">//报错，因为String不是Number类型或者Number类型的父类</span></span><br><span class="line">        getCollection2(coll3);</span><br><span class="line">        getCollection2(coll4);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Iterator迭代器</title>
      <link href="2020/10/18/39_Iterator%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
      <url>2020/10/18/39_Iterator%E8%BF%AD%E4%BB%A3%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Iterator迭代器"><a href="#Iterator迭代器" class="headerlink" title="Iterator迭代器"></a>Iterator迭代器</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在程序开发中，经常需要遍历集合中的所有元素。针对这种需求，JDK专门提供了一个接口<code>java.util.Iterator</code>。<code>Iteraotr</code>接口也是<code>Java</code>集合中的一员，但它与<code>collection</code>、<code>Map</code>接口有所不同，<code>Collection</code>接口与<code>Map</code>接口主要用于存储元素，而<code>Iterator</code>主要用于迭代方法（即遍历）<code>Collection</code>中的元素，因此<code>Iterator</code>对象也被称为迭代器。</p><blockquote><p><strong>迭代</strong>：即<code>Collection</code>集合元素的通用获取方法。在取元素之前先要判断集合中有没有元素，如果有，就把这个元素取出来。继续再判断，如果还有就再取出来。一直把集合中的所有元素全部取出。这种取出方式专业术语称为迭代。</p></blockquote><h2 id="获取迭代器"><a href="#获取迭代器" class="headerlink" title="获取迭代器"></a>获取迭代器</h2><p>想要遍历<code>Collection</code>集合，那么就要获取该集合迭代器完成迭代操作，下面介绍一下获取迭代器的方法：</p><ul><li><p><code>public Iterator iterator()</code>：获取集合对应的迭代器，用来遍历集合中的元素的。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个ArrayList对象</span></span><br><span class="line">Collection&lt;String&gt; list1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        </span><br><span class="line"><span class="comment">//获取ArrayList集合的迭代器</span></span><br><span class="line">Iterator&lt;String&gt; iterator = list1.iterator();</span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><ul><li><code>boolean hashNex()</code>：判断集合中是否还有元素可以迭代。</li><li><code>E next()</code>：返回迭代的下一个元素。</li></ul><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//创建一个ArrayList对象</span></span><br><span class="line">        Collection&lt;String&gt; list1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向集合中添加元素</span></span><br><span class="line">        list1.add(<span class="string">"first"</span>);</span><br><span class="line">        list1.add(<span class="string">"second"</span>);</span><br><span class="line">        list1.add(<span class="string">"third"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取ArrayList集合的迭代器</span></span><br><span class="line">        Iterator&lt;String&gt; iterator = list1.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//结合Iterator类的hasNext()方法和next()方法 遍历集合</span></span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) {</span><br><span class="line">            String s = iterator.next();</span><br><span class="line">            System.out.print(s + <span class="string">"; "</span>);<span class="comment">//first; second; third; </span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>在进行集合元素取出时，如果集合中已经没有元素了，还在继续使用迭代器的<code>next</code>方法，将会发生<code>java.util.NoSuchElementException</code>没有这样的元素异常提醒。</p></blockquote><h2 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h2><p>增强<code>for</code>循环，也称为<code>for each</code>循环，是JDK1.5以后出来的一个高级<code>for</code>循环，专门用来遍历数组和集合的。它的内部原理其实是个<code>Iterator</code>迭代器，所以在遍历的过程中，不能对集合中的元素进行增删操作。</p><p><strong>格式如下：</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (元素的数据类型 变量名 : Collection集合 or 数组) {</span><br><span class="line">    <span class="comment">//EXEC statement</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//创建一个ArrayList对象</span></span><br><span class="line">        Collection&lt;String&gt; list1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向集合中添加元素</span></span><br><span class="line">        list1.add(<span class="string">"first"</span>);</span><br><span class="line">        list1.add(<span class="string">"second"</span>);</span><br><span class="line">        list1.add(<span class="string">"third"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用foreach遍历集合</span></span><br><span class="line">        <span class="keyword">for</span> (String s: list1) {</span><br><span class="line">            System.out.print(s + <span class="string">"; "</span>);<span class="comment">//first; second; third; </span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p> 注：它用于遍历<code>Collection</code>和数组。通常只进行遍历元素，不要在遍历的过程中对集合元素进行增删操作！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Collection集合</title>
      <link href="2020/10/17/38_Collection%E9%9B%86%E5%90%88/"/>
      <url>2020/10/17/38_Collection%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h1 id="Collection集合"><a href="#Collection集合" class="headerlink" title="Collection集合"></a>Collection集合</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>集合是java中提供的一种可以存储多个数据的容器。</p><p><strong>既然集合和数组都是容器，它们有什么区别呢？</strong></p><ul><li>数组的长度是固定的；集合的长度是可变的。</li><li>数组中存储的是同一类型的元素，可以存储基本数据类型值。集合存储的都是对象，而且对象的类型可以不一致。在开发中一般当对象多的时候，应使用集合进行存储。</li></ul><h2 id="集合框架"><a href="#集合框架" class="headerlink" title="集合框架"></a>集合框架</h2><p>集合按照其存储结构可以分为两大类：</p><ul><li>单列集合<code>java.util.Collection</code></li><li>双列集合<code>java.util.Map</code></li></ul><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201017232849.jpg"></p><h2 id="Collection特点"><a href="#Collection特点" class="headerlink" title="Collection特点"></a>Collection特点</h2><p><code>Collection</code>单列集合类的根接口，用于存储一系列符合某种规则的元素。它有两个重要的子接口，分别是：</p><ol><li><code>java.util.List</code>：<ul><li>特点是元素有序、元素可重复。</li><li>主要实现类有<code>java.util.ArrayList</code>、<code>java.util.LinkedList</code>、<code>java.util.Vector</code></li></ul></li><li><code>java.util.Set</code>：<ul><li>特点是元素无序，而且不可重复。</li><li>主要实现类有<code>java.util.HashSet</code>、<code>java.util.TreeSet</code>、<code>java.util.LinkedHashSet</code></li></ul></li></ol><h2 id="Collection常用功能"><a href="#Collection常用功能" class="headerlink" title="Collection常用功能"></a>Collection常用功能</h2><blockquote><p><code>collection</code>是所有单列集合的父接口，因此在<code>Collection</code>中定义了单列集合<code>List</code>和<code>Set</code>通用的一些方法，这些方法可用于操作所有的单列集合。方法如下：</p></blockquote><ul><li><code>boolean add(E e)</code>：把给定的对象添加到当前集合末尾。</li><li><code>void clear()</code>：清空集合中所有的元素。</li><li><code>boolean remove(E e)</code>：把给定的对象在当前集合中删除。</li><li><code>boolean contains(E e)</code>：判断当前集合中是否包含给定的对象。</li><li><code>boolean isEmpty()</code>：判断当前集合是否为空。</li><li><code>int size()</code>：返回集合中元素的个数。</li><li><code>Object[] toArray()</code>：把集合中的元素，存储到数组中。</li></ul><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//使用 多态+泛型 创建集合对象</span></span><br><span class="line">        Collection&lt;String&gt; c1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用boolean add()方法向集合中添加元素</span></span><br><span class="line">        c1.add(<span class="string">"first"</span>);</span><br><span class="line">        c1.add(<span class="string">"second"</span>);</span><br><span class="line">        <span class="keyword">boolean</span> b1 = c1.add(<span class="string">"third"</span>);</span><br><span class="line">        System.out.println(b1);<span class="comment">//true，表示添加成功</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用boolean contains(E e)判断集合是否包含e元素</span></span><br><span class="line">        <span class="keyword">boolean</span> b2 = c1.contains(<span class="string">"first"</span>);</span><br><span class="line">        System.out.println(b2);<span class="comment">//true，表示有此元素</span></span><br><span class="line">        <span class="keyword">boolean</span> b3 = c1.contains(<span class="string">"one"</span>);</span><br><span class="line">        System.out.println(b3);<span class="comment">//false, 表示没有包含此元素</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用boolean remove(E e)删除在集合中的e元素</span></span><br><span class="line">        <span class="keyword">boolean</span> b4 = c1.remove(<span class="string">"third"</span>);</span><br><span class="line">        System.out.println(b4);<span class="comment">//true,表示删除成功</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用int size()来获取集合中元素的数量</span></span><br><span class="line">        <span class="keyword">int</span> num = c1.size();</span><br><span class="line">        System.out.println(num);<span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用Object[] toArray()将集合转换为一个Object数组</span></span><br><span class="line">        Object[] o = c1.toArray();</span><br><span class="line">        <span class="comment">//遍历数组</span></span><br><span class="line">        <span class="keyword">for</span> (Object i: o) {</span><br><span class="line">            System.out.print(i + <span class="string">"; "</span>);<span class="comment">//first; second;</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用void clear()清空集合</span></span><br><span class="line">        c1.clear();</span><br><span class="line"></span><br><span class="line">        System.out.println();<span class="comment">//换行</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用boolean isEmpty()判断集合是否为空</span></span><br><span class="line">        <span class="keyword">boolean</span> b5 = c1.isEmpty();</span><br><span class="line">        System.out.println(b5);<span class="comment">//true</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>有关<code>collection</code>中的方法可不止上面这些，其他方法可以自行查看API学习。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>包装类</title>
      <link href="2020/10/17/37_%E5%8C%85%E8%A3%85%E7%B1%BB/"/>
      <url>2020/10/17/37_%E5%8C%85%E8%A3%85%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Java提供了两个类型系统：基本类型与引用类型。使用基本类型在于效率。然而很多情况，会创建对象使用因为对象可以做更多的功能。如果想要我们的基本类型像对象一样操作，就可以使用基本类型对应的包装类。如下：</p><table><thead><tr><th align="center">基本类型</th><th align="center">包装类</th></tr></thead><tbody><tr><td align="center">byte</td><td align="center">Byte</td></tr><tr><td align="center">short</td><td align="center">Short</td></tr><tr><td align="center">int</td><td align="center">Integer</td></tr><tr><td align="center">long</td><td align="center">Long</td></tr><tr><td align="center">float</td><td align="center">Float</td></tr><tr><td align="center">double</td><td align="center">Double</td></tr><tr><td align="center">char</td><td align="center">Character</td></tr><tr><td align="center">boolean</td><td align="center">Boolean</td></tr></tbody></table><h2 id="装箱与拆箱"><a href="#装箱与拆箱" class="headerlink" title="装箱与拆箱"></a>装箱与拆箱</h2><p>基本类型与对应的包装类对象之间，来回装换的过程称为“装箱”、“拆箱”。</p><ul><li>装箱：从基本数据类型转换为对应的包装类对象。</li><li>拆箱：从包装类对象转换为对应的基本数据类型。</li></ul><h2 id="自动装箱与自动拆箱"><a href="#自动装箱与自动拆箱" class="headerlink" title="自动装箱与自动拆箱"></a>自动装箱与自动拆箱</h2><p>由于我们经常要做基本类型与包装类之间的转换，从JDK1.5开始，基本类型与包装类的装箱、拆箱动作可以自动完成。例如：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自动装箱</span></span><br><span class="line">Integer one = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自动拆箱</span></span><br><span class="line">one += <span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><blockquote><p>注：构造方法只以Interger包装类为例，其他包装类与其相似。</p></blockquote><ul><li><code>Interger(int value)</code>：构造一个新分配的Integer对象，该对象表示指定的int值。</li><li><code>Integer(String s)</code>：构造一个新分配的Integer对象，该对象表示由String参数指示的int值。</li></ul><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Integer(int value)</span></span><br><span class="line">Integer one = <span class="keyword">new</span> Integer(<span class="number">100</span>);<span class="comment">//有了自动装箱，此构造方法已过时</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//Integer(String value)</span></span><br><span class="line">Integer two = <span class="keyword">new</span> Integer(<span class="string">"200"</span>);<span class="comment">//有了自动装箱，此构造方法也已过时</span></span><br></pre></td></tr></tbody></table></figure><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><blockquote><p>注：常用方法只以Interger包装类为例，其他包装类与其相似。</p></blockquote><h3 id="装箱方法"><a href="#装箱方法" class="headerlink" title="装箱方法"></a>装箱方法</h3><ul><li><code>static Integer valueOf(int i)</code>：返回一个表示指定的 int 值的 Integer 实例。这个方法和构造方法<code>Integer(int value)</code>功能一致，都是将int类型的数据转化为Integer类型的对象。</li><li><code>static Integer valueOf(String s)</code>：返回保存指定的 String 的值的 Integer 对象。这个方法和构造方法<code>Integer(int String)</code>功能一致，都是将String类型的数字字符串转化为Integer类型的对象。</li><li><code>static Integer valueOf(String s, int radix)</code>：返回一个 Integer 对象，该对象中保存了用第二个参数提供的基数（进制）进行解析时从指定的 String 中提取的值。</li></ul><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//static Integer valueOf(int i)</span></span><br><span class="line">Integer one = Integer.valueOf(<span class="number">21</span>);</span><br><span class="line">System.out.println(one);<span class="comment">//21</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//static Integer valueOf(String s)</span></span><br><span class="line">Integer two = Integer.valueOf(<span class="string">"23"</span>);</span><br><span class="line">System.out.println(two);<span class="comment">//23</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//static Integer valueOf(String s, int radix)</span></span><br><span class="line">Integer three = Integer.valueOf(<span class="string">"0101"</span>,<span class="number">2</span>);</span><br><span class="line">System.out.println(three);<span class="comment">//5</span></span><br></pre></td></tr></tbody></table></figure><h3 id="拆箱方法"><a href="#拆箱方法" class="headerlink" title="拆箱方法"></a>拆箱方法</h3><ul><li><p><code>int intValue()</code>：将调用者Integer对象转换为int类型返回。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用static integer valueOf(int i)创建一个Integer对象</span></span><br><span class="line">Integer one = Integer.valueOf(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用int intValue(),将调用者Integer对象转换为int类型返回</span></span><br><span class="line"><span class="keyword">int</span> first = one.intValue();</span><br><span class="line">System.out.println(first);<span class="comment">//100</span></span><br></pre></td></tr></tbody></table></figure><h3 id="基本类型转String类型"><a href="#基本类型转String类型" class="headerlink" title="基本类型转String类型"></a>基本类型转String类型</h3></li></ul><ol><li><p>先将基本数据类型转为对应的包装类。然后使用<code>String toString()</code>，将其他包装转换为String类型</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先利用自动装箱，将基本数据类型转换为对应的包装类</span></span><br><span class="line">Integer one = <span class="number">100</span>;</span><br><span class="line"><span class="comment">//使用toString()，将包装类转化为String类</span></span><br><span class="line">String s = one.toString();</span><br></pre></td></tr></tbody></table></figure></li><li><p><code>static String valueOf(int i)</code>：将传入的基本数据类型转化为String类型</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String s = String.valueOf(<span class="number">1</span>);</span><br></pre></td></tr></tbody></table></figure></li><li><p>基本数据类型直接用 + 与 “” 相连即可。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="number">1</span> + <span class="string">""</span>;</span><br></pre></td></tr></tbody></table></figure><h3 id="String类型转基本数据类型"><a href="#String类型转基本数据类型" class="headerlink" title="String类型转基本数据类型"></a>String类型转基本数据类型</h3></li></ol><p>除了Character类之外，其他所有包装类都具有<code>parseXxx</code>静态方法，可以将字符串参数转化为对应的基本数据类型：</p><ul><li><p><code>static int parseInt(String s)</code>：将字符串参数转换为对应的int基本类型。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> one = Integer.parseInt(<span class="string">"1"</span>);</span><br></pre></td></tr></tbody></table></figure><blockquote><p>如果字符串参数的内容无法正确转化为对应的基本类型，则会抛出<code>java.lang.NumberFormatException</code>异常。</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
            <tag> 常用类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>StringBuilder类</title>
      <link href="2020/10/17/36_StringBuilder%E7%B1%BB/"/>
      <url>2020/10/17/36_StringBuilder%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="StringBuilder类"><a href="#StringBuilder类" class="headerlink" title="StringBuilder类"></a>StringBuilder类</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>由于<code>String</code>类的对象内容不可改变，所以每当进行字符串拼接时，总是会在内存中创建一个新的对象。例如：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Review01</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//第一个字符串"jason"</span></span><br><span class="line">        String s1 = <span class="string">"jason"</span>;</span><br><span class="line">        <span class="comment">//第二个字符串"Spring"</span></span><br><span class="line">        s1 += <span class="string">"Spring"</span>;</span><br><span class="line">        <span class="comment">//第三个字符串"jasonSpring"</span></span><br><span class="line">        System.out.println(s1);<span class="comment">//jasonSpring</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在<code>API</code>中对<code>String</code>类有这样的描述：字符串是常量，它们的值在创建后不能被更改。</p><p>根据这句话分析我们的代码，其实总共产生了三个字符串对象，即<code>"jason"</code>、<code>Spring</code>、<code>jasonSpring</code>。引用变量<code>s1</code>首先指向<code>jason</code>对象，最终指向拼接出来的新字符串对象，即<code>jasonSpring</code>。</p><p>由此可知，如果对字符串进行拼接操作，每次拼接都会构建一个新的<code>String</code>对象。即耗时，又浪费空间。为了解决这一问题，可以使用<code>java.lang.StringBuilder</code>类。</p><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><ul><li><code>StringBuilder()</code>：构造一个空的<code>StringBuilder</code>容器。</li><li><code>StringBuilder(String str)</code>：构造一个<code>StringBuilder</code>容器，并将参数的字符串添加进去。</li></ul><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//无参构造</span></span><br><span class="line">        StringBuilder sb1 = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        System.out.println(sb1);<span class="comment">//【空】</span></span><br><span class="line">        <span class="comment">//有参构造</span></span><br><span class="line">        StringBuilder sb2 = <span class="keyword">new</span> StringBuilder(<span class="string">"jason"</span>);</span><br><span class="line">        System.out.println(sb2);<span class="comment">//jason</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><ul><li><p><code>StringBuilder append(...)</code>：添加任意类型数据的字符串形式，并返回当前对象自身。</p><p>append()具有多种重载形式，可以接收任意类型的参数。任何数据作为参数都会将对应的字符串内容添加到<code>StringBuilder</code>中。例如：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//创建一个StringBuilder对象</span></span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="comment">//使用StringBuilder类里面的append()来添加其他对象到字符串里面</span></span><br><span class="line">        StringBuilder builder1 = builder.append(<span class="number">100</span>);</span><br><span class="line">        <span class="comment">//判断调用append()方法后返回的是不是对象自身</span></span><br><span class="line">        System.out.println(builder == builder1);<span class="comment">//true</span></span><br><span class="line">        <span class="comment">//append()还可以添加任意类型的数据到StringBuilder对象里面</span></span><br><span class="line">        builder.append(<span class="keyword">true</span>);</span><br><span class="line">        builder.append(<span class="string">"jason"</span>);</span><br><span class="line">        builder.append(<span class="keyword">new</span> Person());</span><br><span class="line">        System.out.println(builder);<span class="comment">//100truejasonPerson@70177ecd</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//在我们开发中，遇到调用一个方法后，返回一个对象，然后使用返回的对象继续调用方法。</span></span><br><span class="line">        <span class="comment">//这种时候，我们就可以采用“链式编程”，代码如下：</span></span><br><span class="line">        StringBuilder builder2 = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        builder2.append(<span class="string">"Jason"</span>).append(<span class="number">21</span>).append(<span class="keyword">true</span>);</span><br><span class="line">        System.out.println(builder2);<span class="comment">//Jason21true</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个Person类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p><code>StringBuilde</code>已经覆盖重写了<code>Object</code>当中的<code>toString</code>方法。</p></blockquote></li><li><p>toString()</p><p>通过<code>toString()</code>，<code>StringBuilder</code>对象将会转换为不可变的<code>String</code>对象。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder(<span class="string">"jason"</span>);</span><br><span class="line">        <span class="comment">//使用toString()方法将StringBuilder对象转化为String对象</span></span><br><span class="line">        String string = builder.toString();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h2><p>由于 StringBuilder 相较于 StringBuffer 有速度优势，<strong>所以多数情况下建议使用 StringBuilder 类</strong>。</p><p>然而在应用程序要求线程安全的情况下，则必须使用 StringBuffer 类。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
            <tag> 常用类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>System类</title>
      <link href="2020/10/17/35_System%E7%B1%BB/"/>
      <url>2020/10/17/35_System%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>java.lang.System</code>类中提供了大量的静态方法，可以获取与系统相关的信息或系统级操作。</p><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><h3 id="currentTimeMillis"><a href="#currentTimeMillis" class="headerlink" title="currentTimeMillis()"></a>currentTimeMillis()</h3><p><code>static long currentTimeMillis()</code>：返回以毫秒为单位的当前时间。</p><p>实际上，<code>currentTimeMillis()</code>方法就是获取当前系统时间与1970年01月01日00:00点之间的毫秒差值。</p><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//获取当前系统时间毫秒值</span></span><br><span class="line">        <span class="keyword">long</span> time = System.currentTimeMillis();</span><br><span class="line">        System.out.println(time);<span class="comment">//1602940203176</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="arraycopy"><a href="#arraycopy" class="headerlink" title="arraycopy()"></a>arraycopy()</h3><p><code>static void arraycopy(Object src, int srcPos, Object dest, in destPost, int length)</code>：将数组中指定的数据拷贝到另一个数组中。</p><p>数组的拷贝动作是系统级的，性能很高。<code>System.arraycopy</code>方法具有5个参数，含义分别为：</p><table><thead><tr><th align="center">参数序号</th><th align="center">参数名称</th><th align="center">参数类型</th><th align="center">参数含义</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">src</td><td align="center">Object</td><td align="center">源数组</td></tr><tr><td align="center">2</td><td align="center">srcPos</td><td align="center">int</td><td align="center">源数组索引起始位置</td></tr><tr><td align="center">3</td><td align="center">dest</td><td align="center">Object</td><td align="center">目标数组</td></tr><tr><td align="center">4</td><td align="center">destPos</td><td align="center">int</td><td align="center">目标数组索引起始位置</td></tr><tr><td align="center">5</td><td align="center">length</td><td align="center">int</td><td align="center">复制元素个数</td></tr></tbody></table><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span>[] src = <span class="keyword">new</span> <span class="keyword">int</span>[]{<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>};</span><br><span class="line">        <span class="keyword">int</span>[] dest = <span class="keyword">new</span> <span class="keyword">int</span>[]{<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>};</span><br><span class="line">        <span class="comment">//将数组中指定的数据拷贝到另一个数组中。</span></span><br><span class="line">        System.arraycopy(src,<span class="number">1</span>,dest,<span class="number">0</span>,<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//遍历数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i: dest) {</span><br><span class="line">            System.out.print(i + <span class="string">"; "</span>);<span class="comment">//2; 3; 4; 9; 10; </span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
            <tag> 常用类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DateFormat类</title>
      <link href="2020/10/17/34_DateFormat%E7%B1%BB/"/>
      <url>2020/10/17/34_DateFormat%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="DateFormat类"><a href="#DateFormat类" class="headerlink" title="DateFormat类"></a>DateFormat类</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>java.text.DateFormat</code>是日期/时间格式化子类的抽象父类，我们通过这个类可以帮我们完成日期和文本之间的转换，也就是可以在<code>Date</code>对象与<code>String</code>对象之间进行来回转换。</p><blockquote><p><strong>格式化</strong>：按照指定的格式，从<code>Date</code>对象转换为<code>String</code>对象。</p><p><strong>解析</strong>：按照指定的格式，从<code>String</code>对象转换为<code>Date</code>对象。</p></blockquote><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>由于<code>DateFormat</code>为抽象类，不能直接使用，所以需要用到它的子类<code>java.text.SimpleDateFormat</code>。这个类需要一个模式（格式）来指定格式化或解析的标准。</p><p><code>java.text.SimpleDateFormat</code>的构造方法为：</p><ul><li><code>public SimpleDateFormat(String pattern)</code>：用给定的模式和默认语言环境的日期格式符号构造<code>SimpleDateFormat</code>对象。</li></ul><blockquote><p>参数<code>pattern</code>是一个字符串，代表日期时间的自定义格式。</p></blockquote><h3 id="pattern格式规则"><a href="#pattern格式规则" class="headerlink" title="pattern格式规则"></a>pattern格式规则</h3><table><thead><tr><th align="center">标识字母</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">y</td><td align="center">年</td></tr><tr><td align="center">M</td><td align="center">月</td></tr><tr><td align="center">d</td><td align="center">日</td></tr><tr><td align="center">H</td><td align="center">时</td></tr><tr><td align="center">m</td><td align="center">分</td></tr><tr><td align="center">s</td><td align="center">秒</td></tr><tr><td align="center">S</td><td align="center">毫秒</td></tr></tbody></table><blockquote><p>备注：更详细的格式规则，可以参考<code>SimpleDateFormat</code>类的<code>API</code>文档。</p></blockquote><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss SSS"</span>);</span><br></pre></td></tr></tbody></table></figure><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><ul><li><code>String format(Date date)</code>：将Date对象格式化为字符串。</li><li><code>Date parse(String source)</code>：将字符串解析为Date对象。（需要进行异常处理）</li></ul><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//使用当前时间创建一个日期对象</span></span><br><span class="line">        Date d1 = <span class="keyword">new</span> Date();</span><br><span class="line">        <span class="comment">//创建一个SimpleDateFormat对象</span></span><br><span class="line">        DateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">        <span class="comment">//调用format()方式格式化传入的日期对象</span></span><br><span class="line">        String timeString = sdf.format(d1);</span><br><span class="line">        System.out.println(timeString);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义一个表达日期的字符串</span></span><br><span class="line">        String DateString = <span class="string">"1999年08月22日"</span>;</span><br><span class="line">        <span class="comment">//创建一个SimpleDateFormat对象</span></span><br><span class="line">        DateFormat sdf2 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日"</span>);</span><br><span class="line">        <span class="comment">//调用parse()方式解析传入的字符串</span></span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            Date d2 = sdf2.parse(DateString);</span><br><span class="line">        } <span class="keyword">catch</span> (ParseException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>西方周日是一周的开始，用数字0表示。</p><p>在<code>Calendar</code>类中，月份的表示是0-11代表1-12月。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
            <tag> 常用类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Date类</title>
      <link href="2020/10/17/31_Date%E7%B1%BB/"/>
      <url>2020/10/17/31_Date%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>java.util.Date</code>类表示特定的瞬间，精确到毫秒。</p><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>继续查阅<code>Date</code>类的 描述，发现<code>Date</code>拥有多个构造函数，只是部分已经过时，但是其中未为过时的构造函数可以把毫秒值转成日期对象。</p><ul><li><code>Date()</code>：分配<code>Date</code>对象并初始化此对象，以表示分配它的时间（精确到毫秒）</li><li><code>Date(long date)</code>：分配<code>Date</code>对象并初始化此对象，以表示自从标准基准时间（称为“历元epoch”，即1970年1月1日00:00:00 GMT）以来指定的毫秒数。</li></ul><blockquote><p>由于我们处于东八区，所以我们的基准时间为1970年1月1日8时0分0秒</p></blockquote><p>简单的来说：使用无参构造，可以自动设置当前系统时间的毫秒时刻；指定<code>long</code>类型的构造参数，可以自定义毫秒时刻。</p><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//使用当前时间创建日期对象</span></span><br><span class="line">        Date d1 = <span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(d1);<span class="comment">//Sat Oct 17 19:16:48 CST 2020</span></span><br><span class="line">        <span class="comment">//使用指定的long时间创建日期对象</span></span><br><span class="line">        Date d2 = <span class="keyword">new</span> Date(<span class="number">1000</span>);</span><br><span class="line">        System.out.println(d2);<span class="comment">//Thu Jan 01 08:00:01 CST 1970</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>在使用<code>println</code>方法时，会自动调用<code>Date</code>类的<code>toString</code>方法。<code>Date</code>类对<code>Object</code>类中的<code>toString</code>方法进行了覆盖重写，所以结果为指定格式的字符串。</p></blockquote><h2 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h2><p><code>Date</code>类中的多数方法已经过时，我们目前需要学习的只有一种：</p><ul><li><code>long getTime()</code>：把日期对象转换成对应的时间毫秒值</li></ul><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//使用当前时间使用创建日期对象</span></span><br><span class="line">        Date d1 = <span class="keyword">new</span> Date();</span><br><span class="line">        <span class="comment">//将日期对象转换成对应的时间毫秒值</span></span><br><span class="line">        <span class="keyword">long</span> num1 = d1.getTime();</span><br><span class="line">        System.out.println(num1);<span class="comment">//1602933856021</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用指定时间创建日期对象</span></span><br><span class="line">        Date d2 = <span class="keyword">new</span> Date(<span class="number">1000</span>);</span><br><span class="line">        <span class="comment">//将日期对象转换成对应的时间毫秒值</span></span><br><span class="line">        <span class="keyword">long</span> num2 = d2.getTime();</span><br><span class="line">        System.out.println(num2);<span class="comment">//1000</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
            <tag> 常用类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Object类</title>
      <link href="2020/10/17/30_Object%E7%B1%BB/"/>
      <url>2020/10/17/30_Object%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ol><li><p><code>java.lang.object</code>类是Java语言中的根类，即所有类的父类。它中描述的所有方法，其他子类都可以使用。</p></li><li><p>如果一个类没有特别指定父类，则默认继承<code>Object</code>类。在对象实例化的时候，最终找的父类也就是<code>Object</code>。</p></li><li><p>根据JDK源代码及Object类的API文档，<code>Object</code>类当中包含的方法有11个。我们主要学习其中的2个。</p><ul><li><code>public String toString() </code>：返回该对象的字符串表示。</li><li><code>public boolean equal(Object obj)</code>：指示其他某个对象是否与此对象“相等”。</li></ul></li></ol><h2 id="toString方法"><a href="#toString方法" class="headerlink" title="toString方法"></a>toString方法</h2><h3 id="方法简述"><a href="#方法简述" class="headerlink" title="方法简述"></a>方法简述</h3><p><code>public String toString()</code>：返回该对象的字符串表示。</p><p><code>toString</code>方法返回该对象的字符串表示，其实该字符串内容就是<strong>对象的类型+@+内存地址值</strong>。</p><p>由于<code>toString</code>方法返回的结果是内存地址，而在开发中，经常需要按照对象的属性得到相应的字符串表达形式，因此也需要重写它。</p><h3 id="覆盖重写"><a href="#覆盖重写" class="headerlink" title="覆盖重写"></a>覆盖重写</h3><p>如果不希望使用<code>toString</code>方法的默认行为，则可以对它进行覆盖重写。</p><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//constructor</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对toString方法进行覆盖重写</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person{"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="equals方法"><a href="#equals方法" class="headerlink" title="equals方法"></a>equals方法</h2><h3 id="方法简述-1"><a href="#方法简述-1" class="headerlink" title="方法简述"></a>方法简述</h3><p><code>public boolean equals(Object obj)</code>：指示其他某个对象是否与此对象“相等”。</p><p>调用成员方法<code>equals()</code>并指定参数为另一个对象，则可以判断这两个对象是否是相同的。这里的“相同”有默认和自定义两种方式。</p><h3 id="默认地址比较"><a href="#默认地址比较" class="headerlink" title="默认地址比较"></a>默认地址比较</h3><p>如果没有覆盖重写<code>equals()</code>，那么<code>Object</code>类中默认进行的比较是<code>=</code>运算符的对象地址比较，只要不是同一个对象，结果必然为<code>false</code>。</p><h3 id="对象内容比较"><a href="#对象内容比较" class="headerlink" title="对象内容比较"></a>对象内容比较</h3><p>如果希望进行对象的内容比较，即所有或指定的部分成员变量相同就判定两个对象相同，则可以覆盖重写<code>equals()</code>。</p><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//constructor</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写equals()方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>{</span><br><span class="line">        <span class="comment">//若对象地址一致，则认为相同</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//若对象地址为null，或者类型信息不一致，则认为不相同</span></span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//强制类型转化</span></span><br><span class="line">        Person person = (Person) o;</span><br><span class="line">        <span class="comment">//要求基本类型相等，并且将引用类型交给java.util.Objects类的静态方法取用结果</span></span><br><span class="line">        <span class="keyword">return</span> age == person.age &amp;&amp;</span><br><span class="line">                Objects.equals(name, person.name);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
            <tag> 常用类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>匿名内部类</title>
      <link href="2020/10/17/29_%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB/"/>
      <url>2020/10/17/29_%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>匿名内部类是内部类的简化写法，它的本质是一个带具体实现的父类或者父接口的匿名的子类对象。</p><p>匿名内部类，可以把以下四步合成一步：</p><ol><li>定义子类</li><li>重写接口中的方法</li><li>创建子类对象</li><li>调用重写后的方法</li></ol><blockquote><p>匿名内部类必须继承一个父类或者实现一个父接口。</p></blockquote><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 父类名或者接口名() {</span><br><span class="line">    <span class="comment">//方法重写</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">//EXEC statement</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//等号左边是多态赋值，接口类型引用指向子类对象</span></span><br><span class="line">        <span class="comment">//等号右边是匿名内部类，定义并创建该接口的子类对象</span></span><br><span class="line">        Animal dog = <span class="keyword">new</span> Animal() {</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>{</span><br><span class="line">              System.out.println(<span class="string">"汪汪汪！"</span>);</span><br><span class="line">          }</span><br><span class="line">        };</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        dog.fly();<span class="comment">//汪汪汪！</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="进阶用法"><a href="#进阶用法" class="headerlink" title="进阶用法"></a>进阶用法</h2><p>通常在方法的形式参数是接口或是抽象类时，也可以将匿名内部类作为实参传入。代码如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//等号左边是多态赋值，接口类型引用指向子类对象</span></span><br><span class="line">        <span class="comment">//等号右边是匿名内部类，定义并创建该接口的子类对象</span></span><br><span class="line">        Animal dog = <span class="keyword">new</span> Animal() {</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>{</span><br><span class="line">              System.out.println(<span class="string">"汪汪汪！"</span>);</span><br><span class="line">          }</span><br><span class="line">        };</span><br><span class="line">        run(dog);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(Animal a)</span> </span>{</span><br><span class="line">        a.fly();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>以上两步可以简化为一步，代码如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//直接创建一个匿名内部类传入方法中</span></span><br><span class="line">        run(<span class="keyword">new</span> Animal() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>{</span><br><span class="line">                System.out.println(<span class="string">"汪汪汪！"</span>);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(Animal a)</span> </span>{</span><br><span class="line">        a.fly();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
            <tag> 内部类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内部类</title>
      <link href="2020/10/17/28_%E5%86%85%E9%83%A8%E7%B1%BB/"/>
      <url>2020/10/17/28_%E5%86%85%E9%83%A8%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>定义在类中方法外的类，被称为内部类。</p><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 外部类 </span>{</span><br><span class="line">    <span class="class"><span class="keyword">class</span> 内部类 </span>{</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="访问特点"><a href="#访问特点" class="headerlink" title="访问特点"></a>访问特点</h2><ol><li>内部类可以直接访问外部类的成员，包括私有成员。</li><li>外部类访问内部类的成员，需要通过内部类对象来访问。</li></ol><h2 id="创建内部类对象"><a href="#创建内部类对象" class="headerlink" title="创建内部类对象"></a>创建内部类对象</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在其他类中</span></span><br><span class="line">外部类名.内部类名 变量名 = <span class="keyword">new</span> 外部类().new 内部类();</span><br><span class="line"><span class="comment">//在外部类中，内部类外（可以省略外部类名）</span></span><br><span class="line">内部类名 变量名 = <span class="keyword">new</span> 外部类().new 内部类();</span><br></pre></td></tr></tbody></table></figure><blockquote><p>内部类仍然是一个独立的类，在编译之后会内部类会被编译成独立的.class文件，但是前面冠以外部类的类名和$符号</p><p>比如：<code>Person$Heart.class</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>权限修饰符</title>
      <link href="2020/10/17/27_%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
      <url>2020/10/17/27_%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li><code>public </code>——公共的</li><li><code>protected</code>——受保护的</li><li><code>default</code>——默认的</li><li><code>private</code>——私有的</li></ul><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><table><thead><tr><th align="center"></th><th align="center">public</th><th align="center">protected</th><th align="center">default</th><th align="center">private</th></tr></thead><tbody><tr><td align="center">同一个类中</td><td align="center">Yes</td><td align="center">Yes</td><td align="center">Yes</td><td align="center">Yes</td></tr><tr><td align="center">同一个包中</td><td align="center">Yes</td><td align="center">Yes</td><td align="center">Yes</td><td align="center"></td></tr><tr><td align="center">不同包的继承类</td><td align="center">Yes</td><td align="center">Yes</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">不同包的无关类</td><td align="center">Yes</td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><blockquote><p>【空】表示不能访问</p></blockquote><h2 id="权限使用建议"><a href="#权限使用建议" class="headerlink" title="权限使用建议"></a>权限使用建议</h2><ul><li>成员变量使用<code>private</code>，隐藏细节</li><li>成员方法使用<code>public</code>，方便调用方法</li><li>构造方法使用<code>public </code>，方便创建对象</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
            <tag> 权限 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Final关键字</title>
      <link href="2020/10/17/26_Final%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>2020/10/17/26_Final%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h1 id="Final关键字"><a href="#Final关键字" class="headerlink" title="Final关键字"></a>Final关键字</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>final</code>被译为<code>最终的，不可改变的</code>，在Java中作为一个关键字可以修饰类、方法、变量及参数。被<code>final</code>修饰的类、方法、变量及参数都会发生不同的变化，具体有以下几种：</p><ol><li>被<code>final</code>修饰的类，不能被继承。</li><li>被<code>final</code>修饰的方法，不能被重写。</li><li>被<code>final</code>修饰的变量，变量分为<code>局部变量</code>和<code>成员变量</code>。<ol><li>局部变量<ul><li>不能走重新赋值。</li></ul></li><li>成员变量<ul><li>因为成员变量会被赋予默认值，所有加上final后，声明之初就必须手动赋值，不然这个变量今后都是默认值了。</li><li>声明之初除了手动赋值外，还可以通过构造方法来赋值，但这二者必须选其一 。</li><li>如果选择通过构造方法来赋值，那么就必须保证类当中所有重载的构造方法，最终都会对final修饰的成员变量进行赋值。</li></ul></li></ol></li></ol><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><h3 id="final类"><a href="#final类" class="headerlink" title="final类"></a>final类</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//final class 类名 {}</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line">    <span class="comment">//EXEC statement</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="final方法"><a href="#final方法" class="headerlink" title="final方法"></a>final方法</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修饰符 final 返回值 方法名(参数列表) {}</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(<span class="keyword">boolean</span> b)</span> </span>{</span><br><span class="line">    <span class="comment">//EXEC statement</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="final变量"><a href="#final变量" class="headerlink" title="final变量"></a>final变量</h3><ol><li><p>局部变量</p><ul><li><p>局部变量——基本数据类型</p><p>局部变量中属于基本数据类型的，从声明开始只能被赋值一次，不可被第二次赋值。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//声明并进行第一次赋值</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> one = <span class="number">100</span>;</span><br><span class="line">        <span class="comment">//在声明时已经进行了第一次赋值了，进行第二次赋值时，报错</span></span><br><span class="line">        one = <span class="number">200</span>;<span class="comment">//Cannot assign a value to final variable 'one'</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>局部变量——引用数据类型</p><p>局部变量中属于引用数据类型的，从创建变量开始，就只能指向最初的那个对象地址，不能再次更改接收其他对象的地址。但是不影响对象内部内容的改变。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//创建一个Person类，并将Person类的对象地址赋值给被final修饰的man变量</span></span><br><span class="line">        <span class="keyword">final</span> Person man = <span class="keyword">new</span> Person();</span><br><span class="line">        <span class="comment">//尝试对man变量进行第二次赋值时，报错</span></span><br><span class="line">        man = <span class="keyword">new</span> Person(); <span class="comment">//Cannot assign a value to final variable 'man'</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//但是man变量所指向的Person对象内部的成员变量的值仍可以改变,</span></span><br><span class="line">        man.name = <span class="string">"JasonSpring"</span>;</span><br><span class="line">        man.age = <span class="number">23</span>;</span><br><span class="line">        man.gender = <span class="keyword">false</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个Person类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line">    <span class="comment">//定义三个成员变量，并为其赋值</span></span><br><span class="line">    String name = <span class="string">"Jason Li"</span>;</span><br><span class="line">    <span class="keyword">int</span> age = <span class="number">21</span>;</span><br><span class="line">    <span class="keyword">boolean</span> gender = <span class="keyword">true</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p>成员变量</p><p>成员变量涉及到初始化的问题，初始化有两种方式，并且只能二选一。</p><ul><li><p>显示初始化——即在成员变量声明的同时就给予赋值。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line">    <span class="comment">//定义之初就为其赋值</span></span><br><span class="line">    <span class="keyword">final</span> String NAME = <span class="string">"Jason Li"</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> AGE = <span class="number">21</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> DGENDER = <span class="keyword">true</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>构造方法初始化——先声明，然后使用有参构造器给变量赋值。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line">    <span class="comment">//定义变量，但不赋值</span></span><br><span class="line">    <span class="keyword">final</span> String NAME;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> AGE;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> GENDER;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//constructor 只创建有参构造器，强制对象创建之初就必须被赋予值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String NAME, <span class="keyword">int</span> AGE, <span class="keyword">boolean</span> GENDER)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.NAME = NAME;</span><br><span class="line">        <span class="keyword">this</span>.AGE = AGE;</span><br><span class="line">        <span class="keyword">this</span>.GENDER = GENDER;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2></li></ul></li></ol><p><code>final</code>修饰的的常量名，书写规范规定一般都大写</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows10与子系统文件互访</title>
      <link href="2020/10/17/3_Windows10%E4%B8%8E%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6%E4%BA%92%E8%AE%BF/"/>
      <url>2020/10/17/3_Windows10%E4%B8%8E%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6%E4%BA%92%E8%AE%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="Windows10环境下访问Ubuntu文件系统"><a href="#Windows10环境下访问Ubuntu文件系统" class="headerlink" title="Windows10环境下访问Ubuntu文件系统"></a>Windows10环境下访问Ubuntu文件系统</h2><p>Windows10环境下可以直接读取Ubuntu内的文件，但是不能往里面写入文件，在资源管理器中直接就可以访问。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\xxx1\AppData\Local\Packages\CanonicalGroupLimited.Ubuntu18.04onWindows_79rhkp1fndgsc\LocalState\rootfs\home\xxx2</span><br></pre></td></tr></tbody></table></figure><p>其中，xxx1表示windows系统的用户名，xxx2表示子系统Ubuntu的用户名。</p><h2 id="在子系统Ubuntu终端模式下访问Windows10文件系统"><a href="#在子系统Ubuntu终端模式下访问Windows10文件系统" class="headerlink" title="在子系统Ubuntu终端模式下访问Windows10文件系统"></a>在子系统Ubuntu终端模式下访问Windows10文件系统</h2><p>在终端模式下输入：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /mnt</span><br><span class="line">1</span><br></pre></td></tr></tbody></table></figure><p>/mnt文件夹中包含了Windows10中所有的盘符。<br>例如需要访问D盘，则只需输入：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /mnt/d</span><br></pre></td></tr></tbody></table></figure><blockquote><p><a href="http://www.w3school.com.cn">查看原文点这里</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 子系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微星B450开启虚拟化SVM</title>
      <link href="2020/10/17/4_%E5%BE%AE%E6%98%9FB450%E5%BC%80%E5%90%AF%E8%99%9A%E6%8B%9F%E5%8C%96SVM/"/>
      <url>2020/10/17/4_%E5%BE%AE%E6%98%9FB450%E5%BC%80%E5%90%AF%E8%99%9A%E6%8B%9F%E5%8C%96SVM/</url>
      
        <content type="html"><![CDATA[<p>进入bios，选择OC＞CPU Features-SVM Mode把disabled更改为enabled即可。</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201017114302.png"></p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201017114419.jpg"></p><blockquote><p>转载自：<a href="http://www.kaixinit.com/info/os/1303.html">http://www.kaixinit.com/info/os/1303.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bios </tag>
            
            <tag> 虚拟化 </tag>
            
            <tag> SVM </tag>
            
            <tag> 微星B450 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>卸载 hexo 插件</title>
      <link href="2020/10/17/5_%E5%8D%B8%E8%BD%BD-hexo-%E6%8F%92%E4%BB%B6/"/>
      <url>2020/10/17/5_%E5%8D%B8%E8%BD%BD-hexo-%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>曾经安装了某些hexo插件，某一天觉得是个累赘，那么如何卸载呢？</p><h3 id="查看插件"><a href="#查看插件" class="headerlink" title="查看插件"></a>查看插件</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">npm list</span><br><span class="line">├─┬ hexo-generator-tag@0.2.0</span><br><span class="line">│ ├── hexo-pagination@0.0.2 deduped</span><br><span class="line">│ └── object-assign@4.1.1 deduped</span><br><span class="line">├─┬ hexo-qiniu-sync@1.4.7</span><br><span class="line">│ ├─┬ chokidar@1.7.0</span><br><span class="line">│ │ ├─┬ anymatch@1.3.2</span><br><span class="line">│ │ │ ├── micromatch@2.3.11 deduped</span><br><span class="line">│ │ │ └── normalize-path@2.1.1 deduped</span><br><span class="line">│ │ ├── async-each@1.0.1</span><br></pre></td></tr></tbody></table></figure><p>　　我要删除的是<a href="mailto:_hexo-qiniu-sync@1.4">_hexo-qiniu-sync@1.4</a>.7_，我不仅用不到它，还觉得它浪费hexo启动时间：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">zhoupqcom:blog zhoupq$ blognew "卸载 hexo 插件"</span><br><span class="line"></span><br><span class="line">INFO  -----------------------------------------------------------</span><br><span class="line">INFO  qiniu state: online</span><br><span class="line">INFO  qiniu sync:  true</span><br><span class="line">INFO  qiniu local dir:  static</span><br><span class="line">INFO  qiniu url:   http://xxxxxxxxxxx.clouddn.com/static</span><br><span class="line">INFO  -----------------------------------------------------------</span><br><span class="line">INFO  Created: ~/zhoupq.com/blog/source/_posts/卸载 hexo 插件.md</span><br></pre></td></tr></tbody></table></figure><h3 id="npm-卸载"><a href="#npm-卸载" class="headerlink" title="npm 卸载"></a>npm 卸载</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-qiniu-sync@1.4.7</span><br></pre></td></tr></tbody></table></figure><h3 id="删除相关配置和文件"><a href="#删除相关配置和文件" class="headerlink" title="删除相关配置和文件"></a>删除相关配置和文件</h3><ul><li>配置文件中有PLugins模块，删除对应的插件设置；</li><li>删除 <em>node_modules/</em> 目录下对应的插件文件</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">zhoupqcom:blog zhoupq$ hexo clean</span><br><span class="line">ERROR Plugin load failed: hexo-qiniu-sync</span><br><span class="line">TypeError: Cannot read property 'secret_file' of undefined</span><br><span class="line">    at Object.&lt;anonymous&gt; (/Users/zhoupq/zhoupq.com/blog/node_modules/hexo-qiniu-sync/config.js:8:22)</span><br><span class="line">    at Module._compile (module.js:635:30)</span><br><span class="line">zhoupqcom:node_modules zhoupq$ rm -rf ./hexo-qiniu-sync</span><br><span class="line">zhoupqcom:blog zhoupq$ hexo server</span><br><span class="line">INFO  Start processing</span><br><span class="line">[Browsersync] Access URLs:</span><br><span class="line"> ----------------------------------</span><br><span class="line">          UI: http://localhost:3001</span><br><span class="line"> ----------------------------------</span><br><span class="line"> UI External: http://localhost:3001</span><br><span class="line"> ----------------------------------</span><br><span class="line">INFO  ---- START COPYING TAG CLOUD FILES ----</span><br><span class="line">INFO  ---- END COPYING TAG CLOUD FILES ----</span><br><span class="line">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></tbody></table></figure><blockquote><p><a href="https://www.dazhuanlan.com/2019/10/12/5da110cdd9a7b/?__cf_chl_jschl_tk__=ecbbdb310991188568a6d52a052d0a95ece74b5b-1602867587-0-AWTdZCJ64KcOykRx_GthhAl0nIr6noDp2_3UcVJAiFB989_Pstm1S4ZRCPWQSsIe72jyKHqdv6KZtAHytVHF1hyNK7HAcc3fbKUw2IapBUN0Dki2JMZA21aP_7RWRoDcXmduCDjR904sT-OCj8pdElFNEBb1g3udb1x2RUVz_zjg9PxIpg2u8v_wmQNdCR9uA2l4KnoQGTfd88qCqJx5-zKQCJYF3NaeHbmwSX9_AC-AMXfRkFcfpuUFOHmV5aNw8xB55-skeyhZuJhnjBgrCXdZxd7pG0-Rv0LUDbuzR8hT-ZNtA18bejF6KlVucJ2Rog">转载的原文链接</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo server报错TypeError: Cannot read property &#39;utcOffset&#39; of null解决方法</title>
      <link href="2020/10/17/8_Hexo-server%E6%8A%A5%E9%94%99TypeError-Cannot-read-property-utcOffset-of-null%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>2020/10/17/8_Hexo-server%E6%8A%A5%E9%94%99TypeError-Cannot-read-property-utcOffset-of-null%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>最近刚刚开始使用Hexo，新建了一篇article，运行hexo server时候总是报错Cannot read property ‘offset’ of null。</p><p>最后发现是因为手贱把_config.yml中的时区timezone改成了beijing哭笑不得。</p><p>解决办法就是把timezone改成 Asia/Shanghai 就好了。</p><p>亲测有效</p><blockquote><p>转载于:<a href="https://www.cnblogs.com/mmzuo-798/p/10510225.html">https://www.cnblogs.com/mmzuo-798/p/10510225.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 博客 </tag>
            
            <tag> 报错 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多态</title>
      <link href="2020/10/15/25_%E5%A4%9A%E6%80%81/"/>
      <url>2020/10/15/25_%E5%A4%9A%E6%80%81/</url>
      
        <content type="html"><![CDATA[<h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><strong>多态</strong>是继封装、继承之后，面向对象的第三大特征。是指同一行为，具有多个不同表现形式。</p><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">父类类型 变量名 = <span class="keyword">new</span> 子类对象();</span><br></pre></td></tr></tbody></table></figure><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cry</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"叫叫叫叫"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cry</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"喵喵喵喵"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">//多态演示</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Animal orangeCat = <span class="keyword">new</span> cat();</span><br><span class="line">        orangeCat.cry();<span class="comment">//喵喵喵喵</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>当使用多态方式调用方法时，首先检查父类中是否有该方法。如果没有，则编译错误；如果有，执行的是子类重写后的方法。</p></blockquote><h2 id="多态的好处"><a href="#多态的好处" class="headerlink" title="多态的好处"></a>多态的好处</h2><p>实际开发的过程中，父类类型作为方法形式参数，传递子类对象给方法，进行方法的调用，更能体现出多态的扩展性与便利性。</p><h2 id="多态的转型"><a href="#多态的转型" class="headerlink" title="多态的转型"></a>多态的转型</h2><p>多态的转型分为向上转型与向下转型两种。</p><h3 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h3><p><strong>向上转型</strong>是指<strong>子类类型向父类类型转换</strong>的这个过程，这个过程是默认的。当父类引用指向一个子类对象时，便是向上转型。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父类类型 变量名 = new 子类类型();</span></span><br><span class="line">Animal husky = <span class="keyword">new</span> Dog();</span><br></pre></td></tr></tbody></table></figure><h3 id="向下转型"><a href="#向下转型" class="headerlink" title="向下转型"></a>向下转型</h3><p><strong>向下转型</strong>是指<strong>父类类型向子类类型转换</strong>的过程，这个过程是强制的。一个已经向上转型的子类的对象，将父类引用转为子类引用。可以使用强制类型转换的格式，便是向下转型。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子类类型 变量名 = (子类类型) 父类型变量名；</span></span><br><span class="line">Dog d = (Dog) husky;</span><br></pre></td></tr></tbody></table></figure><h3 id="需要转型的原因"><a href="#需要转型的原因" class="headerlink" title="需要转型的原因"></a>需要转型的原因</h3><p>当使用多态方式调用方法时，首先检查父类中是否有该方法。如果没有，就立即编译报错。也就是说，当我们需要用已经向上转型的父类型变量名去调用子类中特有的方法时，就需要用到向下转型了。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"最爱吃骨头~"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">watchDoor</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"爱大门！"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Review01</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//向上转型</span></span><br><span class="line">        Animal a = <span class="keyword">new</span> Dog();</span><br><span class="line">        a.eat();<span class="comment">//最爱吃骨头~</span></span><br><span class="line">        <span class="comment">//向下转型</span></span><br><span class="line">        Dog d = (Dog)a;</span><br><span class="line">        d.watchDoor();<span class="comment">//爱大门！（调用这个方法，必须要向下转型，不然父类中没有watchDoor这个方法，编译时会报错）</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="转型异常和Instanceof关键字"><a href="#转型异常和Instanceof关键字" class="headerlink" title="转型异常和Instanceof关键字"></a>转型异常和Instanceof关键字</h3><p>转型的过程中，一不小心就会遇到这样的问题，请看如下代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//向上转型</span></span><br><span class="line">        Animal a = <span class="keyword">new</span> Cat();</span><br><span class="line">        a.eat();<span class="comment">//调用的是Cat的eat</span></span><br><span class="line">        <span class="comment">//向下转型</span></span><br><span class="line">        Dog d = (Dog)a;</span><br><span class="line">        d.watchDoor();<span class="comment">//Cat类中并没有watchDoor，运行报错</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这段代码可以通过编译，但是运行时，却报出了<code>ClassCastException</code>，类型转换异常！这是因为变量a所指向的对象是向上转型前的Cat对象，而Cat类中并没有watchDoor()。所以当你把由Cat类的对象向上转型而来的a，再向下转型为另一个Dog类的对象时，就会出现错误。</p><p>因此为了避免<code>ClassCastException</code>，Java提供了<code>instanceof</code>关键字，给引用变量做类型的效验。格式如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//变量名 instanceOf 数据类型</span></span><br><span class="line">a <span class="keyword">instanceof</span> Dog;<span class="comment">//如果变量a属于该Dog类型，则返回true.否则返回false.</span></span><br></pre></td></tr></tbody></table></figure><h2 id="多态访问成员变量"><a href="#多态访问成员变量" class="headerlink" title="多态访问成员变量"></a>多态访问成员变量</h2><p>多态情况下有两种方式来访问成员变量——直接<code>对象名称.属性名</code>、间接使用成员方法。</p><ol><li>直接<code>对象名称.属性名</code><ul><li>查询的结果是父类或父接口里的成员变量</li><li>若父类或或父接口里没有找到该值，则会继续向上查找，而不会去向下查找子类中是否有该变量。</li></ul></li><li>间接使用成员方法<ul><li>优先找子类里方法对应的成员变量</li><li>若子类里方法没有，才会继续向上查找。</li></ul></li></ol><h2 id="多态访问方法"><a href="#多态访问方法" class="headerlink" title="多态访问方法"></a>多态访问方法</h2><p>谁new的，就先访问谁的方法。没有，就继续向上寻找。</p><blockquote><p>多态访问 成员变量和方法 总结：</p><p>成员变量：编译看左边，运行还是看左边。</p><p>成员方法：编译看左边，运行开始看右边。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
            <tag> 概念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口内四种方法类型</title>
      <link href="2020/10/15/33_%E6%8E%A5%E5%8F%A3%E5%86%85%E5%9B%9B%E7%A7%8D%E6%96%B9%E6%B3%95%E7%B1%BB%E5%9E%8B/"/>
      <url>2020/10/15/33_%E6%8E%A5%E5%8F%A3%E5%86%85%E5%9B%9B%E7%A7%8D%E6%96%B9%E6%B3%95%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="接口内四种方法类型"><a href="#接口内四种方法类型" class="headerlink" title="接口内四种方法类型"></a>接口内四种方法类型</h1><p>JDK9及其以后，接口中有四种方法类型——抽象方法、静态方法、默认方法、私有方法。</p><h2 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li>使用<code>abstract</code>关键字修饰，修饰词可以省略，没有方法体。（JDK7及以前就存在）</li><li>接口中所有的抽象方法最终都要被其子类所重写。</li></ul><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//public abstract 返回值类型 方法名(参数列表);</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;<span class="comment">//public abstract，接口内可以省略</span></span><br></pre></td></tr></tbody></table></figure><h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><ul><li>使用<code>static</code>修饰，修饰语不可以省略。(JDK8出现)</li><li>接口中的静态方法，只能通过接口名调用。</li></ul><h3 id="格式-1"><a href="#格式-1" class="headerlink" title="格式"></a>格式</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//public static 返回值类型 方法名(参数列表){}</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">print</span><span class="params">(String s1)</span> </span>{<span class="comment">//public，接口内可以省略</span></span><br><span class="line"><span class="keyword">return</span> s1;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><ul><li>使用<code>default</code>修饰，修饰语不可以省略。(JDK8出现)</li><li>实现了接口的子类对象，即可以直接调用、也可以重写，接口的默认方法。</li></ul><h3 id="格式-2"><a href="#格式-2" class="headerlink" title="格式"></a>格式</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//publi default 返回值类型 方法名(参数列表){}</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> one, <span class="keyword">int</span> two)</span> </span>{<span class="comment">//public, 接口内可以省略</span></span><br><span class="line"><span class="keyword">return</span> one + two;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="私有方法"><a href="#私有方法" class="headerlink" title="私有方法"></a>私有方法</h2><h3 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h3><ul><li>使用<code>private</code>修饰，供接口中的默认方法或者静态方法调用。（JDK9出现）</li><li>用于封装默认方法中重复的代码，供默认方法调用。从设计的角度讲，私有方法是对默认方法和静态方法的辅助。<ul><li>普通私有方法：可以提取多个默认方法的公共代码块，简化默认方法的编写。</li><li>静态私有方法：可以提取多个静态方法的公共代码块，简化静态方法的编写。</li></ul></li></ul><h3 id="格式-3"><a href="#格式-3" class="headerlink" title="格式"></a>格式</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//普通私有方法：private 返回值类型 方法名(参数列表){}</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">judge</span><span class="params">(Object o1, Object o2)</span> </span>{</span><br><span class="line"><span class="keyword">return</span> o1 == o2;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//静态私有方法：private static 返回值类型 方法名(参数列表){}</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">judge2</span><span class="params">(Object o1, Object k2)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> o1 == o2;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
            <tag> 常用类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Interface接口</title>
      <link href="2020/10/15/24_Interface%E6%8E%A5%E5%8F%A3/"/>
      <url>2020/10/15/24_Interface%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="Interface接口"><a href="#Interface接口" class="headerlink" title="Interface接口"></a>Interface接口</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>接口是Java语言中一种引用类型.</p><p>接口的定义，它与定义类方式相似，但是使用的是<code>interface</code>关键字。接口不能创建对象，但是可以被子类/子接口实现（implements）。</p><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="class"><span class="keyword">interface</span> 接口名 </span>{</span><br><span class="line">    <span class="comment">//抽象方法</span></span><br><span class="line">    <span class="comment">//静态方法</span></span><br><span class="line">    <span class="comment">//默认方法</span></span><br><span class="line">    <span class="comment">//私有方法</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>{</span><br><span class="line">    <span class="comment">//抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">print</span><span class="params">(String s1)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> s1;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//默认方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> one, <span class="keyword">int</span> two)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> one + two;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">judge</span><span class="params">(Object o1, Object o2)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> o1 == o2;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="接口中的成员变量"><a href="#接口中的成员变量" class="headerlink" title="接口中的成员变量"></a>接口中的成员变量</h2><p>接口中的成员变量其实就是常量，其值是不可以改变的。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//public static final 数据类型 常量名称 = 数据值;(接口内public static final都可以省略)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> num = <span class="number">100</span>;</span><br></pre></td></tr></tbody></table></figure><h2 id="接口的多实现"><a href="#接口的多实现" class="headerlink" title="接口的多实现"></a>接口的多实现</h2><ul><li>一个接口能继承另一个或者多个接口（类只能继承一个父类）, 接口的继承使用<code>extends</code>关键字。</li><li>子接口继承父接口的方法时，如果父接口中的默认方法有重名的，那么子接口需要重写一次。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Donkey</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"AAAAAAAAA"</span>);    </span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Horse</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"BBBBBBBBBB"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Mule</span> <span class="keyword">extends</span> <span class="title">Donkey</span>, <span class="title">Horse</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"CCCCCCCCCC"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>子接口重写默认方法时，default关键字可以保留。</p><p>子类重写默认方法时，default关键字不可以保留。</p></blockquote><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li>接口是没有静态代码块或者构造方法的。</li><li>一个类只可能有一个直接父类，但是一个类可以同时实现多个接口。</li><li>其接口的实现类必须覆盖重写接口的所有抽象方法，除非实现类是抽象类。</li><li>如果实现类所实现的多个接口中，存在重复的抽象方法，那么只需要覆盖重写一次即可(相当于只继承一个)。</li><li>如果实现类实现的多个接口中，存在重复的默认方法，那么实现类就必须要对重复的默认方法重写一次（而且必须带着default关键字）。</li><li>如果一个类的直接父类中的方法，与接口当中的默认方法产生了重复，则优先使用父类当中的方法。</li><li>实现的多个接口中，如果存在同名的静态方法并不会冲突，原因是只能通过各自接口名访问静态方法。</li><li>接口也会被编译成<code>.class</code>文件，但一定要明确它并不是类，而是另外一种引用数据类型。</li></ul><blockquote><p>关于抽象方法、默认方法、静态方法、私有方法的内容，可以到《接口内四种方法类型》一文中查看。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>abstract抽象类</title>
      <link href="2020/10/15/23_abstract%E6%8A%BD%E8%B1%A1%E7%B1%BB/"/>
      <url>2020/10/15/23_abstract%E6%8A%BD%E8%B1%A1%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="abstract抽象类"><a href="#abstract抽象类" class="headerlink" title="abstract抽象类"></a>abstract抽象类</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>我们把没有方法主体的方法称为<strong>抽象方法</strong>，包含抽象方法的类就是<strong>抽象类</strong>。</p><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><h3 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修饰符 abstract 返回值类型 方法名(参数列表);</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> first, <span class="keyword">int</span> second)</span></span>;</span><br></pre></td></tr></tbody></table></figure><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修饰符 abstract class 类名 {}</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="comment">//抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> first, <span class="keyword">int</span> second)</span></span>;</span><br><span class="line">    <span class="comment">//普通方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">print</span><span class="params">(String s)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol><li><p>继承抽象类的子类<strong>必须重写父类所有的抽象方法</strong>。否则，该子类也必须声明为抽象类。并且，最终必须要有子类来实现该父类的抽象方法</p></li><li><p>不能通过抽象类创建对象，只能通过抽象类的非抽象子类创建对象。</p></li><li><p>抽象类中，可以有构造方法，是供子类创建对象时，初始化父类成员使用的。</p></li><li><p>抽象类中，不一定包含抽象方法。但是有抽象方法的类，必定是抽象类。</p><p><em>未包含抽象方法的抽象类，目的就是不想让调用者创建该类对象，通常用于某些特殊的类结构设计。</em></p></li><li><p>抽象类的子类若不为抽象类，那么就必须重写父类中所有的抽象方法。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
            <tag> 常用类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>方法重写</title>
      <link href="2020/10/15/32_%E6%96%B9%E6%B3%95%E9%87%8D%E5%86%99/"/>
      <url>2020/10/15/32_%E6%96%B9%E6%B3%95%E9%87%8D%E5%86%99/</url>
      
        <content type="html"><![CDATA[<h1 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>如果子父类出现重名的成员的方法，这时的访问是一种特殊情况，叫作<strong>方法重写</strong>（Override）。</p><p><strong>方法重写</strong>：子类中出现与父类一模一样的方法时（返回值类型、方法名、参数列表都相同），会出现覆盖效果，也称为重写或者复写。<strong>声明不变，重新实现。</strong></p><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="comment">//父类方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"superclass"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">review02</span> <span class="keyword">extends</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="comment">//子类重写后的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"subclass"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">review03</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        review02 one = <span class="keyword">new</span> review02();</span><br><span class="line">        one.show();<span class="comment">//subclass,执行的结果是重写后子类中的方法</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li><p>方法名相同</p></li><li><p>参数列表相同——即参数类型相同、参数数量相同、参数顺序相同。</p></li><li><p>子类方法的返回值类型必须和被重写父类方法的返回值一致，或者为父类方法的字类</p></li><li><p>子类方法的权限必须大于等于父类方法的权限【public &gt; protected &gt; (default) &gt; private】，且<code>private</code>修饰的方法不能被重写。</p></li><li><p>重写的方法不能抛出新的强制性异常，或者比被重写方法声明更广泛的强制性异常。但重写的方法能够抛出任何<strong>非强制异常</strong>，无论被重写的方法是否抛出其非强制异常。</p></li></ul><ul><li><p>声明为<code>final</code>的方法不能被重写。</p></li><li><p>声明为<code>static</code>的方法也不能被重写，但是能够被再次声明。</p></li></ul><ul><li><p>子类和父类在同一个包中，那么子类可以重写父类所有方法，除了声明为<code>private</code>和<code>final</code>的方法。</p></li><li><p>子类和父类不在同一个包中，那么子类只能重写父类声明为<code>public</code>和<code>protected</code>的非<code>final</code>方法。</p></li></ul><ul><li><p>构造方法不能被重写。因为构造方法的名字是与类名一致的，而父类与子类名字一定不相同。</p></li><li><p>在进行方法重写时，建议在方法上加上<code>Override</code>，用于检测方法是否重写正确。</p></li><li><p>继承、实现是重写的前提。如没有继承、实现，则不能进行重写。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
            <tag> 常用类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Math类</title>
      <link href="2020/10/15/22-Math%E7%B1%BB/"/>
      <url>2020/10/15/22-Math%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>java.lang.Math</code>类包含用于执行基本数学运算的方法，如初等指数、对数、平方根和三角函数等工具类。其所有的方法均为静态方法，并且不会创建对象，调用起来非常简单。</p><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><ul><li><code>static double abs(double a)</code>：求绝对值。</li><li><code>static double ceil(double a)</code>：向上取整。</li><li><code>static double floor(double a)</code>：向下取整。</li><li><code>static long round(double a)</code>：四舍五入。</li></ul><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">double</span> one = <span class="number">21.05</span>;</span><br><span class="line">        <span class="keyword">double</span> two = -<span class="number">99.53</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//`static double abs(double a)`：求绝对值。</span></span><br><span class="line">        <span class="keyword">double</span> three = Math.abs(one);</span><br><span class="line">        <span class="keyword">double</span> four = Math.abs(two);</span><br><span class="line">        System.out.println(three);<span class="comment">//21.05</span></span><br><span class="line">        System.out.println(four);<span class="comment">//99.53</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//`static double ceil(double a)`：向上取整。</span></span><br><span class="line">        <span class="keyword">double</span> five = Math.ceil(one);</span><br><span class="line">        <span class="keyword">double</span> six = Math.ceil(two);</span><br><span class="line">        System.out.println(five);<span class="comment">//22.0</span></span><br><span class="line">        System.out.println(six);<span class="comment">//-99.0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//`static double floor(double a)`：向下取整。</span></span><br><span class="line">        <span class="keyword">double</span> seven = Math.floor(one);</span><br><span class="line">        <span class="keyword">double</span> eight = Math.floor(two);</span><br><span class="line">        System.out.println(seven);<span class="comment">//21.0</span></span><br><span class="line">        System.out.println(eight);<span class="comment">//-100.0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//`static long round(double a)`：四舍五入。</span></span><br><span class="line">        <span class="keyword">double</span> nine = Math.round(one);</span><br><span class="line">        <span class="keyword">double</span> ten = Math.round(two);</span><br><span class="line">        System.out.println(nine);<span class="comment">//21.0</span></span><br><span class="line">        System.out.println(ten);<span class="comment">//-100.0</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
            <tag> 常用类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arrays类</title>
      <link href="2020/10/15/21_Arrays%E7%B1%BB/"/>
      <url>2020/10/15/21_Arrays%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>java.util.Arrays</code>此类包含用来操作数组的各种方法，比如排序和搜索等。其所有方法均为静态方法，调用起来非常简单。</p><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><ul><li><code>static String toString(int[] a)</code>：返回指定int数组内容的字符串表示形式（long、double等数组同理）。</li><li><code>static void sort(int[] a) </code>：将指定的int数组按升序排序（long、double等数组同理）。</li></ul><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//static String toString(int[] a)`：返回指定int数组内容的字符串表示形式</span></span><br><span class="line">        <span class="keyword">int</span>[] ints = <span class="keyword">new</span> <span class="keyword">int</span>[]{<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>,<span class="number">100</span>,<span class="number">101</span>};</span><br><span class="line">        String s1 = Arrays.toString(ints);</span><br><span class="line">        System.out.println(s1);<span class="comment">//[97, 98, 99, 100, 101]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//`static void sort(int[] a) `：将指定的int数组按升序排序</span></span><br><span class="line">        <span class="keyword">int</span>[] ints01 = <span class="keyword">new</span> <span class="keyword">int</span>[]{<span class="number">20</span>,<span class="number">19</span>,<span class="number">33</span>,<span class="number">56</span>,<span class="number">34</span>};</span><br><span class="line">        Arrays.sort(ints01);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i: ints01) {</span><br><span class="line">            System.out.print(i + <span class="string">"; "</span>);<span class="comment">//19; 20; 33; 34; 56;</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 常用类 </tag>
            
            <tag> Arrays类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>static关键字</title>
      <link href="2020/10/15/20_static%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>2020/10/15/20_static%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>static</code>关键字可以用来修饰成员变量和成员方法，被修饰的成员是属于类的，而不是单单属于某个对象。也就是说<code>static</code>修饰的变量和方法等，不能用对象来调用。</p><ol><li><p>当<code>static</code>修饰成员变量时，被修饰的变量称为<strong>静态变量</strong>。该类的每个对象都共享同一个静态变量。任何对象都可以更改该静态变量的值，也可以在不创建该类对象的情况下对静态变量进行操作。</p></li><li><p>当<code>static</code>修饰成员方法时，该方法称为<strong>静态方法</strong>。静态方法在声明中有<code>static</code>，建议使用类名来调用，而不需要创建类的对象。</p></li><li><p>当<code>static</code>修饰代码块时，该代码块被称为<strong>静态代码块</strong>。静态代码块定义在类中，方法外，是使用<code>static</code>修饰的代码块｛｝。随着类的加载而执行且执行一次，优先于main方法和构造方法的执行。</p></li></ol><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><h3 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//static 数据类型 变量名</span></span><br><span class="line"><span class="keyword">static</span> String name;</span><br></pre></td></tr></tbody></table></figure><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修饰符 static 返回值 方法名(参数列表) {}</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{}</span><br></pre></td></tr></tbody></table></figure><h3 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h3><p>定义在成员位置（类中，方法外），使用<code>static</code>修饰的代码块｛｝。随着类的加载而执行且执行一次，优先于main方法和构造方法的执行。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> review;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="keyword">static</span> {</span><br><span class="line">        System.out.println(<span class="string">"静态代码块"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"main方法"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">//执行结果:</span></span><br><span class="line"><span class="comment">//静态代码块</span></span><br><span class="line"><span class="comment">//main方法</span></span><br></pre></td></tr></tbody></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol><li>静态方法可以直接访问静态变量和静态方法，但不能直接访问普通成员变量和成员方法。</li><li>成员方法也可以直接访问静态变量或静态方法。</li><li>静态方法中，不能使用<strong>this</strong>关键字。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 常用类 </tag>
            
            <tag> String类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>String类</title>
      <link href="2020/10/15/19_String%E7%B1%BB/"/>
      <url>2020/10/15/19_String%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>java.lang.String</code>类代表字符串。java程序中所有的字符串文字（例如：<code>"abc"</code>）都可以被看作是实现此类的实例。</p><p><code>String</code>类中包括用于检查各个字符串的方法，比如用于<strong>比较</strong>字符串、<strong>搜索</strong>字符串、<strong>提取</strong>字符串以及创建具有翻译为<strong>大写</strong>或<strong>小写</strong>的所有字符的字符串的副本。</p><h3 id="不变性"><a href="#不变性" class="headerlink" title="不变性"></a>不变性</h3><p>字符串的值在被创建后不能被更改。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> review;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        String s1 = <span class="string">"jason"</span>;</span><br><span class="line">        s1 += <span class="string">"Spring"</span>;</span><br><span class="line">        System.out.println(s1);<span class="comment">//jasonSpring</span></span><br><span class="line">        <span class="comment">//表面上只有两个字符串，其实内存中有三个字符串，分别是"jason"、"Spring"、"jasonSpring"。、</span></span><br><span class="line">        <span class="comment">// s1一开始指向"jason"，后来指向"jason"、"Spring"拼接而成的"jasonSpring"。</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="共享性"><a href="#共享性" class="headerlink" title="共享性"></a>共享性</h3><p>因为String对象是不可变的，所以它们可以被共享。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="string">"jason"</span>;</span><br><span class="line">String s2 = <span class="string">"jason"</span>;</span><br><span class="line"><span class="comment">//内存中只用一个"jason"被创建，同时指向s1和s1俩个变量。</span></span><br></pre></td></tr></tbody></table></figure><h3 id="底层实现"><a href="#底层实现" class="headerlink" title="底层实现"></a>底层实现</h3><p>String底层是靠字符数组实现的。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> review;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        String s1 = <span class="string">"jason"</span>;</span><br><span class="line">        <span class="comment">//等效于</span></span><br><span class="line">        <span class="keyword">char</span> data[] = {<span class="string">'j'</span>,<span class="string">'a'</span>,<span class="string">'s'</span>,<span class="string">'o'</span>,<span class="string">'n'</span>};</span><br><span class="line">        String s2 = <span class="keyword">new</span> String(data);</span><br><span class="line"></span><br><span class="line">        System.out.println(s1);<span class="comment">//jason</span></span><br><span class="line">        System.out.println(s2);<span class="comment">//jason</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><ul><li><code>String()</code>：初始化新创建的字符串对象，使其表示空字符序列。</li><li><code>String(byte[] bytes)</code>：使用平台的默认字符集对指定的字节数组进行解码，构造一个新字符串。</li><li><code>String(char[] value)</code>：分配一个新字符串，以便它表示字符数组参数中当前包含的字符序列。</li></ul><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> review;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        String s1 = <span class="keyword">new</span> String();</span><br><span class="line">        System.out.println(s1);<span class="comment">//【空】</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[]{<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>};</span><br><span class="line">        String s2 = <span class="keyword">new</span> String(bytes);</span><br><span class="line">        System.out.println(s2);<span class="comment">//abc</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] chars = <span class="keyword">new</span> <span class="keyword">char</span>[]{<span class="string">'j'</span>,<span class="string">'a'</span>,<span class="string">'s'</span>,<span class="string">'o'</span>,<span class="string">'n'</span>};</span><br><span class="line">        String s3 = <span class="keyword">new</span> String(chars);</span><br><span class="line">        System.out.println(s3);<span class="comment">//jason</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h2><h3 id="判断的方法"><a href="#判断的方法" class="headerlink" title="判断的方法"></a>判断的方法</h3><ul><li><code>boolean equals(Object anObject)</code>：将此字符串与指定的对象进行比较。</li><li><code>boolean equalsIgnoreCase(String anotherString)</code>：将此字符串与另一个字符串进行比较，忽略大小写因素。</li><li><code>boolean isEmpty()</code>：判断字符串是否为空。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> review;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//通过字面量创建字符串</span></span><br><span class="line">        String s1 = <span class="string">"jason"</span>;</span><br><span class="line">        String s2 = <span class="string">"jason"</span>;</span><br><span class="line">        String s3 = <span class="string">"Jason"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//`boolean equals(Object anObject)`：</span></span><br><span class="line">        <span class="comment">// 将此字符串与指定的对象进行比较。</span></span><br><span class="line">        <span class="keyword">boolean</span> one = s1.equals(s2);</span><br><span class="line">        System.out.println(one);<span class="comment">//true</span></span><br><span class="line">        <span class="keyword">boolean</span> two = s1.equals(s3);</span><br><span class="line">        System.out.println(two);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//`boolean equalsIgnoreCase(String anotherString)`：</span></span><br><span class="line">        <span class="comment">// 将此字符串与另一个字符串进行比较，忽略大小写因素。</span></span><br><span class="line">        <span class="keyword">boolean</span> three = s1.equalsIgnoreCase(s2);</span><br><span class="line">        System.out.println(three);<span class="comment">//true</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="获取的方法"><a href="#获取的方法" class="headerlink" title="获取的方法"></a>获取的方法</h3><ul><li><code>int length()</code>：返回该字符串的长度。</li><li><code>String concat(String str)</code>：将指定的字符串连接到此字符串的末尾。</li><li><code>char charAt(int index)</code>：返回指定索引处的字符值。</li><li><code>int indexOf(String str)</code>：返回此字符串中指定子字符串的第一个匹配项的索引。</li><li><code>String substring(int beginIndex)</code>：返回一个字符串，该字符串是该字符串的子字符串。子字符串从指定索引处的字符开始，并扩展到该字符串的末尾。</li><li><code>String substring(int beginIndex, int endIndex)</code>：回一个字符串，该字符串是该字符串的子字符串。子字符串从指定的beginIndex开始，并扩展到索引endIndex - 1处的字符。</li></ul><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> review;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//创建一个字符串对象</span></span><br><span class="line">        String s1 = <span class="string">"jason"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//`int length()`：返回该字符串的长度。</span></span><br><span class="line">        <span class="keyword">int</span> one = s1.length();</span><br><span class="line">        System.out.println(one);<span class="comment">//5</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//`String concat(String str)`：将指定的字符串连接到此字符串的末尾。</span></span><br><span class="line">        String s2 = s1.concat(<span class="string">"Spring"</span>);</span><br><span class="line">        System.out.println(s2);<span class="comment">//jasonSpring</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//`char charAt(int index)`：返回指定索引处的字符值。</span></span><br><span class="line">        <span class="keyword">char</span> two = s1.charAt(<span class="number">4</span>);</span><br><span class="line">        System.out.println(two);<span class="comment">//n</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//`int indexOf(String str)`：返回此字符串中指定子字符串的第一个匹配项的索引。</span></span><br><span class="line">        <span class="keyword">int</span> three = s1.indexOf(<span class="string">"a"</span>);</span><br><span class="line">        System.out.println(three);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//`String substring(int beginIndex)`：</span></span><br><span class="line">        <span class="comment">// 返回一个字符串，该字符串是该字符串的子字符串。</span></span><br><span class="line">        <span class="comment">// 子字符串从指定索引处的字符开始，并扩展到该字符串的末尾。</span></span><br><span class="line">        String four = s1.substring(<span class="number">2</span>);</span><br><span class="line">        System.out.println(four);<span class="comment">//son</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//`String substring(int beginIndex, int endIndex)`：</span></span><br><span class="line">        <span class="comment">// 返回一个字符串，该字符串是该字符串的子字符串。</span></span><br><span class="line">        <span class="comment">// 子字符串从指定的beginIndex开始，并扩展到索引endIndex - 1处的字符。</span></span><br><span class="line">        String five = s1.substring(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line">        System.out.println(five);<span class="comment">//aso</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="转换的方法"><a href="#转换的方法" class="headerlink" title="转换的方法"></a>转换的方法</h3><ul><li><code>char[] toCharArray()</code>：将此字符串转换为新的字符数组。</li><li><code>byte[] getBytes()</code>：使用平台的默认字符集将该字符串编码为字节序列，并将结果存储到新的字节数组中。</li><li><code>char[] toCharArray()</code>：将此字符串转换为新的字符数组。</li><li><code>String toLowerCase()</code>：使用默认语言环境的规则将此字符串中的所有字符转换为小写。</li><li><code>String toUpperCase()</code>：使用默认语言环境的规则将此字符串中的所有字符转换为大写。</li><li><code>Static valueOf(int i)</code>：返回int参数的字符串表示形式，其他类型类似。</li><li><code>String replace(CharSequence target, CharSequence replacement)</code>：将此字符串中与文字目标序列匹配的每个子字符串替换为指定的文字替换序列。</li></ul><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> review;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//创建一个字符串对象</span></span><br><span class="line">        String s1 = <span class="string">"jason"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//`char[] toCharArray()`：将此字符串转换为新的字符数组。</span></span><br><span class="line">        <span class="keyword">char</span>[] one = s1.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c: one) {<span class="comment">//使用foreace遍历char[]数组</span></span><br><span class="line">            System.out.print(c + <span class="string">"; "</span>);<span class="comment">//j; a; s; o; n;</span></span><br><span class="line">        }</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//`byte[] getBytes()`：</span></span><br><span class="line">        <span class="comment">// 使用平台的默认字符集将该字符串编码为字节序列，并将结果存储到新的字节数组中。</span></span><br><span class="line">        <span class="keyword">byte</span>[] two = s1.getBytes();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">byte</span> b: two) {</span><br><span class="line">            System.out.print(b + <span class="string">"; "</span>);<span class="comment">//106; 97; 115; 111; 110;</span></span><br><span class="line">        }</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//`String replace(CharSequence target, CharSequence replacement)`：</span></span><br><span class="line">        <span class="comment">// 将此字符串中与文字目标序列匹配的每个子字符串替换为指定的文字替换序列。</span></span><br><span class="line">        String three = s1.replace(<span class="string">"n"</span>,<span class="string">"m"</span>);</span><br><span class="line">        System.out.println(three);<span class="comment">//jasom</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="分割的方法"><a href="#分割的方法" class="headerlink" title="分割的方法"></a>分割的方法</h3><ul><li><code>String[] split(String regex)</code>：将此字符串拆分为与给定正则表达式匹配的字符串。</li><li><code>String trim[]</code>：返回值为此字符串的字符串，并删除前导和末尾的空白。</li></ul><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> review;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//创建一个字符串</span></span><br><span class="line">        String s1 = <span class="string">"M4A1-S"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//`String[] split(String regex)`：</span></span><br><span class="line">        <span class="comment">// 将此字符串拆分为与给定正则表达式匹配的字符串。</span></span><br><span class="line">        String[] one = s1.split(<span class="string">"-"</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s: one) {</span><br><span class="line">            System.out.print(s + <span class="string">"; "</span>);<span class="comment">//M4A1; S; </span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 常用类 </tag>
            
            <tag> String类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArrayList类</title>
      <link href="2020/10/15/18_ArrayList%E7%B1%BB/"/>
      <url>2020/10/15/18_ArrayList%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="ArrayList类"><a href="#ArrayList类" class="headerlink" title="ArrayList类"></a>ArrayList类</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>java.util.ArrayList</code>是大小可变的数组的实现. <code>ArrayList</code>中可不断添加元素,其大小也自动增长.</p><p>而普通数组的长度是创建之初就固定的,无法适应数据变化的需求. </p><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><ul><li><code>ArrayList()</code>：构造一个初始容量为10的空ArrayList集合。</li><li><code>ArrList(int initialCapacity)</code>：构造一个具有指定初始容量的空ArrayList集合。</li><li><code>ArrayList(Collection&lt;? extend E&gt; c)</code>：构造一个包含指定集合元素的列表，按照集合的迭代器返回元素的顺序。</li></ul><h2 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h2><ul><li><code>boolean add(E e)</code>：将指定的元素追加到列表的末尾。</li><li><code>E remove(int index)</code>：移除此列表中指定位置的元素，并返回它。</li><li><code>E get(int index)</code>：返回列表中指定位置的元素。</li><li><code>int size()</code>：返回列表中元素的数量。</li></ul><h2 id="如何存储基本数据类型"><a href="#如何存储基本数据类型" class="headerlink" title="如何存储基本数据类型"></a>如何存储基本数据类型</h2><p>ArrayList集合不能储存基本数据类型，只能储存引用数据类型。如果想要将诸如<code>int</code>、<code>long</code>、<code>boolean</code>等基本数据类型储存到ArrayList集合中，必须先将<code>基本数据类型</code>包装成<code>引用数据类型</code>。</p><table><thead><tr><th align="center">基本数据类型</th><th align="center">引用数据类型</th></tr></thead><tbody><tr><td align="center">byte</td><td align="center">Byte</td></tr><tr><td align="center">short</td><td align="center">Short</td></tr><tr><td align="center">int</td><td align="center">Integer</td></tr><tr><td align="center">long</td><td align="center">Long</td></tr><tr><td align="center">float</td><td align="center">Float</td></tr><tr><td align="center">double</td><td align="center">Double</td></tr><tr><td align="center">char</td><td align="center">Character</td></tr><tr><td align="center">boolean</td><td align="center">Boolean</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 常用类 </tag>
            
            <tag> ArrayList类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Random类</title>
      <link href="2020/10/15/17_Random%E7%B1%BB/"/>
      <url>2020/10/15/17_Random%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="Random类"><a href="#Random类" class="headerlink" title="Random类"></a>Random类</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>java.util.Random</code><strong>用于生成一个伪随机数</strong>。通过算法产生的随机数都是伪随机！</p><p>只有通过真实的随机事件产生的随机数才是真随机，比如，通过机器的硬件噪声产生随机数、通过大气噪声产生的随机数。</p><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><ul><li><code>Random()</code>：创建一个新的随机数生成器。</li><li><code>Random(long seed)</code>：使用一个long类型的种子创建一个新的随机数生成器。</li></ul><p>构造方式的代码演示与下面的成员方法的构造方法一同测试。</p><h2 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h2><ul><li><code>boolean nextBoolean()</code>：返回这个随机数生成器序列中的下一个伪随机、均匀分布的boolean值。</li><li><code>void nextBytes(byte[] bytes)</code>：生成随机字节并将其放入用户提供的byte[]中。</li><li><code>int nextInt()</code>：返回这个随机数生成器序列中的下一个伪随机、均匀分布的int值</li><li><code>int nextInt(int bound)</code>：返回从这个随机数生成器的序列中[0, bound)之间均匀分布的伪随机int值。</li><li><code>long nextLong()</code>：返回这个随机数生成器序列的下一个均匀分布的伪随机long值。</li><li><code>double nextDouble()</code>：返回这个随机数生成器序列中下一个在0.0到1.0之间均匀分布的伪随机double值。</li><li><code>float nextFloat()</code>：返回这个随机数生成器序列中的下一个伪随机数的在0.0到1.0之间均匀分布的float值。</li></ul><p><strong>代码演示</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> review;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">int</span> one = r.nextInt();</span><br><span class="line">        <span class="keyword">int</span> two = r.nextInt(<span class="number">10</span>);</span><br><span class="line">        System.out.println(one);<span class="comment">//14391882</span></span><br><span class="line">        System.out.println(two);<span class="comment">//5</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 常用类 </tag>
            
            <tag> Random </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>匿名对象</title>
      <link href="2020/10/15/16_%E5%8C%BF%E5%90%8D%E5%AF%B9%E8%B1%A1/"/>
      <url>2020/10/15/16_%E5%8C%BF%E5%90%8D%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="匿名对象"><a href="#匿名对象" class="headerlink" title="匿名对象"></a>匿名对象</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//普通对象</span></span><br><span class="line">Person man = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"><span class="comment">//匿名对象</span></span><br><span class="line"><span class="keyword">new</span> Person();</span><br></pre></td></tr></tbody></table></figure><h2 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h2><ol><li>匿名对象的创建 即是普通对象创建不赋予变量的一种的特殊方式. </li><li>每一次创建”匿名对象”,都是一个新的对象.</li><li>“匿名对象”只能在被创建初使用一次, 无法被再次引用.</li><li>在一个对象确定只会被使用一次时,可以采用”匿名对象”.</li></ol><h2 id="匿名对象作参数"><a href="#匿名对象作参数" class="headerlink" title="匿名对象作参数"></a>匿名对象作参数</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">review01</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        anonymousObject(<span class="keyword">new</span> Scanner(System.in));<span class="comment">//这里就使用了匿名对象作方法传入的实参.</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">anonymousObject</span><span class="params">(Scanner scanner)</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"请输入一个数字: "</span>);</span><br><span class="line">        <span class="keyword">int</span> num = scanner.nextInt();</span><br><span class="line">        System.out.println(<span class="string">"您输入的数字是: "</span> + num);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="匿名对象作返回值"><a href="#匿名对象作返回值" class="headerlink" title="匿名对象作返回值"></a>匿名对象作返回值</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">review01</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Scanner scanner = anonymousObject();</span><br><span class="line">        System.out.println(<span class="string">"请输入一个数字: "</span>);</span><br><span class="line">        <span class="keyword">int</span> num = scanner.nextInt();</span><br><span class="line">        System.out.println(<span class="string">"您输入的数字是: "</span> + num);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Scanner <span class="title">anonymousObject</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Scanner(System.in);<span class="comment">//这里将匿名对象作为返回值.</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Java </tag>
            
            <tag> 对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git标签</title>
      <link href="2020/10/13/15_Git%E6%A0%87%E7%AD%BE/"/>
      <url>2020/10/13/15_Git%E6%A0%87%E7%AD%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="Git标签"><a href="#Git标签" class="headerlink" title="Git标签"></a>Git标签</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>git的标签tag相当于commitId的别名，可以让人更容易的去记住它。</p><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h3 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 为指定的版本号打标签，默认为最新的一次</span><br><span class="line">git tag [-a] &lt;tagName&gt; [-m message] &lt;commitId&gt;</span><br><span class="line"></span><br><span class="line"># -a指定标签名,省略效果一样</span><br><span class="line"># -m为注释信息</span><br></pre></td></tr></tbody></table></figure><h3 id="查看标签"><a href="#查看标签" class="headerlink" title="查看标签"></a>查看标签</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 查看所有标签</span><br><span class="line">git tag</span><br><span class="line"></span><br><span class="line"># 查看指定标签上详细的提交信息</span><br><span class="line">git show &lt;tagName&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 删除指定名字的本地标签</span><br><span class="line">git tag -d &lt;tagName&gt;</span><br><span class="line"></span><br><span class="line"># 删除指定名字的远程标签</span><br><span class="line">git push origin :refs/tags/&lt;tagName&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="推送标签"><a href="#推送标签" class="headerlink" title="推送标签"></a>推送标签</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 推送指定名字的标签到远程</span><br><span class="line">git push origin &lt;tagName&gt;</span><br><span class="line"></span><br><span class="line"># 推送全部未推送的标签到远程</span><br><span class="line">git push origin --tags</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>远程仓库</title>
      <link href="2020/10/13/14_%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/"/>
      <url>2020/10/13/14_%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><h2 id="创建SSH-Key"><a href="#创建SSH-Key" class="headerlink" title="创建SSH Key"></a>创建SSH Key</h2><p>在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有<code>id_rsa</code>和<code>id_rsa.pub</code>这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C "youremail@example.com"</span><br></pre></td></tr></tbody></table></figure><p>你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。</p><p>如果一切顺利的话，可以在用户主目录里找到<code>.ssh</code>目录，里面有<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件，这两个就是SSH Key的秘钥对，<code>id_rsa</code>是私钥，不能泄露出去，<code>id_rsa.pub</code>是公钥，可以放心地告诉任何人。</p><h2 id="添加SSH-Keys到github"><a href="#添加SSH-Keys到github" class="headerlink" title="添加SSH Keys到github"></a>添加SSH Keys到github</h2><p>登陆GitHub，打开“Account settings”——&gt;“SSH and GPG keys”页面：</p><p>然后，点“New SSH Key”，填上任意Title，在Key文本框里粘贴<code>id_rsa.pub</code>文件的内容：</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201010123623.png"></p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201010123844.png"></p><p>为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。</p><p>当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。</p><h2 id="将本地仓库同步到github上"><a href="#将本地仓库同步到github上" class="headerlink" title="将本地仓库同步到github上"></a>将本地仓库同步到github上</h2><p>首先，登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库：</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201010124812.png"></p><p>在Repository name填入<code>Blog</code>，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库：</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201010124914.png"></p><p>目前，在GitHub上的这个<code>learngit</code>仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201010125245.png"></p><p>现在，我们根据GitHub的提示，在本地的<code>Blog</code>仓库下运行命令：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/jasonM4A1/Blog.git</span><br></pre></td></tr></tbody></table></figure><p>添加后，远程库的名字就是<code>origin</code>，这是Git默认的叫法，也可以改成别的，但是<code>origin</code>这个名字一看就知道是远程库。</p><p>下一步，就可以把本地库的所有内容推送到远程库上：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></tbody></table></figure><p>图示：</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201011102330.png"></p><p>把本地库的内容推送到远程，用<code>git push</code>命令，实际上是把当前分支<code>master</code>推送到远程。</p><p>由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p><p>推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样：</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201011102638.png"></p><p>从现在起，只要本地作出了修改并提交了修改，就可以通过命令：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></tbody></table></figure><p>把本地<code>master</code>分支的最新修改推送至GitHub，现在，你就拥有了真正的分布式版本库！</p><p>命令图示：</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201011103130.png"></p><p>对应github仓库的变化：</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201011103154.png"></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>要关联一个远程库，使用命令<code>git remote add origin git@server-name:path/repo-name.git</code>；</p><p>关联后，使用命令<code>git push -u origin master</code>第一次推送master分支的所有内容；</p><p>此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改；</p><h2 id="从远程库克隆"><a href="#从远程库克隆" class="headerlink" title="从远程库克隆"></a>从远程库克隆</h2><p>上次我们讲了先有本地库，后有远程库的时候，如何关联远程库。</p><p>现在，假设我们从零开发，那么最好的方式是先创建远程库，然后，从远程库克隆。</p><p>首先，登陆GitHub，创建一个新的仓库，名字叫<code>gitskills</code>，勾选<code>Initialize this repository with</code>——&gt;<code>Add a README file</code>。这样GitHub会自动为我们创建一个<code>README.md</code>文件。</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201011103945.png"></p><p>创建完毕后，可以看到<code>README.md</code>文件：</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201011104009.png"></p><p>现在，远程库已经准备好了，下一步是用命令<code>git clone</code>克隆一个本地库：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/jasonM4A1/gitskills.git</span><br></pre></td></tr></tbody></table></figure><p>命令图示：</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201011104629.png"></p><p>对应本地仓库变化：</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201011105235.png"></p><p>如果有多个人协作开发，那么每个人各自从远程克隆一份就可以了。</p><p>你也许还注意到，GitHub给出的地址不止一个，还可以用<code>https://github.com/michaelliao/gitskills.git</code>这样的地址。实际上，Git支持多种协议，默认的<code>git://</code>使用ssh，但也可以使用<code>https</code>等其他协议。</p><p>使用<code>https</code>除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用<code>ssh</code>协议而只能用<code>https</code>。</p><h2 id="关联多个远程仓库"><a href="#关联多个远程仓库" class="headerlink" title="关联多个远程仓库"></a>关联多个远程仓库</h2><p>因为git本身是分布式版本控制系统，可以同步到另外一个远程库，当然也可以同步到另外两个远程库，所以 <strong>一个本地库可以既关联GitHub，又关联码云</strong>！</p><p>使用多个远程库时，要注意git给远程库起的默认名称是origin，如果有多个远程库，我们需要用不同的名称来标识不同的远程库。仍然以learngit本地库为例，先删除已关联的名为origin的远程库：</p><p><strong>git remote rm origin</strong></p><p>然后，先关联GitHub的远程库：</p><p><strong>git remote add github <a href="mailto:git@github.com">git@github.com</a>:\</strong>xxx**/LearnGit.git**</p><p>注意，远程库的名称叫github，不叫origin了。</p><p>接着，再关联码云的远程库：</p><p><strong>git remote add gitee <a href="mailto:git@gitee.com">git@gitee.com</a>:\</strong>xxx**/LearnGit.git**</p><p>同样注意，远程库的名称叫gitee，不叫origin。</p><p>现在，我们用 <strong>git remote -v</strong>查看远程库信息，可以看到两个远程库：gitee <a href="mailto:git@gitee.com">git@gitee.com</a>: <strong>xxx</strong>/LearnGit.git (fetch)</p><p>gitee <a href="mailto:git@gitee.com">git@gitee.com</a>: <strong>xxx</strong>/LearnGit.git (push)</p><p>github <a href="mailto:git@github.com">git@github.com</a>: <strong>xxx</strong>/LearnGit.git (fetch)</p><p>github <a href="mailto:git@github.com">git@github.com</a>: <strong>xxx</strong>/LearnGit.git (push)</p><p>如果要推送到GitHub，使用命令：</p><p><strong>git push github master</strong></p><p>如果要推送到码云，使用命令：</p><p><strong>git push gitee master</strong></p><h2 id="命令合集"><a href="#命令合集" class="headerlink" title="命令合集"></a>命令合集</h2><h3 id="创建SSH-Key-1"><a href="#创建SSH-Key-1" class="headerlink" title="创建SSH Key"></a>创建SSH Key</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C " xxx@foxmail.com </span><br></pre></td></tr></tbody></table></figure><h3 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># https方式</span><br><span class="line">git remote add origin https://github.com/githubName/repositroyName.git</span><br><span class="line"></span><br><span class="line"># ssh方式</span><br><span class="line">git remote add origin git@github.com:githubName/repositroyName.git</span><br></pre></td></tr></tbody></table></figure><h3 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 标准命令</span><br><span class="line">git push &lt;remote&gt; &lt;localBranch&gt;:&lt;remoteBranch&gt;</span><br><span class="line"></span><br><span class="line"># 如果省略远程分支名，则表示将本地分支推送与之存在“追踪关系”的远程分支（通常两者同名）， 如果该远程分支不存在，则会被新建 。</span><br><span class="line">git push &lt;remote&gt; &lt;localBranch&gt;</span><br><span class="line"></span><br><span class="line"># 如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样以后就可以不加任何参数直接使用git push。</span><br><span class="line">git push -u &lt;remoteName&gt; &lt;localBranch&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="查看远程仓库及传输协议"><a href="#查看远程仓库及传输协议" class="headerlink" title="查看远程仓库及传输协议"></a>查看远程仓库及传输协议</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 只看远程仓库名</span><br><span class="line">git remote </span><br><span class="line"></span><br><span class="line"># 查看名称和详细地址</span><br><span class="line">git remote -v</span><br></pre></td></tr></tbody></table></figure><h3 id="删除远程仓库"><a href="#删除远程仓库" class="headerlink" title="删除远程仓库"></a>删除远程仓库</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote remove &lt;remoteName&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># https方式</span><br><span class="line">git clone https://github.com/githubName/repositoryName.git</span><br><span class="line"></span><br><span class="line"># ssh方式</span><br><span class="line">git clone git@github.com:githubName/repositoryName.git</span><br><span class="line"></span><br><span class="line"># 克隆指定的分支</span><br><span class="line">git clone -b &lt;分支名&gt; &lt;仓库名&gt;</span><br></pre></td></tr></tbody></table></figure><p>注意：</p><p>（1）不能使用别名</p><p>（2）默认情况下， 从远程clone到本地的库只能看到master分支 ，如果要将远程的分支同步到本地：</p><p><strong>git checkout -b &lt;本地分支名&gt; &lt;远程主机名&gt;/&lt;远程分支名&gt;</strong></p><p>前提是远程&lt;远程主机名&gt;必须存在名为&lt;远程分支名&gt;的分支，而且&lt;本地分支名&gt;和&lt;远程分支名&gt;最好一致。</p><h3 id="本地仓库更新"><a href="#本地仓库更新" class="headerlink" title="本地仓库更新"></a>本地仓库更新</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 所有本地分支默认与远程主机的同名分支，建立追踪关系</span><br><span class="line">git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br><span class="line"></span><br><span class="line"># 手动建立追踪关系</span><br><span class="line">git branch --set-upstream-to=远程主机名/&lt;远程分支名&gt;  &lt;本地分支名&gt;</span><br></pre></td></tr></tbody></table></figure><p><strong>git fetch和git pull的区别</strong></p><p>（1） git fetch：相当于是从远程获取最新版本到本地，不会自动合并。</p><p><strong>git fetch origin mastergit log -p master..origin/mastergit merge origin/master</strong></p><p>以上命令的含义：</p><ul><li>首先从远程的origin的master主分支下载最新的版本到origin/master分支上</li><li>然后比较本地的master分支和origin/master分支的差别</li><li>最后进行合并</li></ul><p>上述过程其实可以用以下更清晰的方式来进行：</p><p><strong>git fetch origin master:tmpgit diff tmp git merge tmp</strong></p><p>（2） git pull：相当于是从远程获取最新版本并merge到本地</p><p><strong>git pull origin master</strong></p><p>上述命令其实相当于git fetch 和 git merge</p><p><strong>在实际使用中，git fetch更安全一些，因为在merge前，可以查看更新情况，然后再决定是否合并。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Git </tag>
            
            <tag> 仓库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分支管理</title>
      <link href="2020/10/13/13_%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/"/>
      <url>2020/10/13/13_%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h1><p>在<a href="https://www.liaoxuefeng.com/wiki/896043488029600/897013573512192">版本回退</a>里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即<code>master</code>分支。<code>HEAD</code>严格来说不是指向提交，而是指向<code>master</code>，<code>master</code>才是指向提交的，所以，<code>HEAD</code>指向的就是当前分支。</p><p>一开始的时候，<code>master</code>分支是一条线，Git用<code>master</code>指向最新的提交，再用<code>HEAD</code>指向<code>master</code>，就能确定当前分支，以及当前分支的提交点：</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201011110016.png"></p><p>每次提交，<code>master</code>分支都会向前移动一步，这样，随着你不断提交，<code>master</code>分支的线也越来越长。</p><p>当我们创建新的分支，例如<code>dev</code>时，Git新建了一个指针叫<code>dev</code>，指向<code>master</code>相同的提交，再把<code>HEAD</code>指向<code>dev</code>，就表示当前分支在<code>dev</code>上：</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201011110054.png"></p><p>你看，Git创建一个分支很快，因为除了增加一个<code>dev</code>指针，改改<code>HEAD</code>的指向，工作区的文件都没有任何变化！</p><p>不过，从现在开始，对工作区的修改和提交就是针对<code>dev</code>分支了，比如新提交一次后，<code>dev</code>指针往前移动一步，而<code>master</code>指针不变：</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201011110129.png"></p><p>假如我们在<code>dev</code>上的工作完成了，就可以把<code>dev</code>合并到<code>master</code>上。Git怎么合并呢？最简单的方法，就是直接把<code>master</code>指向<code>dev</code>的当前提交，就完成了合并：</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201011110222.png"></p><p>所以Git合并分支也很快！就改改指针，工作区内容也不变！</p><p>合并完分支后，甚至可以删除<code>dev</code>分支。删除<code>dev</code>分支就是把<code>dev</code>指针给删掉，删掉后，我们就剩下了一条<code>master</code>分支：</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201011110257.png"></p><p>因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在<code>master</code>分支上工作效果是一样的，但过程更安全。</p><h2 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 创建并切换到分支(本为切换，加上参数-c，就为创建)</span><br><span class="line">git switch -c &lt;分支名&gt;</span><br><span class="line"></span><br><span class="line"># 或者</span><br><span class="line">git checkout -b &lt;分支名&gt;</span><br><span class="line"></span><br><span class="line"># 或者</span><br><span class="line">git branch &lt;分支名&gt;</span><br><span class="line"></span><br><span class="line"># 创建并切换到分支，然后与远程的分支关联</span><br><span class="line">git switch -c &lt;本地分支&gt; &lt;远程仓库&gt; /&lt;远程分支&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git switch &lt;分支名&gt;</span><br><span class="line"></span><br><span class="line"># 或者</span><br><span class="line">git checkout &lt;分支名&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 查看本地分支</span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"># 查看远程分支</span><br><span class="line">git branch -r</span><br><span class="line"></span><br><span class="line"># 查看所有分支</span><br><span class="line">git branch -a</span><br></pre></td></tr></tbody></table></figure><h2 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 合并分支</span><br><span class="line">git merge &lt;branch&gt;</span><br><span class="line"></span><br><span class="line"># 合并分支，并提交</span><br><span class="line">git merge -m &lt;message&gt; &lt;branch&gt;</span><br><span class="line"></span><br><span class="line"># 禁用fast forward模式 并提交（Git就会在merge时生成一个新的commit）</span><br><span class="line">git merge --no-ff -m &lt;message&gt; &lt;branch&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="查看分支合并情况"><a href="#查看分支合并情况" class="headerlink" title="查看分支合并情况"></a>查看分支合并情况</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --graph --pretty=oneline --abbrev-commit</span><br></pre></td></tr></tbody></table></figure><h2 id="合并部分提交到其他分支"><a href="#合并部分提交到其他分支" class="headerlink" title="合并部分提交到其他分支"></a>合并部分提交到其他分支</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 将指定的提交（commit）应用于其他分支</span><br><span class="line">git cherry-pick &lt;commit&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 此分支已经合并到其他分支上时</span><br><span class="line">git branch -d &lt;branch&gt; &lt;branch&gt;</span><br><span class="line"></span><br><span class="line"># 此分支还未合并到其他分支上时，可以大写D强制删除分支</span><br><span class="line">git brach -D &lt;branch&gt; &lt;branch&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="临时保存"><a href="#临时保存" class="headerlink" title="临时保存"></a>临时保存</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 将所有未提交的修改（工作区和暂存区）保存至堆栈中,[save message]可选，为注释</span><br><span class="line">git stash [save message]</span><br><span class="line"></span><br><span class="line"># 查看所有保存记录列表</span><br><span class="line">git stash list</span><br><span class="line"></span><br><span class="line"># 恢复保存的内容，但只能恢复一次,即恢复的同时删除保存的stash。num可选，通过git stash list可查值</span><br><span class="line">git stash pop [stash@{num}]</span><br><span class="line"></span><br><span class="line"># 恢复保存的内容，可以恢复多次。num可选，通过git stash list可查值</span><br><span class="line">git stash apply [stash@{num}]</span><br><span class="line"></span><br><span class="line"># 删除某个保存，num是可选项，通过git stash list可查看具体值</span><br><span class="line">git stash drop [stash@{num}]</span><br><span class="line"></span><br><span class="line"># 删除所有保存</span><br><span class="line">git stash clear</span><br></pre></td></tr></tbody></table></figure><h2 id="合并冲突"><a href="#合并冲突" class="headerlink" title="合并冲突"></a>合并冲突</h2><p>当分支1与分支2有了两次不同的提交，这是就会产生【合并冲突】。</p><p>图示：</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201012093535.png"></p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201012093716.png"></p><p>现在，<code>master</code>分支和<code>dev</code>分支各自都分别有新的提交，变成了这样：</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201012094147.png"></p><p>这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突。我们来执行<code>git merge &lt;branch&gt;</code>试试看：</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201012094303.png"></p><p>这个时候我们打开提示<code>CONFLICT (content): Merge conflict in diary.txt</code>所说的diary.txt文件（也可以直接使用<code>git diff</code>查看文件冲突的地方）：</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201012094520.png"></p><p>Git会用<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>，<code>=======</code>，<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>标记出不同分支发生冲突的内容。这个时候，我们只需要将提示中冲突的地方修改成我们需要的内容既可：</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201012095109.png"></p><p>然后记住一定要添加并提交，添加提交后，合并就自动完成了。合并冲突也就算了解决了。</p><h3 id="疑问解答"><a href="#疑问解答" class="headerlink" title="疑问解答"></a>疑问解答</h3><p><strong>问</strong>：合并时出现下面的情况原因是什么？又该如何处理？</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201012095334.png"></p><p><strong>答</strong>：原因是提示中已经给出了<code>error: Merging is not possible because you have unmerged files.</code>，就是说合并时不可能的，因为有尚未合并的文件。解决方法提示中也给出了<code>hint: Fix them up in the work tree, and then use 'git add/rm &lt;file&gt;'</code>将工作数中的冲突文件修改一致并提交，然后可以正常合并现在你需要合并的分支了。</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 分支 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git文件操作</title>
      <link href="2020/10/13/12_Git%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
      <url>2020/10/13/12_Git%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="Git文件基本操作"><a href="#Git文件基本操作" class="headerlink" title="Git文件基本操作"></a>Git文件基本操作</h1><h2 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h2><p>版本库又名仓库，英文名<strong>repository</strong>。你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。</p><p>创建一个版本库非常简单，选择一个目录（空或非空都可以），执行下列命令：</p><p>格式：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 将所在目录变成Git可以管理的仓库</span><br><span class="line">git init</span><br></pre></td></tr></tbody></table></figure><p>图示：</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201016133931.png"></p><h2 id="将文件添加到版本库"><a href="#将文件添加到版本库" class="headerlink" title="将文件添加到版本库"></a>将文件添加到版本库</h2><h3 id="Git对于文本文件和二进制文件的区别"><a href="#Git对于文本文件和二进制文件的区别" class="headerlink" title="Git对于文本文件和二进制文件的区别"></a>Git对于文本文件和二进制文件的区别</h3><p>首先明确一点所有的版本控制系统，只能跟踪【文本文件】的改动。</p><ul><li>如果是TXT文件，Git可以告诉你这个文件每次的详细改动。比如：在第5行加了一个单词“Linux”，在第8行删了一个单词“Windows”。</li><li>但如果是图片、视频这些二进制文件，Git虽然也能进行版本控制，但是没法跟踪文件的详细变化。比如：只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，也没法知道。</li></ul><h3 id="查看文件状态"><a href="#查看文件状态" class="headerlink" title="查看文件状态"></a>查看文件状态</h3><p>格式：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 查看所有文件状态</span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line"># 查看指定文件状态</span><br><span class="line">git status &lt;file&gt;</span><br></pre></td></tr></tbody></table></figure><p>图示：</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201009131758.png"></p><h3 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h3><p>有些时候，你必须把某些文件放到Git工作目录中，但又不能提交它们，比如保存了数据库密码的配置文件啦，等等，每次<code>git status</code>都会显示<code>Untracked files ...</code>，有强迫症的童鞋心里肯定不爽。</p><p>好在Git考虑到了大家的感受，这个问题解决起来也很简单，在Git工作区的根目录下创建一个特殊的<code>.gitignore</code>文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。</p><p>不需要从头写<code>.gitignore</code>文件，GitHub已经为我们准备了各种配置文件，只需要组合一下就可以使用了。所有配置文件可以直接在线浏览：<a href="https://github.com/github/gitignore">https://github.com/github/gitignore</a></p><p>忽略文件的原则是：</p><ol><li>忽略操作系统自动生成的文件，比如缩略图等；</li><li>忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的<code>.class</code>文件；</li><li>忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。</li></ol><h3 id="添加文件到暂存-stage-区"><a href="#添加文件到暂存-stage-区" class="headerlink" title="添加文件到暂存(stage)区"></a>添加文件到暂存(stage)区</h3><p>作用：<code>git add</code>命令实际上就是把要提交的所有修改放到暂存区（Stage）</p><ul><li>所有修改是指：无论是你新创建的处于untracked状态的文件，还是已经提交过又修改了的处于unmoi状态的文件。这些都算是修改，<code>git add</code>都会将它们添加到stage。</li></ul><p>格式：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 将指定文件添加到stage区</span><br><span class="line">git add &lt;file1&gt;  &lt;file2&gt;</span><br><span class="line"></span><br><span class="line"># 将所有文件添加到stage区</span><br><span class="line">git add .</span><br></pre></td></tr></tbody></table></figure><p>图示：</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201009132512.png"></p><h3 id="提交文件到本地仓库-Repository"><a href="#提交文件到本地仓库-Repository" class="headerlink" title="提交文件到本地仓库(Repository)"></a>提交文件到本地仓库(Repository)</h3><p>作用：<code>git commit</code>可以一次性把暂存区的所有修改提交到分支。</p><p>格式：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 将所有的文件提交到Repository，&lt;messge&gt;为注解</span><br><span class="line">git commit -m &lt;message&gt;</span><br><span class="line"></span><br><span class="line"># 将所有已跟踪文件中执行了修改或删除操作的文件提交到本地仓库，不需要add。</span><br><span class="line"># 但新文件，即未跟踪文件是不会被提交的。【不建议使用】</span><br><span class="line">git commit -a -m &lt;message&gt;</span><br><span class="line"></span><br><span class="line"># 将新修改追加到前一次的commit-id中,不会增加一个新的commit-id</span><br><span class="line">git commit --amend</span><br></pre></td></tr></tbody></table></figure><p>图示：</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201009133403.png"></p><h3 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h3><p>前面我们已经提交了<code>one.txt</code>和<code>two.txt</code>两个文件到本地仓库了，现在我们需要修改<code>one.txt</code>文件里的文本内容，往文件里加入两行文字：</p><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">德玛西亚永世长存！</span><br><span class="line">你在干什么？</span><br><span class="line">前两行，是之前的内容。</span><br><span class="line">后两行，是新加的内容。</span><br></pre></td></tr></tbody></table></figure><p>执行<code>git status</code>查看修改后的文件状态：</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201009134643.png"></p><p>使用<code>git status</code>查看文件状态，这时命令行告诉我们<code>one.txt</code>处于已被修改状态。但如果想要明确的知道文件的那些内容被修改了，就要使用<code>git diff &lt;file&gt;</code>。</p><p>格式：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查看文件修改内容</span><br><span class="line">git diff &lt;file&gt;</span><br></pre></td></tr></tbody></table></figure><p>图示：</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201009135758.png"></p><p>查看过后文件的修改内容后，我们就可以把文件添加到stage，然后再提交到repository。没错，被修改后的文件，和新文件一样，同样需要先<code>git add &lt;file&gt;</code>添加到stage区，然后再<code>git commit</code>提交到Repository。</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201009142438.png"></p><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 删除文件</span><br><span class="line">git rm &lt;file&gt;</span><br><span class="line"></span><br><span class="line"># 删除文件夹</span><br><span class="line">git rm -f &lt;folder&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="临时保存"><a href="#临时保存" class="headerlink" title="临时保存"></a>临时保存</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 临时保存尚未提交的文件，message为注备</span><br><span class="line">git stash [save message]</span><br><span class="line"></span><br><span class="line"># 查看临时保存列表</span><br><span class="line">git stash list</span><br><span class="line"></span><br><span class="line"># 简略显示临时保存的文件的改动情况，默认显示第一个</span><br><span class="line">git stash show [stash@{num}]</span><br><span class="line"></span><br><span class="line"># 详细显示临时保存的文件的改动情况，默认显示第一个</span><br><span class="line">git stash show [stash@{num}] -p</span><br><span class="line"></span><br><span class="line">#应用指定存储,储存列表不变，默认使用第一个存储</span><br><span class="line">git stash apply [stash@{num}]</span><br><span class="line"></span><br><span class="line"># 应用指定存储,同时把该储存从列表删除，默认使用第一个存储</span><br><span class="line">git stash pop [stash@{num}]</span><br><span class="line"></span><br><span class="line"># 从列表中删除指定储存，默认第一个</span><br><span class="line">git stash drop [stash@{num}]</span><br><span class="line"></span><br><span class="line"># 清空储存列表</span><br><span class="line">git stash clear</span><br></pre></td></tr></tbody></table></figure><h3 id="操作日志"><a href="#操作日志" class="headerlink" title="操作日志"></a>操作日志</h3><p>你每提交到本地仓库一版文件，Git都会为你保存一个快照<code>commit</code>。这个快照记录了当前仓库里文件的内容状态。一旦你本地误删了文件，或提交了错的文件，都可以从这个历史快照中恢复文件。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 获取仓库版本历史记录</span><br><span class="line">git log</span><br><span class="line"></span><br><span class="line"># 获取仓库版本历史的简短记录</span><br><span class="line">git log --pretty=oneline</span><br><span class="line"></span><br><span class="line"># 获取仓库版本历史的简短记录，版本号只显示前几位</span><br><span class="line">git log --oneline </span><br><span class="line">或</span><br><span class="line">git log --pretty=oneline --abbrev-commit</span><br><span class="line"></span><br><span class="line"># 图形化展示提交记录的全部信息,多分支情况下可以查看分支合并图</span><br><span class="line">git log --graph</span><br><span class="line"></span><br><span class="line"># 图形化展示提交记录的简略信息，多分支情况下可以查看分支合并图</span><br><span class="line">git log --graph --oneline</span><br><span class="line"></span><br><span class="line"># 查看所有分支的所有操作记录</span><br><span class="line">git reflog</span><br><span class="line"></span><br><span class="line"># 查看提交详情</span><br><span class="line">git show [commitId] [fileName]</span><br></pre></td></tr></tbody></table></figure><p>图示：</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201009145836.png"></p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201016135435.png"></p><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 查看所有提交过的版本快照（不包括已经被reset回撤的快照）</span><br><span class="line">git log</span><br><span class="line"></span><br><span class="line"># 将仓库往前恢复成前一个版本快照</span><br><span class="line">git reset --hard HEAD~1 # HEAD~1指往前一个版本，HEAD~2指往前两个版本</span><br><span class="line">或</span><br><span class="line">git reset --hard HEAD^ # HEAD^指往前一个版本,HEAD^^指往前两个版本</span><br><span class="line"></span><br><span class="line"># 查看所有分支的所有操作记录（包含已被删除的commit记录和reset记录）</span><br><span class="line">git reflog</span><br><span class="line"></span><br><span class="line"># 将仓库恢复成指定版本号的快照</span><br><span class="line">git reset --hard &lt;commit id&gt; # 可以往前，可以往后</span><br></pre></td></tr></tbody></table></figure><p>图示：</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201009154511.png"></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git文件状态</title>
      <link href="2020/10/13/11_Git%E6%96%87%E4%BB%B6%E7%8A%B6%E6%80%81/"/>
      <url>2020/10/13/11_Git%E6%96%87%E4%BB%B6%E7%8A%B6%E6%80%81/</url>
      
        <content type="html"><![CDATA[<h1 id="Git文件四种状态"><a href="#Git文件四种状态" class="headerlink" title="Git文件四种状态"></a>Git文件四种状态</h1><ol><li><p><code>Untracked</code>：未跟踪状态；此文件只是存于文件夹中，但并没有加入到<code>Git</code>库中，不参与版本控制。</p><ul><li>执行<code>Git add</code>将文件状态变成<code>Staged</code>。</li></ul></li><li><p><code>Staged</code>：暂存状态。</p><ul><li>执行<code>git commit</code>则将修改同步到库中，这时库中的文件和本地文件又变为一致，文件状态变为<code>Unmodify</code>。</li><li>执行<code>git reset HEAD filename</code>取消暂存，文件状态变为<code>Modified</code>。</li></ul></li></ol><ul><li><code>Unmodify</code>：未修改状态；文件已经入库，未修改，即版本库中的文件快照内容与文件夹中完全一致。<ul><li>如果它被修改，则变成<code>Modified</code>状态。</li><li>执行<code>git rm</code>移除版本库，则文件状态变为<code>Untracked</code>。</li></ul></li><li><code>Modified</code>：已修改状态；文件已修改，但仅仅是修改，并没有进行其他的操作。<ul><li>执行<code>git add</code>文件状态变为<code>Staged</code>；</li><li>执行<code>git checkout</code>则丢弃修改，文件状态返回到<code>Unmodify</code>（<code>git checkout</code>即从库中取出文件，覆盖当前修改）。</li></ul></li></ul><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201008184145.png"></p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201008191521.png"></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git_config配置</title>
      <link href="2020/10/13/9_git-config%E9%85%8D%E7%BD%AE/"/>
      <url>2020/10/13/9_git-config%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="git-config配置"><a href="#git-config配置" class="headerlink" title="git config配置"></a>git config配置</h1><h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><p>在git中，我们使用git config 命令用来配置git的配置文件，git配置级别主要有以下3类：</p><ol><li>仓库级别<code>local</code>【优先级最高】</li><li>用户级别<code>global</code>【优先级次之】</li><li>系统级别<code>system</code>【优先级最低】</li></ol><h2 id="配置文件目录"><a href="#配置文件目录" class="headerlink" title="配置文件目录"></a>配置文件目录</h2><ul><li><p><code>git</code>仓库级别对应的配置文件是当前仓库下的<code>.git/config</code>。</p><p><img src="https://gitee.com/jasonm4a1/pictureHost/raw/master/20201008133713.png"></p></li><li><p><code>git</code>用户级别对应的配置文件是用户宿主目录下的<code>~/.gitconfig</code>。</p><p><img src="https://gitee.com/jasonm4a1/pictureHost/raw/master/20201008134639.png"></p></li><li><p><code>git</code>系统级别对应的配置文件是<code>git</code>安装目录下的<code>/ect/gitconfig</code>。</p><p><img src="https://gitee.com/jasonm4a1/pictureHost/raw/master/20201008134715.png"></p></li></ul><h2 id="配置命令"><a href="#配置命令" class="headerlink" title="配置命令"></a>配置命令</h2><ul><li><p><code>git config --local -l</code>查看仓库配置【必须要进入到具体的目录下，比如要查看Blog仓库的配置信息】</p><p><img src="https://gitee.com/jasonm4a1/pictureHost/raw/master/20201008195630.png"></p></li><li><p><code>git config --global -l</code>查看用户配置</p><p><img src="https://gitee.com/jasonm4a1/pictureHost/raw/master/20201008195740.png"></p></li><li><p><code>git config --system -l</code>查看系统配置</p><p><img src="https://gitee.com/jasonm4a1/pictureHost/raw/master/20201008195804.png"></p></li><li><p><code>git config -l</code>查看所有的配置信息，依次是系统级别、用户级别、仓库级别</p><p><img src="https://gitee.com/jasonm4a1/pictureHost/raw/master/20201008195507.png"></p><ul><li><code>git config --global --edit</code>直接对配置文件进行编辑</li></ul></li></ul><p><strong>补充</strong>：</p><ol><li><p><code>git config -e</code>编辑配置文件</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --local -e//编辑仓库级别配置文件</span><br><span class="line">git config --global -e//编辑用户级别配置文件</span><br><span class="line">git config --system -e //编辑系统级别配置文件</span><br></pre></td></tr></tbody></table></figure></li><li><p><code>git config</code>添加配置项目（必须要配置的）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name "you name"</span><br><span class="line">git config --global user.email "you@example.com"</span><br></pre></td></tr></tbody></table></figure><p>这里的操作是添加用户级别的配置信息，相当于修改用户宿主目录下面的配置文件。</p></li></ol><h2 id="配置文件权限级别原理"><a href="#配置文件权限级别原理" class="headerlink" title="配置文件权限级别原理"></a>配置文件权限级别原理</h2><p>对于<code>git</code>来说，配置文件的权重是仓库&gt;全局&gt;系统。<code>Git</code>会使用这一系列的配置文件来存储你定义的偏好，它首先会查找<code>/etc/gitconfig</code>文件（系统级），该文件含有对系统上所有用户及他们所拥有的仓库都生效的配置值。接下来<code>Git</code>会查找每个用户的<code>~/.gitconfig</code>文件（全局级）。最后<code>Git</code>会查找由用户定义的各个库中<code>Git</code>目录下的配置文件<code>.git/config</code>（仓库级），该文件中的值只对当前所属仓库有效。</p><h2 id="增加配置项"><a href="#增加配置项" class="headerlink" title="增加配置项"></a>增加配置项</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git config [--local|--global|--system] section.key value</span><br><span class="line"></span><br><span class="line"># 参数详解：</span><br><span class="line"># [--local|--global|--system] 可选的，对应本地、全局、系统不同级别的设置</span><br><span class="line"># section.key 对应区域下的键</span><br><span class="line"># value 对应的值</span><br></pre></td></tr></tbody></table></figure><p>在student区域下添加一个名称为sum值为32的配置项，执行结果如下：</p><p><img src="https://gitee.com/jasonm4a1/pictureHost/raw/master/20201008195217.png"></p><h2 id="获取单个配置项"><a href="#获取单个配置项" class="headerlink" title="获取单个配置项"></a>获取单个配置项</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config [--local|--global|--system] --get section.key</span><br></pre></td></tr></tbody></table></figure><p>只获取student域下面的<code>age = 32</code>这一条配置信息，操作如下：</p><p><img src="https://gitee.com/jasonm4a1/pictureHost/raw/master/20201008195316.png"></p><p>如果获取一个section不存在的key值，不会返回任何值</p><p>如果获取一个不存在的section的key值，则会报错</p><h2 id="删除一个配置项"><a href="#删除一个配置项" class="headerlink" title="删除一个配置项"></a>删除一个配置项</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config [--local|--global|--system] --unset section.key</span><br></pre></td></tr></tbody></table></figure><p>删除前面我们添加到students域下的<code>age = 32</code>这条配置信息，操作如下：</p><p><img src="https://gitee.com/jasonm4a1/pictureHost/raw/master/20201008195406.png"></p><h2 id="所有config命令参数"><a href="#所有config命令参数" class="headerlink" title="所有config命令参数"></a>所有config命令参数</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">语法: git config [&lt;options&gt;]        </span><br><span class="line">        </span><br><span class="line">文件位置        </span><br><span class="line">    --global                  #use global config file 使用全局配置文件</span><br><span class="line">    --system                  #use system config file 使用系统配置文件</span><br><span class="line">    --local                   #use repository config file    使用存储库配置文件</span><br><span class="line">    -f, --file &lt;file&gt;         #use given config file    使用给定的配置文件</span><br><span class="line">    --blob &lt;blob-id&gt;          #read config from given blob object    从给定的对象中读取配置</span><br><span class="line">        </span><br><span class="line">动作        </span><br><span class="line">    --get                     #get value: name [value-regex]    获得值：[值]名[正则表达式]</span><br><span class="line">    --get-all                 #get all values: key [value-regex]    获得所有值：[值]名[正则表达式]</span><br><span class="line">    --get-regexp          #get values for regexp: name-regex [value-regex]    得到的值根据正则</span><br><span class="line">    --get-urlmatch            #get value specific for the URL: section[.var] URL    为URL获取特定的值</span><br><span class="line">    --replace-all             #replace all matching variables: name value [value_regex]    替换所有匹配的变量：名称值[ value_regex ]</span><br><span class="line">    --add                     #add a new variable: name value    添加一个新变量：name值</span><br><span class="line">    --unset                   #remove a variable: name [value-regex]    删除一个变量名[值]：正则表达式</span><br><span class="line">    --unset-all               #remove all matches: name [value-regex]    删除所有匹配的正则表达式：名称[值]</span><br><span class="line">    --rename-section          #rename section: old-name new-name    重命名部分：旧名称 新名称</span><br><span class="line">    --remove-section          #remove a section: name    删除部分：名称</span><br><span class="line">    -l, --list                #list all    列出所有</span><br><span class="line">    -e, --edit            #open an editor    打开一个编辑器</span><br><span class="line">    --get-color               #find the color configured: slot [default]    找到配置的颜色：插槽[默认]</span><br><span class="line">    --get-colorbool           #find the color setting: slot [stdout-is-tty]    发现颜色设置：槽[ stdout是TTY ]</span><br><span class="line">        </span><br><span class="line">类型        </span><br><span class="line">    --bool                    #value is "true" or "false"    值是“真”或“假”。</span><br><span class="line">    --int                     #value is decimal number    值是十进制数。</span><br><span class="line">    --bool-or-int             #value is --bool or --int    值--布尔或int</span><br><span class="line">    --path                    #value is a path (file or directory name)    值是路径（文件或目录名）</span><br><span class="line">        </span><br><span class="line">其它        </span><br><span class="line">    -z, --null                #terminate values with NUL byte    终止值与null字节</span><br><span class="line">    --name-only               #show variable names only    只显示变量名</span><br><span class="line">    --includes                #respect include directives on lookup    尊重包括查找指令</span><br><span class="line">    --show-origin             #show origin of config (file, standard input, blob, command line)    显示配置（文件、标准输入、数据块、命令行）的来源</span><br></pre></td></tr></tbody></table></figure><h2 id="更多配置项"><a href="#更多配置项" class="headerlink" title="更多配置项"></a>更多配置项</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">git config --global color.ui true   #打开所有的默认终端着色</span><br><span class="line"># 配置别名</span><br><span class="line">git config --global alias.ci commit   #别名 ci 是commit的别名</span><br><span class="line">[alias]  </span><br><span class="line">co = checkout  </span><br><span class="line">ci = commit  </span><br><span class="line">st = status  </span><br><span class="line">pl = pull  </span><br><span class="line">ps = push  </span><br><span class="line">dt = difftool  </span><br><span class="line">l = log --stat  </span><br><span class="line">cp = cherry-pick  </span><br><span class="line">ca = commit -a  </span><br><span class="line">b = branch </span><br><span class="line"></span><br><span class="line">user.name  #用户名</span><br><span class="line">user.email  #邮箱</span><br><span class="line">core.editor  #文本编辑器  </span><br><span class="line">merge.tool  #差异分析工具  </span><br><span class="line">core.paper "less -N"  #配置显示方式  </span><br><span class="line">color.diff true  #diff颜色配置  </span><br><span class="line">alias.co checkout  #设置别名</span><br><span class="line">git config user.name  #获得用户名</span><br><span class="line">git config core.filemode false  #忽略修改权限的文件  </span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git基本理论</title>
      <link href="2020/10/13/10_Git%E5%9F%BA%E6%9C%AC%E7%90%86%E8%AE%BA/"/>
      <url>2020/10/13/10_Git%E5%9F%BA%E6%9C%AC%E7%90%86%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="Git基本理论（核心）"><a href="#Git基本理论（核心）" class="headerlink" title="Git基本理论（核心）"></a>Git基本理论（核心）</h1><h2 id="四个工作区"><a href="#四个工作区" class="headerlink" title="四个工作区"></a>四个工作区</h2><ol><li><p><strong>工作目录</strong>【Working Directory】</p><p>即你平时存放项目代码的地方。</p></li><li><p><strong>暂存区</strong>【Stage/Index】</p><p>也叫待提交更新区，在提交进入repo之前，我们可以把所有的更新放在暂存区。用于临时存放你的改动，保存即将提交到文件列表的信息（事实上它只是一个文件）。</p></li><li><p><strong>本地资源库</strong>【Repository或Git Directory】</p><p>用于安全存放数据的位置，这里有你提交的所有版本信息。其中HEAD指向最新放入仓库的版本。</p></li><li><p><strong>远程资源库</strong>【Remote Directory】</p><p>托管代码的服务器，相当于把你的本地仓库<code>clone</code>到了云盘上。如<code>Github</code>、<code>Gitee</code>。你可以简单的认为是你项目组中的一台用于远程数据交换的电脑。</p></li></ol><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201016134339.png"></p><p>我们对下面的这张图进行讲解，以加深对<code>Git</code>的理解。</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201008142409.png"></p><ol><li><code>Directory</code>：使用<code>Git</code>管理的一个仓库，其中包含了我们使用的工作空间和<code>Git</code>管理空间。</li><li><code>WorkSpace</code>：里面存放着<code>Git</code>进行版本控制的目录和文件。</li><li><code>.git</code>：存放着<code>Git</code>管理信息的目录，在初始化仓库的时候就自动创建完毕。</li><li><code>Index/Stage</code>：暂存区，或者称为待提交更新区。在提交进入<code>repo</code>之前，我们可以把所有的更新临时放在暂存区中。</li><li><code>Local Repo</code>：本地仓库，一个存放在本地的版本库。</li><li><code>Stash</code>：隐藏，是一个工作状态保存栈。用于保存/回复<code>WorkSpeace</code>中的临时状态。</li></ol><h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><ol><li>首先在工作目录中添加、修改文件。对应文件状态——已修改【modified】</li><li>然后将需要进行版本管理的文件放入暂存区域。对应文件状态——已暂存【staged】</li><li>将暂存区域的文件提交到<code>Git</code>仓库。对应文件状态——已提交【committed】</li></ol><p>下图为各个工作区域进行更换的命令图解：</p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201008143501.png"></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7终端中文乱码</title>
      <link href="2020/10/13/1_centos7%E7%BB%88%E7%AB%AF%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/"/>
      <url>2020/10/13/1_centos7%E7%BB%88%E7%AB%AF%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p><strong>问题</strong></p><p>出现乱码，如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">������ϵ���</span><br><span class="line"></span><br><span class="line">=====================================================================</span><br><span class="line"> Package             �ܹ�      �汾                 Դ          ��С</span><br><span class="line">=====================================================================</span><br><span class="line">���ڰ�װ:</span><br><span class="line"> git                 x86_64    1.8.3.1-23.el7_8     updates    4.4 M</span><br><span class="line">Ϊ��������װ:</span><br><span class="line"> perl-Error          noarch    1:0.17020-2.el7      base        32 k</span><br><span class="line"> perl-Git            noarch    1.8.3.1-23.el7_8     updates     56 k</span><br><span class="line"> perl-TermReadKey    x86_64    2.30-20.el7          base        31 k</span><br><span class="line"> rsync               x86_64    3.1.2-10.el7         base       404 k</span><br><span class="line"></span><br><span class="line">�����Ҫ</span><br><span class="line">=====================================================================</span><br><span class="line">��װ  1 ����� (+4 ���������)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><strong>解决方法</strong></p><ol><li><p>查看服务器编码的命令<code>locale -a</code>，看里面是否有下面四项：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zh_CN.gb18030</span><br><span class="line">zh_CN.gb2312</span><br><span class="line">zh_CN.gbk</span><br><span class="line">zh_CN.utf8</span><br></pre></td></tr></tbody></table></figure><p>如果有，则不用安装，如果没有，需要重新安装，使用<code>yum install kde-l10n-Chinese</code></p></li><li><p>查看服务器编码的命令<code>locale</code>，看否是<code>zh_CN.UTF-8</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@iz2ze0pget2kzcthzz3k6oz ~]# echo $LANG</span><br><span class="line">zh_CN.UTF-8</span><br></pre></td></tr></tbody></table></figure><p>如果是，跳过。如果不是，则需要执行<code>vim /etc/locale.conf</code>。用下列内容覆盖原内容。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LANG="zh_CN.GB18030"</span><br><span class="line">LANGUAGE="zh_CN.GB18030:zh_CN.GB2312:zh_CN"</span><br><span class="line">SUPPORTED="zh_CN.UTF-8:zh_CN:zh:en_US.UTF-8:en_US:en"</span><br><span class="line">SYSFONT="lat0-sun16"</span><br></pre></td></tr></tbody></table></figure></li><li><p>修改终端xshell编码为UTF-8</p><p><img src="https://gitee.com/CharlieLiLi/pictureHost/raw/master/20201013171737.png"></p></li><li><p>执行<code>vim /etc/sysconfig/i18n</code>（可能这个文件本不存在），粘贴以下文本</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LANG="zh_CN.UTF-8"</span><br></pre></td></tr></tbody></table></figure></li><li><p>执行<code>vim /etc/profile</code>（与前几个文件不同，这个文件内容较多），直接空一行粘贴以下文本到最后就行了。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export LANG="zh_CN.UTF-8"</span><br></pre></td></tr></tbody></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 报错解决 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS下su 鉴定故障</title>
      <link href="2020/10/13/2_CentOS%E4%B8%8Bsu-%E9%89%B4%E5%AE%9A%E6%95%85%E9%9A%9C/"/>
      <url>2020/10/13/2_CentOS%E4%B8%8Bsu-%E9%89%B4%E5%AE%9A%E6%95%85%E9%9A%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="CentOS下su-鉴定故障"><a href="#CentOS下su-鉴定故障" class="headerlink" title="CentOS下su: 鉴定故障"></a>CentOS下su: 鉴定故障</h1><p>如果root密码正确，输入su出现鉴定故障</p><p>那么请用 sudo su试试看</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 报错解决 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo初次部署到github无效</title>
      <link href="2020/10/13/7_Hexo%E5%88%9D%E6%AC%A1%E9%83%A8%E7%BD%B2%E5%88%B0github%E6%97%A0%E6%95%88/"/>
      <url>2020/10/13/7_Hexo%E5%88%9D%E6%AC%A1%E9%83%A8%E7%BD%B2%E5%88%B0github%E6%97%A0%E6%95%88/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo初次部署到github无效"><a href="#Hexo初次部署到github无效" class="headerlink" title="Hexo初次部署到github无效"></a>Hexo初次部署到github无效</h1><p><strong>问题描述</strong></p><p><code>hexo s</code>本地预览没有博客样式任何问题，github page也可以通过<code>githubName/githubName.github.io</code>的方式打开。但是使用<code>hexo d -g</code>将博客部署到github上后，再次采用<code>githubName/githubName.github.io</code>的方式去访问github页面，发现页面仍然没有变化，还是我之前为github page选择的默认样式。等于说，本地的博客内容没有再github上生效。</p><p><strong>解决思路</strong></p><p>我去github仓库查看，发现仓库根本没有更新。我开始怀疑是本地的文件根本没有推送到github仓库中，于是我去查看一个github仓库的提交记录。发现main 分支中的文件确实没有得到更新，但是我看到还一个分支master。我想到在本地博客_config.yml中<code>bracnh</code>后面我是配置的为<code>master</code>。所以我在github中把分支切换到了master，发现master中的分支果然在不久前有提交。所以就排除了提交失败的问题。我又抛出github page设置看看了，发现竟然有branch的选项，默认设置的是main分支。也就是说现在我的github page显示的是main分支的内容。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">  type:  git</span><br><span class="line">  repo:  https://github.com/jasonM4A1/jasonM4A1.github.io.git</span><br><span class="line">  branch:  master</span><br></pre></td></tr></tbody></table></figure><p><strong>解决方法</strong></p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201013153839.png"></p><p><img src="https://gitee.com/jasonM4A1/pictureHost/raw/master/20201013153856.png"></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> Hexo </tag>
            
            <tag> 报错 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo主题Butterfly报错</title>
      <link href="2020/10/13/6_Hexo%E4%B8%BB%E9%A2%98Butterfly%E6%8A%A5%E9%94%99/"/>
      <url>2020/10/13/6_Hexo%E4%B8%BB%E9%A2%98Butterfly%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo主题Butterfly报错"><a href="#Hexo主题Butterfly报错" class="headerlink" title="Hexo主题Butterfly报错"></a>Hexo主题Butterfly报错</h1><p>直接用github上作者提供的代码</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master [https://github.com/jerryc127/hexo-theme-butterfly.git](https://github.com/jerryc127/hexo-theme-butterfly.git) themes/Butterfly</span><br></pre></td></tr></tbody></table></figure><p>结果是页面根本无法正常渲染，只有一行字：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extends includes/layout.pug block content include ./includes/mixins/post-ui.pug #recent-posts.recent-posts +postUI include includes/pagination.pug</span><br></pre></td></tr></tbody></table></figure><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>参照原作者提供的文章<a href="https://links.jianshu.com/go?to=https://docs.jerryc.me/%23/config/question">Butterfly</a></p><p>按照方法安装<code>npm install hexo-renderer-pug hexo-renderer-stylus --save</code>然后打开</p><p><strong>丝滑进入</strong></p><blockquote><p>原文链接：<a href="https://www.jianshu.com/p/aa936a8369fb">https://www.jianshu.com/p/aa936a8369fb</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> Hexo </tag>
            
            <tag> Butterfly </tag>
            
            <tag> 报错 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
